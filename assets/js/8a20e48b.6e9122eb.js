"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[6033],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(96540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},37869:e=>{e.exports=JSON.parse('{"permalink":"/semgrep-docs/release-notes/may-2022","source":"@site/release-notes/may-2022.md","title":"May 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-05-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/semgrep-docs/release-notes/tags/release-notes"}],"readingTime":4.35,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"may-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-05-30T10:00","title":"May 2022"},"unlisted":false,"prevItem":{"title":"June 2022","permalink":"/semgrep-docs/release-notes/june-2022"},"nextItem":{"title":"April 2022","permalink":"/semgrep-docs/release-notes/april-2022"}}')},45915:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var i=s(37869),t=s(74848),r=s(28453);const a={slug:"may-2022",append_help_link:!0,hide_title:!0,description:"Release notes include the changes, fixes, and additions in specific versions of Semgrep.",toc_max_heading_level:3,tags:["Release notes"],hide_table_of_contents:!1,date:"2022-05-30T10:00",title:"May 2022"},o="May 2022",d={authorsImageUrls:[]},l=[{value:"Semgrep App",id:"semgrep-app",level:2},{value:"Additions",id:"additions",level:3},{value:"Changes",id:"changes",level:3},{value:"Semgrep CLI and Semgrep in CI",id:"semgrep-cli-and-semgrep-in-ci",level:2},{value:"Changes",id:"changes-1",level:3},{value:"Additions",id:"additions-1",level:3},{value:"Additional information",id:"additional-information",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The following updates were made to Semgrep in May 2024."}),"\n",(0,t.jsx)(n.h2,{id:"semgrep-app",children:"Semgrep App"}),"\n",(0,t.jsx)(n.h3,{id:"additions",children:"Additions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Team and Enterprise tier users can now integrate Semgrep into their GitHub Enterprise (GHE) and GitLab Self-Managed (GLSM) repositories. See ",(0,t.jsx)(n.a,{href:"/deployment/connect-scm",children:"Integrating Semgrep into source code management (SCM) tools"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"You can now scan locally through Semgrep CLI and then upload findings to Semgrep App."}),"\n",(0,t.jsxs)(n.li,{children:["Semgrep App now has a project setup page for integrating Semgrep with Jenkins. To create a new project with Jenkins, log in to Semgrep App and click ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://semgrep.dev/orgs/-/projects",children:"Projects"})})," > ",(0,t.jsx)(n.strong,{children:"Scan new project"})," > ",(0,t.jsx)(n.strong,{children:"Run scan in CI"})," > ",(0,t.jsx)(n.strong,{children:"Jenkins"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"changes",children:"Changes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The Playground UI is now similar to Semgrep App's Editor UI for a consistent experience."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"semgrep-cli-and-semgrep-in-ci",children:"Semgrep CLI and Semgrep in CI"}),"\n",(0,t.jsxs)(n.p,{children:["These release notes include upgrades for all versions ranging between ",(0,t.jsx)(n.strong,{children:"0.91.0"})," and ",(0,t.jsx)(n.strong,{children:"0.94.0"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"changes-1",children:"Changes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["taint-mode: Let's say that the ",(0,t.jsx)(n.code,{children:"taint(x)"})," function makes ",(0,t.jsx)(n.code,{children:"x"})," argument tainted by side-effect. Previously, Semgrep had to rely on a workaround that declared that any occurrence of ",(0,t.jsx)(n.code,{children:"x"})," inside ",(0,t.jsx)(n.code,{children:"taint(x); ..."})," was a taint source. If ",(0,t.jsx)(n.code,{children:"x"})," was overwritten with safe data, this was not recognized by the taint engine. Also, if ",(0,t.jsx)(n.code,{children:"taint(x)"})," occurred inside of, for example, an ",(0,t.jsx)(n.code,{children:"if"})," block, any occurrence of ",(0,t.jsx)(n.code,{children:"x"})," outside that block was not considered tainted. Now, if you specify that the code variable itself is a taint source (using ",(0,t.jsx)(n.code,{children:"focus-metavariable"}),"), the taint engine will handle this as expected, and it will not suffer from the aforementioned limitations. We believe that this change should not break existing taint rules, but please report any regressions that you may find."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["taint-mode: Let's say that the ",(0,t.jsx)(n.code,{children:"sanitize(x)"})," function sanitizes ",(0,t.jsx)(n.code,{children:"x"})," argument by side-effect. Previously, Semgrep had to rely on a workaround that declared that any occurrence of ",(0,t.jsx)(n.code,{children:"x"})," inside ",(0,t.jsx)(n.code,{children:"sanitize(x); ..."})," was sanitized. If ",(0,t.jsx)(n.code,{children:"x"})," is later overwritten with tainted data, the taint engine would still consider ",(0,t.jsx)(n.code,{children:"x"})," parameter as safe. Now, if you specify that the code variable itself is sanitized (using ",(0,t.jsx)(n.code,{children:"focus-metavariable"}),"), the taint engine handles this as expected and it will not suffer from such limitation. We believe that this change should not break existing taint rules, but please report any regressions that you may find."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The dot access ellipsis now matches field accesses in addition to method calls. See the following example in ",(0,t.jsx)(n.a,{href:"https://semgrep.dev/playground/s/9010",children:"Semgrep Playground"}),"."]}),"\n",(0,t.jsx)("iframe",{title:"Semgrep example no prints",src:"https://semgrep.dev/embed/editor?snippet=j4x2",width:"100%",height:"432",frameborder:"0"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In this version, we have made several performance improvements to the code that surrounds our source parsing and matching core. This includes file targeting, rule fetching, and similar parts of the codebase. When we tested ",(0,t.jsx)(n.code,{children:"semgrep scan --config auto"})," on the Semgrep repository itself, the performance improved from 50-54 seconds to 28-30 seconds."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["As part of these changes, we removed ",(0,t.jsx)(n.code,{children:":include .gitignore"})," and ",(0,t.jsx)(n.code,{children:".git/"})," from the default ",(0,t.jsx)(n.code,{children:".semgrepignore"})," patterns. This should not cause any difference in which files are targeted as other parts of Semgrep ignore these files already."]}),"\n",(0,t.jsxs)(n.li,{children:["A full breakdown of our performance updates, including some upcoming ones, can be found in this ",(0,t.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/5257#issuecomment-1133395694",children:"GitHub comment that gives an overview of these changes"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If a metrics event request times out, Semgrep no longer retries the request. This avoids Semgrep waiting 10-20 seconds before exiting if these requests are slow."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The metrics collection timeout has been raised from 2 seconds to 3 seconds."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Files, where only a part of the code was skipped due to a parse failure, are now listed as ",(0,t.jsx)(n.code,{children:"partially scanned"})," in the end-of-scan skip report."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"isAuthenticated"})," was added to metrics sent to Semgrep backend. This is a boolean flag that is true if you are logged in."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Semgrep in CI prints out all findings instead of hiding nonblocking findings. (",(0,t.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/5116",children:"#5116"}),")"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"additions-1",children:"Additions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"metavariable-regex"})," now supports an optional ",(0,t.jsx)(n.code,{children:"constant-propagation"})," key. When this is set to ",(0,t.jsx)(n.code,{children:"true"}),", information learned from constant propagation is used when matching the metavariable against the regex. By default, it is set to ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Dockerfile: Constant propagation now works on variables declared with ",(0,t.jsx)(n.code,{children:"ENV"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Added ",(0,t.jsx)(n.code,{children:"shouldafound"}),". For more information, see ",(0,t.jsx)(n.a,{href:"/reporting-false-negatives",children:"Reporting false negatives"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["dataflow: The ",(0,t.jsx)(n.a,{href:"/writing-rules/data-flow/data-flow-overview",children:"data-flow analysis engine"})," now handles ",(0,t.jsx)(n.code,{children:"if-then-else"})," ",(0,t.jsx)(n.strong,{children:"expressions"})," as in OCaml, Ruby, etc. Previously it only handled ",(0,t.jsx)(n.code,{children:"if-then-else"})," ",(0,t.jsx)(n.strong,{children:"statements"}),". (",(0,t.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/4965",children:"#4965"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["taint-mode: Previously, to declare a function parameter as a taint source, Semgrep relied on a workaround that declared that any occurrence of the parameter was a taint source. If the parameter was overwritten with safe data, this was not recognized by the taint engine. Now, ",(0,t.jsx)(n.code,{children:"focus-metavariable"})," can be used to specify that a function parameter is a source of taint, and the taint engine handles this as expected."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["taint-mode: Add basic support for object destructuring in languages such as JavaScript. For example, given ",(0,t.jsx)(n.code,{children:"let {x} = E"}),", Semgrep now infers that ",(0,t.jsx)(n.code,{children:"x"})," is tainted if ",(0,t.jsx)(n.code,{children:"E"})," is tainted."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The JSON output of the Semgrep scan is now fully specified using ",(0,t.jsx)(n.a,{href:"https://atd.readthedocs.io/",children:"ATD"})," and JSON Schema (",(0,t.jsx)(n.a,{href:"https://json-schema.org/",children:"https://json-schema.org/"}),"). See the semgrep-interfaces submodule under interfaces/ (for example, ",(0,t.jsx)(n.code,{children:"interfaces/semgrep-interfaces/Semgrep_output_v0.atd"})," for the ATD specifications)."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The JSON output of ",(0,t.jsx)(n.code,{children:"semgrep scan"})," now contains a ",(0,t.jsx)(n.code,{children:"version"}),": field with the version of Semgrep used to generate the match results."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"additional-information",children:"Additional information"}),"\n",(0,t.jsxs)(n.p,{children:["To see the complete change notes which include fixed issues, visit the ",(0,t.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/releases/",children:"Semgrep changelog"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);