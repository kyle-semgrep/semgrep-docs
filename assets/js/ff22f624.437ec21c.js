"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[1049],{28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>c});var t=n(96540);const s={},a=t.createContext(s);function i(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:r},e.children)}},76447:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"kb/semgrep-ci/mr-comments-through-gitlab-runner","title":"Receive Semgrep MR comments through a GitLab runner","description":"Set additional environment variables to receive Semgrep MR comments through a GitLab runner.","source":"@site/docs/kb/semgrep-ci/mr-comments-through-gitlab-runner.md","sourceDirName":"kb/semgrep-ci","slug":"/kb/semgrep-ci/mr-comments-through-gitlab-runner","permalink":"/semgrep-docs/kb/semgrep-ci/mr-comments-through-gitlab-runner","draft":false,"unlisted":false,"editUrl":"https://github.com/semgrep/semgrep-docs/edit/main/docs/kb/semgrep-ci/mr-comments-through-gitlab-runner.md","tags":[{"inline":true,"label":"Semgrep in CI","permalink":"/semgrep-docs/tags/semgrep-in-ci"}],"version":"current","lastUpdatedAt":1715605886000,"frontMatter":{"append_help_link":true,"title":"Receive Semgrep MR comments through a GitLab runner","hide_title":true,"description":"Set additional environment variables to receive Semgrep MR comments through a GitLab runner.","tags":["Semgrep in CI"]},"sidebar":"kbSidebar","previous":{"title":"Jenkins shared library with Semgrep scans","permalink":"/semgrep-docs/kb/semgrep-ci/jenkins-shared-library-with-semgrep"},"next":{"title":"Why are there new source code manager (SCM) connections that I didn\'t manually configure listed in Semgrep AppSec Platform?","permalink":"/semgrep-docs/kb/semgrep-ci/new-scm-connections"}}');var s=n(74848),a=n(28453);const i={append_help_link:!0,title:"Receive Semgrep MR comments through a GitLab runner",hide_title:!0,description:"Set additional environment variables to receive Semgrep MR comments through a GitLab runner.",tags:["Semgrep in CI"]},c="Receive Semgrep MR comments through a GitLab runner",o={},l=[];function p(e){const r={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"receive-semgrep-mr-comments-through-a-gitlab-runner",children:"Receive Semgrep MR comments through a GitLab runner"})}),"\n",(0,s.jsxs)(r.p,{children:["Generally, Semgrep recommends using the ",(0,s.jsxs)(r.a,{href:"https://docs.gitlab.com/ee/ci/pipelines/merge_request_pipelines.html",children:[(0,s.jsx)("i",{class:"fas fa-external-link fa-xs"})," GitLab merge request pipeline"]})," to receive MR comments. This method is used in the default ",(0,s.jsx)(r.a,{href:"/semgrep-ci/sample-ci-configs/#sample-github-actions-configuration-file",children:"Semgrep GitLab config file"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["However, you can also receive comments through your own ",(0,s.jsxs)(r.a,{href:"https://docs.gitlab.com/runner/",children:[(0,s.jsx)("i",{class:"fas fa-external-link fa-xs"})," GitLab runner"]})," by setting the following variables in your CI job:"]}),"\n",(0,s.jsx)("pre",{class:"language-bash",children:(0,s.jsx)("code",{children:(0,s.jsxs)(r.p,{children:["export GITLAB_CI='true'\nexport CI_PROJECT_PATH='",(0,s.jsx)("span",{className:"placeholder",children:"USERNAME"}),"/",(0,s.jsx)("span",{className:"placeholder",children:"PROJECTNAME"}),"'\nexport CI_MERGE_REQUEST_PROJECT_URL='",(0,s.jsx)(r.a,{href:"https://gitlab.com/",children:"https://gitlab.com/"}),(0,s.jsx)("span",{className:"placeholder",children:"USERNAME"}),"/",(0,s.jsx)("span",{className:"placeholder",children:"PROJECTNAME"}),"'\nexport CI_PROJECT_URL=\"$CI_MERGE_REQUEST_PROJECT_URL\"\nexport CI_COMMIT_SHA='",(0,s.jsx)("span",{className:"placeholder",children:"COMMIT-SHA-VALUE"}),"'\nexport CI_COMMIT_REF_NAME='",(0,s.jsx)("span",{className:"placeholder",children:"REF"}),"'\nexport CI_MERGE_REQUEST_TARGET_BRANCH_NAME='",(0,s.jsx)("span",{className:"placeholder",children:"BRANCH_NAME"}),"'\nexport CI_JOB_URL='",(0,s.jsx)("span",{className:"placeholder",children:"JOB_URL"}),"'\nexport CI_PIPELINE_SOURCE='merge_request_event'\nexport CI_MERGE_REQUEST_IID='",(0,s.jsx)("span",{className:"placeholder",children:"REQUEST_IID"}),"'\nexport CI_MERGE_REQUEST_DIFF_BASE_SHA='",(0,s.jsx)("span",{className:"placeholder",children:"SHA"}),"'\nexport CI_MERGE_REQUEST_TITLE='",(0,s.jsx)("span",{className:"placeholder",children:"MERGE_REQUEST_TITLE"}),"'"]})})}),"\n",(0,s.jsxs)(r.p,{children:["Replace magenta-colored placeholders in the preceding code snippet with your specific values (for example ",(0,s.jsx)("code",{children:(0,s.jsx)("span",{className:"placeholder",children:"USERNAME"})}),")."]}),"\n",(0,s.jsxs)(r.p,{children:["For more information on all of these variables see GitLab documentation ",(0,s.jsx)(r.a,{href:"https://docs.gitlab.com/ee/ci/variables/predefined_variables.html",children:"Predefined variables reference"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"Example with sample values:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sh",children:'export GITLAB_CI=\'true\'\nexport CI_PROJECT_PATH="gitlab-org/gitlab-foss"\nexport CI_MERGE_REQUEST_PROJECT_URL="https://example.com/gitlab-org/gitlab-foss"\nexport CI_PROJECT_URL="$CI_MERGE_REQUEST_PROJECT_URL"\nexport CI_COMMIT_SHA="1ecfd275763eff1d6b4844ea3168962458c9f27a"\nexport CI_COMMIT_REF_NAME="main"\nexport CI_MERGE_REQUEST_TARGET_BRANCH_NAME="main"\nexport CI_JOB_URL="https://gitlab.com/gitlab-examples/ci-debug-trace/-/jobs/379424655"\nexport CI_PIPELINE_SOURCE=\'merge_request_event\'\nexport CI_MERGE_REQUEST_IID="1"\nexport CI_MERGE_REQUEST_DIFF_BASE_SHA="1ecfd275763eff1d6b4844ea6874447h694gh23d"\nexport CI_MERGE_REQUEST_TITLE="Testing branches"\n'})})]})}function m(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);