"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[55375],{13721:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"semgrep-appsec-platform/webhooks","title":"Webhooks","description":"Create webhooks to receive Semgrep findings in your endpoints.","source":"@site/docs/semgrep-appsec-platform/webhooks.md","sourceDirName":"semgrep-appsec-platform","slug":"/semgrep-appsec-platform/webhooks","permalink":"/semgrep-docs/semgrep-appsec-platform/webhooks","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/semgrep-appsec-platform/webhooks.md","tags":[{"inline":true,"label":"Semgrep AppSec Platform","permalink":"/semgrep-docs/tags/semgrep-app-sec-platform"}],"version":"current","lastUpdatedAt":1753220396000,"frontMatter":{"slug":"webhooks","append_help_link":true,"title":"Webhooks","hide_title":true,"description":"Create webhooks to receive Semgrep findings in your endpoints.","tags":["Semgrep AppSec Platform"]},"sidebar":"scanSidebar","previous":{"title":"Email","permalink":"/semgrep-docs/semgrep-appsec-platform/email-notifications"},"next":{"title":"Dashboard","permalink":"/semgrep-docs/semgrep-appsec-platform/dashboard"}}');var t=s(74848),o=s(28453),r=s(36443);const a={slug:"webhooks",append_help_link:!0,title:"Webhooks",hide_title:!0,description:"Create webhooks to receive Semgrep findings in your endpoints.",tags:["Semgrep AppSec Platform"]},c="Enable webhooks",l={},d=[{value:"Set up webhooks",id:"set-up-webhooks",level:2},{value:"Test webhooks",id:"test-webhooks",level:2},...r.RM,{value:"Semgrep findings object",id:"semgrep-findings-object",level:2},{value:"Semgrep scan object",id:"semgrep-scan-object",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"enable-webhooks",children:"Enable webhooks"})}),"\n",(0,t.jsx)(n.p,{children:"Webhooks are a generic method for Semgrep AppSec Platform to post JSON-formatted findings after each scan to your URL endpoint."}),"\n",(0,t.jsx)(n.admonition,{title:"For Slack integrations",type:"tip",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["To integrate with Slack, use the ",(0,t.jsx)(n.a,{href:"/semgrep-appsec-platform/slack-notifications",children:"Semgrep Slack app"}),". The webhook setup described in this guide does not work for Slack integrations."]}),"\n"]})}),"\n",(0,t.jsx)(n.p,{children:"Semgrep sends two types of JSON objects:"}),"\n",(0,t.jsxs)("dl",{children:[(0,t.jsxs)("dt",{children:[(0,t.jsx)("code",{children:"semgrep_scan"})," JSON object"]}),(0,t.jsxs)("dd",{children:[" A ",(0,t.jsx)("code",{children:"semgrep_scan"})," object contains information about the CI job and other scan parameters, such as ignored files. Semgrep sends a single ",(0,t.jsx)("code",{children:"semgrep_scan"})," object ",(0,t.jsx)("strong",{children:"every time a scan is run"}),". This includes diff-aware scans, full scans, and scans that have no findings."]}),(0,t.jsxs)("dt",{children:[(0,t.jsx)("code",{children:"semgrep_finding"})," JSON object"]}),(0,t.jsxs)("dd",{children:["A ",(0,t.jsx)("code",{children:"semgrep_finding"})," object is a single record of a new finding. Semgrep sends new ",(0,t.jsx)("code",{children:"semgrep_finding"})," objects based on how you have configured your notifications in Policies. See ",(0,t.jsx)("a",{href:"#set-up-webhooks",children:"Set up webhooks"})," to learn more."]})]}),"\n",(0,t.jsx)(n.h2,{id:"set-up-webhooks",children:"Set up webhooks"}),"\n",(0,t.jsx)(n.p,{children:"Perform these steps in Semgrep AppSec Platform to set up webhooks:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a webhook integration:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["On the navigation menu, click ",(0,t.jsxs)(n.strong,{children:[(0,t.jsx)("i",{class:"fa-solid fa-gear"})," Settings > Integrations > Add"]}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Webhook"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["In the ",(0,t.jsx)(n.strong,{children:"Name"})," field, enter a name for the integration."]}),"\n",(0,t.jsxs)(n.li,{children:["In the ",(0,t.jsx)(n.strong,{children:"Webhook URL"})," field, enter the target webhook URL for the integration."]}),"\n",(0,t.jsxs)(n.li,{children:["Optional: Provide a ",(0,t.jsx)(n.strong,{children:"Signature Secret"}),". The secret must be at least 15 characters long. If you provide a secret, Semgrep sends an ",(0,t.jsx)(n.code,{children:"X-Semgrep-Signature-256"})," signature header with the payload."]}),"\n",(0,t.jsxs)(n.li,{children:["Optional: If you use the ",(0,t.jsx)(n.a,{href:"/semgrep-ci/network-broker",children:"Semgrep Network Broker"}),", and your webhook URL is only accessible from your private network, enable the ",(0,t.jsx)(n.strong,{children:"Use Network Broker"})," toggle."]}),"\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Subscribe"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Turn notifications on:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsxs)(n.strong,{children:["Rules > Policies > ",(0,t.jsx)("i",{class:"fa-solid fa-gear"})," Rule Modes"]}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Click the ",(0,t.jsx)(n.strong,{children:"Edit"})," button of the Rule Mode for which you want to receive webhook notifications. For example, if you want to be notified of all blocking findings through webhooks, click the ",(0,t.jsx)(n.strong,{children:"Edit"})," button of the ",(0,t.jsx)(n.strong,{children:"Block"})," mode."]}),"\n",(0,t.jsx)(n.li,{children:"Repeat the previous step for all Rule Modes that you want to receive notifications for."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"test-webhooks",children:"Test webhooks"}),"\n",(0,t.jsx)(n.p,{children:"To verify that Semgrep can post to your URL:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Navigate to ",(0,t.jsxs)(n.strong,{children:[(0,t.jsx)("i",{class:"fa-solid fa-gear"})," Settings > Integrations"]})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click the ",(0,t.jsx)(n.strong,{children:"Test"})," button of the webhook integration you want to test.\nThe following screenshot displays an example request body of a webhook test:\n",(0,t.jsx)(n.img,{alt:"Successful webhook integration test",src:s(31938).A+"",width:"1460",height:"285"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The following sample code in Python shows how to verify the signature in the ",(0,t.jsx)(n.code,{children:"X-Semgrep-Signature-256"})," header:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"provided_signature = request.headers['X-Semgrep-Signature-256']\n\nsecret = \"this_is_a_secret\"\npayload_str = json.dumps(request.get_json(), separators=(',', ':'))\ncomputed_sig = hmac.new(\n    secret.encode('utf-8'),\n    payload_str.encode('utf-8'),\n    hashlib.sha256\n).hexdigest()\n\nlogger.info(f\"valid signature: {hmac.compare_digest(provided_sig, computed_sig)}\")\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.Ay,{}),"\n",(0,t.jsx)(n.h2,{id:"semgrep-findings-object",children:"Semgrep findings object"}),"\n",(0,t.jsxs)(n.p,{children:["Currently, only Semgrep Code (SAST) findings are sent through webhooks. The ",(0,t.jsx)(n.code,{children:"numeric_id"})," field represents the finding's ID in Semgrep AppSec Platform."]}),"\n",(0,t.jsxs)(n.p,{children:["The following is an example of a ",(0,t.jsx)(n.code,{children:"semgrep_finding"})," object sent by Semgrep:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "semgrep_finding": {\n      "check_id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",\n      "column": 28,\n      "commit_date": "2024-06-11T20:39:36",\n      "commit_url": "https://github.com/owasp/juice-shop/commit/1bb71fff3589e51293e373274092d82c426025d2",\n      "end_column": 159,\n      "end_line": 10,\n      "first_seen_scan_id": "j4an6ro33aJM",\n      "id": "c409ef941eec3008da6e1fd347e793aa",\n      "index": 0,\n      "line": 10,\n      "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",\n      "metadata": {\n        "category": "security",\n        "confidence": "HIGH",\n        "cwe": [\n          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command (\'SQL Injection\')"\n        ],\n        "cwe2021-top25": 1,\n        "cwe2022-top25": 1,\n        "dev.semgrep.actions": [\n          "comment"\n        ],\n        "impact": "HIGH",\n        "interfile": 1,\n        "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",\n        "likelihood": "HIGH",\n        "owasp": [\n          "A01:2017 - Injection",\n          "A03:2021 - Injection"\n        ],\n        "references": [\n          "https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"\n        ],\n        "semgrep.dev": {\n          "rule": {\n            "origin": "community",\n            "r_id": 22085,\n            "rule_id": "yyU0GX",\n            "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",\n            "rv_id": 109973,\n            "url": "https://semgrep.dev/playground/r/3ZTkQwW/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",\n            "version_id": "3ZTkQwW"\n          },\n          "src": "unchanged"\n        },\n        "semgrep.policy": {\n          "id": 61271,\n          "name": "Rule Board - PR Comments column",\n          "slug": "rule-board-pr-comments"\n        },\n        "semgrep.url": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",\n        "shortlink": "https://sg.run/gjoe",\n        "source": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",\n        "subcategory": [\n          "vuln"\n        ],\n        "technology": [\n          "express"\n        ],\n        "vulnerability_class": [\n          "SQL Injection"\n        ]\n      },\n      "numeric_id": 11301071,\n      "path": "data/static/codefixes/unionSqlInjectionChallenge_3.ts",\n      "ref": "refs/heads/master",\n      "repo_name": "owasp/juice-shop",\n      "severity": 2,\n      "start_date": "2023-02-12 00:50:21.552606+00:00"\n    }\n  }\n]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"semgrep-scan-object",children:"Semgrep scan object"}),"\n",(0,t.jsxs)(n.p,{children:["The following is an example of a ",(0,t.jsx)(n.code,{children:"semgrep_scan"})," object sent by Semgrep:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "semgrep_scan": {\n    "deployment_id": 1,\n    "enabled_products": [\n      "sast",\n      "sca",\n      "secrets"\n    ],\n    "exit_code": null,\n    "hashed_id": "Y4QdEwR2qPgK",\n    "id": 27714135,\n    "meta": {\n      "app_block_override": null,\n      "branch": "refs/pull/7/merge",\n      "ci_job_url": "https://github.com/owasp/juice-shop/actions/runs/9999999",\n      "commit": "4166d6fd19ce97e65cf3278ce85afe4f444a7842",\n      "commit_author_image_url": "https://avatars.githubusercontent.com/u/1274037?v=4",\n      "commit_author_email": "support@semgrep.com",\n      "commit_author_name": "Semgrep User",\n      "commit_author_username": "semgrepuser",\n      "commit_timestamp": "2024-06-11T21:25:13",\n      "commit_title": "random code changes",\n      "is_code_scan": 0,\n      "is_full_scan": 0,\n      "is_sca_scan": 0,\n      "is_secrets_scan": 0,\n      "on": "pull_request",\n      "org_id": "1274037",\n      "pull_request_author_username": "semgrepuser",\n      "pull_request_author_image_url": "https://avatars.githubusercontent.com/u/29760937?s=200&v=4",\n      "pull_request_id": "7",\n      "pull_request_title": "random code changes",\n      "renamed_paths": [],\n      "repo_display_name": "owasp/juice-shop",\n      "repo_id": "600593544",\n      "repo_url": "https://github.com/owasp/juice-shop",\n      "repository": "owasp/juice-shop",\n      "scan_environment": "github-actions",\n      "semgrep_version": "1.75.0",\n      "version": "v1"\n    },\n    "repository_id": 158684,\n    "started_at": "2024-06-11T21:26:22.844158+00:00",\n    "completed_at": null,\n    "stats": null,\n    "tenant_name": "default"\n  }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(96540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},31938:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/webhook-successful-test-e73bcc21f098ca04e1c865748ce7410b.png"},36443:(e,n,s)=>{s.d(n,{Ay:()=>a,RM:()=>o});var i=s(74848),t=s(28453);const o=[{value:"Notification and alert de-duplication",id:"notification-and-alert-de-duplication",level:2}];function r(e){const n={a:"a",admonition:"admonition",h2:"h2",p:"p",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"notification-and-alert-de-duplication",children:"Notification and alert de-duplication"}),"\n",(0,i.jsx)(n.p,{children:"Notifications are sent only the first time a given finding is detected."}),"\n",(0,i.jsx)(n.p,{children:"When running a diff-aware scan, Semgrep doesn't notify you when a pull request has a finding that existed on the base branch already,\neven if that line is moved or re-indented."}),"\n",(0,i.jsx)(n.p,{children:"Semgrep also tracks notifications that have already been sent, so subsequent scans of the same changes in a pull request won't result in duplicate notifications."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/semgrep-ci/findings-ci",children:"Findings in CI"})," for more information about how Semgrep tracks a finding through its lifetime."]})})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}}}]);