"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[99198],{58781:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"may-2025","metadata":{"permalink":"/docs/release-notes/may-2025","source":"@site/release-notes/may-2025.md","title":"May 2025","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2025-05-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":5.55,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"may-2025","hide_title":true,"title":"May 2025","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"date":"2025-05-30T10:00"},"unlisted":false,"nextItem":{"title":"April 2025","permalink":"/docs/release-notes/april-2025"}},"content":"\x3c!-- Remember to add previous month\'s under-the-cut behavior --\x3e\\n\x3c!-- Remember to update index page --\x3e\\n\\nThe following updates were made to Semgrep in May 2025.\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- Semgrep AppSec Platform now displays `OWNERS` information in addition to `CODEOWNERS` information on the Finding Details pages. This information is also available through the Semgrep API.\\n- Added the ability to triage a finding directly from **Open** to **Reviewing** on the Finding Details page.\\n- **Jira**: added the ability to map to EPSS categories when creating Jira tickets.\\n\\n### Changed\\n\\n- Semgrep AppSec Platform now displays distinct login and signup pages.\\n- SSO email logins are now case insensitive.\\n- Semgrep in CI output now shows per-product links depending on what Semgrep products are enabled for a scan.\\n\\n### Fixed\\n\\n- Fixed an issue where **Analyze**, **Ignore**, and **Fix** options were available when the finding had previously been marked as **Fixed** or **Removed**.\\n- Fixed an issue where GitHub Enterprise users were incorrectly redirected to GitHub.com repository URLs.\\n- **Jira**: \\n  - Fixed an issue where Semgrep didn\'t handle default Jira values correctly, leading to tickets not being created.\\n  - Fixed an issue where Jira tickets weren\'t being created due to a Semgrep Assistant auto-triage lookup error.\\n- **CLI**:\\n  - Fixed `--help` documentation to reflect that, for `--metrics=\\"auto\\"`, pseudoanonymous metrics are sent when the user is logged in.\\n- Assorted UI fixes, including fixes to incorrect line breaks and typo corrections.\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Fixed\\n\\n- Fixed a bug introduced in Semgrep 1.120.0 causing cross-file analyses to run out of memory due to too many parallel jobs. The default setting had been accidentally set to the number of available CPUs which is often too much in cross-file mode. It\'s now back to `-j1`, which you can override. \\n- **CLI**: Fixed a bug where `--disable-nosem` was not sending findings from `nosem`-annotated lines of code to Semgrep AppSec Platform. `--disable-nosem` now correctly sends findings, if any, from `nosem`-annotated lines, to the Platform.\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n- **Java and Kotlin**: Projects can now be scanned without lockfiles through Semgrep Managed Scans.\\n- Semgrep can now scan `composer.lock` files for the licenses of PHP dependencies. Through this feature, you can configure Semgrep to block or leave a comment on pull requests or merge requests, depending on the license of the dependency that the PR or MR is adding. This feature is enabled by default and runs on full and diff-aware Supply Chain scans.\\n- Policies: Added **No reachability analysis** as a policy condition.\\n- Improved handling of `tsconfig.json` in instances where multiple, separately rooted source directories with their own `tsconfig.json` configurations were previously treated as a single project. These directories are now treated as their own TypeScript project, which should result in better name/module resolution.\\n- Improved handling of `include`,`exclude` and `files` properties in `tsconfig.json`. Projects that use more than one `tsconfig` file in a given directory, which apply to different sets of files under that directory, should see improvements in name/module resolution.\\n- Python: Added support for `uv` package manager.\\n\\n### Changed\\n\\n- Scanning without the need for lockfiles is now in **private beta** for select programming languages.\\n- Improved the Supply Chain UX in various pages:\\n    - If the finding has a function call that proves the finding is reachable, this function call is highlighted in the code in the finding\'s **Details** page.\\n    - Added context in PR comments as to **why** a finding is reachable, under the section **Why this is reachable**. This alerts developers to the impact of a reachable finding. \\n    - Improved how filters are presented in the **Supply Chain > Vulnerabilities** page.\\n    - Unreachable findings are hidden by default from the findings list.\\n- Improved Supply Chain scan output and logging.\\n\\n### Fixed\\n\\n- Semgrep now scans large manifests and lockfiles, which were previously ignored due to Semgrep\'s default file size filtering. This ensures that your lockfiles can be scanned for dependencies and their relationships. This fixes a regression introduced in 1.117.0. \\n- Fixed a bug where Supply Chain reachability rules which match multiple dependencies could produce reachable findings on transitive dependencies even when the actually used direct dependency was not vulnerable.\\n- Various minor fixes to the Supply Chain UI.\\n\\n## \ud83e\udd16 Semgrep Assistant\\n\\n### Added\\n\\n- The Assistant Memories feature is now in **public beta**:\\n  - Managing memories in Semgrep AppSec Platform now occurs under **Rules & Policies**, not **Settings**.\\n  - Semgrep AppSec Platform displays data on the scope and impact of memories, including the number of findings affected and which findings affected\\n  - Assistant now provides **suggested memories**, which are those that Assistant has generated based on your past triage actions. You can view these memories at any time in Semgrep AppSec Platform by navigating to **Rules & Policies > Assistant Memories > Suggested**. For each suggestion, you can choose one of the following actions:\\n    - Activate the suggested memory to inform Assistant\'s future advice.\\n    - Edit the memory, then activate it.\\n    - Delete the memory.\\n- Users now see error messages providing specific reasons why a finding can\'t be analyzed. For example, local scans and scans from projects without code access can\'t be analyzed.\\n\\n### Fixed\\n\\n- Fixed an issue where Assistant\'s suggested fixes weren\'t displaying in Semgrep AppSec Platform.\\n- Fixed an issue where findings displayed the **Agree and ignore** option for Assistant auto-triage feedback, even when **Agree and ignore** wasn\'t a valid option, resulting in errors.\\n\\n## \ud83d\udd10 Semgrep Secrets\\n\\n### Changed\\n\\n- Improved performance of Semgrep Secret scans due to back-end updates.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n\\n### Added\\n\\n- Added the following new documents, articles and sections:\\n  - [Glossary for Semgrep Secrets](https://semgrep.dev/docs/semgrep-secrets/glossary)\\n  - [Scan for generic secrets](/semgrep-secrets/generic-secrets)\\n  - [Supported source code managers](/docs/getting-started/scm-support)\\n- Added the following knowledge base articles:\\n  - [Why do the findings count differ in the API and the Semgrep AppSec Platform UI?](/kb/semgrep-appsec-platform/findings-count-differ-api-platform)\\n- Created dedicated pages for popular programming languages. These pages detail features that Semgrep supports for that language.\\n- Minor additions to various documentation.\\n\\n### Changed\\n\\n- Updated the header and footer to provide more Semgrep learning materials.\\n- Updated instructions on how to add support for a language to Semgrep.\\n- Minor updates to various documentation.\\n\\n\\n### Fixed\\n\\n- Corrected errors in Semgrep CE CI/CD snippets, thank you to [@Nirusu](https://github.com/Nirusu) for the contribution.\\n- Corrected wording issues in [Semgrep for developers > How Semgrep works](/for-developers/detection), thank you to [@timmeinerzhagen](https://github.com/timmeinerzhagen) for the contribution.\\n\\n## \ud83d\udd27 Semgrep Community Edition (CE)\\n\\nThe following versions of Semgrep CE were released in May 2025:\\n\\n* [<i class=\\"fas fa-external-link fa-xs\\"></i>1.121.0](https://github.com/semgrep/semgrep/releases/tag/v1.121.0)\\n* [<i class=\\"fas fa-external-link fa-xs\\"></i>1.122.0](https://github.com/semgrep/semgrep/releases/tag/v1.122.0)\\n* [<i class=\\"fas fa-external-link fa-xs\\"></i>1.123.0](https://github.com/semgrep/semgrep/releases/tag/v1.123.0)"},{"id":"april-2025","metadata":{"permalink":"/docs/release-notes/april-2025","source":"@site/release-notes/april-2025.md","title":"April 2025","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2025-04-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":3.875,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"april-2025","title":"April 2025","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2025-04-30T10:00"},"unlisted":false,"prevItem":{"title":"May 2025","permalink":"/docs/release-notes/may-2025"},"nextItem":{"title":"March 2025","permalink":"/docs/release-notes/march-2025"}},"content":"The following updates were made to Semgrep in April 2025.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- Added the following information in the Semgrep API:\\n  - Rule author information under the `registry_source` field in the Semgrep API. For example, if the source or author of the rule is Semgrep, the value returned is `semgrep`. \x3c!-- 20189 --\x3e\\n  - CWE information.\\n  - OWASP categories.\\n  - Technology values, such as `bash` or `curl`.\\n- Semgrep Managed Scans now run when a pull request or merge request is reopened.\\n  \\n### Changed\\n\\n- Jira labels can now support special characters.\\n\\n### Fixed\\n\\n- Various fixes and improvements to Teams (role-based access control).\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Added\\n\\n- Added a new ruleset to detect **unauthorized** use of AI or LLM libraries, that is, the use of AI without going through security reviews or approval processes. This includes direct API calls, such as `api.openapi.com`, `api.anthropic.com` and libraries in code such as `langchain` and `transformers`. See the [<i class=\\"fas fa-external-link fa-xs\\"></i> Semgrep Shadow AI](https://semgrep.dev/shadowAI) page to learn more.\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n- [SBOM export through the Semgrep API](https://semgrep.dev/api/v1/docs/#tag/SupplyChainService/operation/semgrep_app.products.sca.handlers.sbom.openapi_create_sbom_export) is now generally available.\\n- [Malicious dependency detection](/semgrep-supply-chain/malicious-dependencies) is now in **public beta**. Semgrep enables you to block pull requests (PRs) or merge requests (MRs) introducing these dependencies. You can also filter for malicious dependency findings, which assists in identifying and removing these dependencies.\\n- Added support for PR comments warning users that they may be adding malicious dependencies. \x3c!-- 20447 --\x3e\\n- **Upgrade guidance** and **click to fix** are now in **private beta** for users with Python projects hosted by GitHub.com and with Semgrep Assistant enabled. With upgrade guidance and click to fix, Supply Chain analyzes your project to surface breaking changes that you must fix as part of a version upgrade. Semgrep AppSec Platform provides you with a one-click option that opens a pull request to:\\n    1. Upgrade the dependency to a safe version.\\n    2. Lets the developer know if the upgrade is safe or if there are breaking changes and what those changes are.\\n- **Transitive reachability** is now in **private beta**. For JavaScript projects, Semgrep reachability now extends to transitive dependencies.\\n\\n### Changed\\n\\n- Increased the rate limit for SBOM exports through the Semgrep API.\\n- Improved Supply Chain PR comments by adding separate templates for conditionally reachable and always reachable findings, as well as manual review advice for conditionally reachable findings. \x3c!-- 20446 --\x3e\\n- Improved the user introduction to Supply Chain to focus on reachable findings. \x3c!-- 20290 --\x3e \\n- Improved the **Supply Chain > Details** page. \x3c!-- 20236 --\x3e\\n\\n## \ud83e\udd16 Semgrep Assistant\\n\\n### Added\\n\\n- Semgrep Assistant now attempts to create a memory during triage if possible. If Semgrep creates a memory, you\'ll see a dialog appear, indicating that this has happened, along with a link to the list of your organization\'s memories for review.\\n- Assistant Memories v2 is now in **private beta**:\\n  - Managing memories in Semgrep AppSec Platform now occurs under **Policies**, not **Settings**.\\n  - Semgrep AppSec Platform displays data on the scope and impact of memories, including the number of findings affected and which findings affected\\n  - Assistant now provides **suggested memories**, which are those that Assistant has generated based on your past triage actions. You can view these memories at any time in Semgrep AppSec Platform by navigating to **Rules & Policies > Assistant Memories > Suggested**. For each suggestion, you can choose one of the following actions:\\n    - Activate the suggested memory to inform Assistant\'s future advice.\\n    - Edit the memory, then activate it.\\n    - Delete the memory.\\n\\n## \ud83d\udd10 Semgrep Secrets\\n\\n### Fixed\\n\\n- Fixed an issue where Semgrep AppSec Platform didn\'t display the correct number of Secrets findings in the navigation bar.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Semgrep release notes are now available through RSS. You can subscribe to the:\\n  - [<i class=\\"fa-solid fa-rss\\"></i> Semgrep release notes feed](https://semgrep.dev/docs/release-notes/rss.xml).\\n  - [<i class=\\"fa-solid fa-rss\\"></i> Semgrep product updates feed](https://semgrep.dev/products/product-updates/rss/).\\n- Added information about:\\n  - Semgrep Assistant\'s model providers.\\n  - Code security measures for managed scans.\\n  - Supported languages for `metavariable-type` rules operator\\n  - `metavariable-name` operator.\\n\\n### Changed\\n\\n- Minor updates to the Supported Languages documentation.\\n- Minor fixes to the following product features:\\n  - Assistant auto-triage.\\n  - Dataflow analysis in Semgrep AppSec Platform.\\n  - Managed scans for Azure DevOps projects.\\n  - `.semgrepignore`.\\n\\n### Fixed\\n\\n- Minor typo fixes and UI updates.\\n\\n## \ud83d\udd27 OSS Engine\\n\\nThe following versions of the OSS Engine were released in April 2025:\\n\\n* [<i class=\\"fas fa-external-link fa-xs\\"></i>1.117.0](https://github.com/semgrep/semgrep/releases/tag/v1.117.0)\\n* [<i class=\\"fas fa-external-link fa-xs\\"></i>1.118.0](https://github.com/semgrep/semgrep/releases/tag/v1.118.0)\\n* [<i class=\\"fas fa-external-link fa-xs\\"></i>1.119.0](https://github.com/semgrep/semgrep/releases/tag/v1.119.0)\\n* [<i class=\\"fas fa-external-link fa-xs\\"></i>1.120.0](https://github.com/semgrep/semgrep/releases/tag/v1.120.0)"},{"id":"march-2025","metadata":{"permalink":"/docs/release-notes/march-2025","source":"@site/release-notes/march-2025.md","title":"March 2025","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2025-03-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":3.78,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"march-2025","title":"March 2025","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2025-03-30T10:00"},"unlisted":false,"prevItem":{"title":"April 2025","permalink":"/docs/release-notes/april-2025"},"nextItem":{"title":"February 2025","permalink":"/docs/release-notes/february-2025"}},"content":"The following updates were made to Semgrep in March 2025.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- Added the capability to delete projects through the Semgrep API. Deleting a project also deletes all of its findings. Refer to the [<i class=\\"fas fa-external-link fa-xs\\"></i> API documentation](https://semgrep.dev/api/v1/docs/#tag/Project/operation/semgrep_app.saas.handlers.repository.openapi_delete_project).\\n- You can now view the `cwe_names` and `owasp_names` for findings fetched through the Semgrep API. See the [<i class=\\"fas fa-external-link fa-xs\\"></i> API documentation](https://semgrep.dev/api/v1/docs/#tag/Finding/operation/semgrep_app.core_exp.findings.handlers.issue.openapi_list_recent_issues).\\n- Added `external_discussion_id` and `external_note_id` to findings returned by the Semgrep API. Use these fields to build links, put together dashboards, or other functionalities.\\n- Various performance enhancements around full scans performed by Semgrep Managed Scans.\\n- **Teams**: Members are able to view the **Project details** page. This enables them to view the scan logs for diff-aware scans. \x3c!-- FS1564 --\x3e\\n- Added a warning notification when you disable **all** rules. Disabling all rules means no findings will be detected in subsequent scans. \x3c!-- This is true for Code and Secrets, so broadly including it in AppSec Platform --\x3e\\n- Added a tooltip explaining the reason for why checkboxes for certain findings cannot be selected. Typically this is because the finding has been fixed.\\n![Tooltip for findings in off state](/img/tooltip-disabled-finding.png#sm-width)\\n- Added a **Use Network Broker** toggle <i class=\\"fa-solid fa-toggle-large-on\\"></i> within the webhook integration dialog. This enables you to control access to the network broker on a per-webhook basis.\\n- Dataflow traces now provide cross-file code snippets, centralizing context from several files into the dataflow graph. \x3c!-- SEC-1534 --\x3e\\n- The **Finding details** page now has a new triage button with options to ignore, fix, and reopen findings.\\n- Added [<i class=\\"fas fa-external-link fa-xs\\"></i> `llms.txt`](https://semgrep.dev/llms.txt).\\n- Added an [integration with Wiz](/semgrep-appsec-platform/wiz) that enables you to view Semgrep Code findings in Wiz\'s Security Graph.\\n- Added the ability to [define the files and folders Semgrep ignores](/ignoring-files-folders-code#define-files-and-folders-for-all-projects-of-an-organization) during scans at the organization level.\\n\\n### Changed\\n\\n- When findings are specifically ignored through a `nosemgrep` comment, Semgrep now informs the user why. Previously, there was no context provided when ignoring through a comment.  \x3c!-- SEC2877 --\x3e\\n- Improved pagination performance.\\n- Improved performance when fetching data for large teams.\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n- Updates in Semgrep AppSec Platform regarding findings and rules also apply to Semgrep Code.\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n- Added the ability to use transitivity and EPSS score as conditions when creating block and comment policies for Supply Chain.\\n- Added [dependency path support](/semgrep-supply-chain/dependency-search#dependency-paths-beta) for the following Python package managers: `pip`, `pip-tools`, and `pipenv`.\\n- Added the ability to [download SBOM exports using the Semgrep API](https://semgrep.dev/api/v1/ui/#/Beta/semgrep_app.products.sca.handlers.sbom.openapi_create_sbom_export).\\n\\n### Fixed\\n\\n- Improved how Semgrep handles policies when projects or tags associated with the policy have been deleted. Semgrep now displays a warning when all projects or tags associated with a policy have been deleted:\\n![Warning message when projects or tags in a policy have been deleted](/img/policy-zero-project-state.png)\\n\\n## \ud83e\udd16 Semgrep Assistant \\n\\n### Added\\n\\n- **Auto-memories**: If you triage a finding as **Ignored** and provide an explanation of why you change the finding\'s status to **Ignored**, Assistant automatically determines if it should [create a memory](/semgrep-assistant/customize#add-memory-during-triage) for you. Assistant uses memories to tailor its remediation guidance for your projects.\\n- Added the ability to select multiple AI providers.\\n\\n## \ud83d\udd10 Semgrep Secrets\\n\\n### Fixed\\n\\n- Fixed the JSON produced by the `--gitlab-secrets` flag so that it is parsed correctly by GitLab.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n- Added new documents, articles and sections on the following topics:\\n  - Global path ignores: Applying path ignores to all projects in an organization\\n- Minor additions include:\\n  - Semgrep Assistant features permitted based on roles\\n  - Semgrep Managed Scans: Bitbucket support\\n- Added CVE-2025-29783 to trophy case.\\n\\n### Changed\\n\\n- The **Supported languages > Semgrep Supply Chain** section has been reorganized for clarity. Product features and supported package managers have been separated into discrete tables.\\n- Expanded on PR comments in Semgrep Secrets, particularly validation state policies.\\n- Documentation about Semgrep Supply Chain\'s ignore behavior has been updated.\\n- Clarified various procedures regarding:\\n  - How to remove a Slack integration\\n  - How triage behaves across different refs or branches\\n- Various redirects have been updated.\\n\\n### Fixed\\n\\n- Various section links have been fixed.\\n- Minor acronym and product terminology fixes.\\n\\n## \ud83d\udd27 Semgrep Community Edition (CE)\\n\\n* The following versions of Semgrep CE were released in March 2025:\\n\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>v1.111.0](https://github.com/semgrep/semgrep/releases/tag/v1.111.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>v1.112.0](https://github.com/semgrep/semgrep/releases/tag/v1.112.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>v1.113.0](https://github.com/semgrep/semgrep/releases/tag/v1.113.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>v1.114.0](https://github.com/semgrep/semgrep/releases/tag/v1.114.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>v1.116.0](https://github.com/semgrep/semgrep/releases/tag/v1.116.0)"},{"id":"february-2025","metadata":{"permalink":"/docs/release-notes/february-2025","source":"@site/release-notes/february-2025.md","title":"February 2025","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2025-02-28T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.615,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"February 2025","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","slug":"february-2025","hide_table_of_contents":false,"tags":["Release notes"],"date":"2025-02-28T10:00"},"unlisted":false,"prevItem":{"title":"March 2025","permalink":"/docs/release-notes/march-2025"},"nextItem":{"title":"January 2025","permalink":"/docs/release-notes/january-2025"}},"content":"The following updates were made to Semgrep in February 2025.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n### Added\\n\\n- Semgrep Managed Scans for repositories hosted by **Bitbucket Cloud** is now in public beta.\\n- You can now manage your projects\' enrollment in Semgrep Managed Scans through the Semgrep API\'s `/project` and `/project/managed-scan` endpoints.\\n- A new **My teams** view for managers is now in private beta. To join this beta, reach out to [<i class=\\"fa-regular fa-envelope\\"></i> support@semgrep.com](mailto:support@semgrep.com). This view enables managers to view all the teams they are a manager of.\\n\\n### Changed\\n\\n- The Semgrep AppSec Platform-specific metadata fields `semgrep.dev:` and `semgrep.policy:` are now filtered from the JSON output if you aren\'t signed into your Semgrep account. See [Semgrep JSON and SARIF fields](https://semgrep.dev/docs/semgrep-appsec-platform/json-and-sarif#json) for more information.\\n- The Semgrep Docker image has been updated to use Python 3.12 and OCaml 5.2.1.\\n- **CLI**: The output generated from running `semgrep ci --help` no longer includes information about experimental features and flags.\\n- **Jira**: Jira tickets for Supply Chain findings now display recommended versions of packages in the description.\\n\\n### Fixed\\n\\n- Fixed an issue in Semgrep Editor\'s Structure Mode where some of the larger language icons overlapped due to limited space.\\n- Fixed an issue where the instruction links for adding a CI job all lead to GitHub-specific instructions.\\n- Fixed an issue where the Median Open Age chart didn\'t display all relevant findings.\\n- Fixed an issue where Semgrep scans did not complete if there were failures involving `git worktree remove`; instead of erring out, Semgrep completes the scan but logs the error.\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Added\\n\\n- Added support for **Critical** severity level to denote the highest severity level for a Code finding. You can now filter by Critical severity level in Semgrep AppSec Platform, and you can filter for and identify rules that generate critical severity findings in the Semgrep Registry. \x3c!-- Copied this over from Secrets since these two notes are almost identical. --\x3e\\n  - Semgrep Pro rules, which are included in `p/default`, have been updated to use this new severity level.\\n- New rules for JavaScript and TypeScript have been added to Semgrep\'s default ruleset, `p/default`. The new rules cover the OWASP Top 10 and the most popular server-side frameworks, like Express, NestJS, Hapi, and Koa.\\n- Cross-file (interfile) analysis now processes JavaScript and TypeScript files together, so that dataflow can be tracked across both languages.\\n\\n### Changed\\n\\n- Improved detection for JavaScript and TypeScript dependency injection, import resolution, and dataflow through callbacks.\\n- Upgrade from OCaml 4.14.0 to OCaml 5.2.1 for Semgrep PyPI and Homebrew distributions. Note that Docker images have been built with OCaml 5.2.1 since Semgrep 1.107.0.\\n\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n- You can now [configure policies](/semgrep-supply-chain/policies) for Supply Chain findings. These policies let you set certain conditions by which developers are notified of findings through a PR or MR comment, or potentially blocked from merging a PR or MR.\\n    - For example, you can create a policy to block a PR or MR from merging when a reachable finding with an available fix (upgrade) is detected.\\n    - Policies can have different scopes, which are the projects or project tags the policies are applied to.\\n- Updated `Package.swift` parser to support the following:\\n  - The URL value in a `.package` entry doesn\'t have to end with `.git`\\n  - You can have an exact field that looks like `exact: \\"1.0.0\\"` instead of `.exact(\\"1.0.0\\")`\\n  - The exact version can be an object like `Version(1,2,3)` instead of a string\\n  - You can have `.package` values with no URL, like this: `.package(name: \\"package\\", path: \\"foo/bar\\")`\\n- Semgrep can now dynamically resolve dependencies for Python projects using pip, allowing it to determine transitive dependencies automatically. \\n- Various parser updates for SwiftPM and Yarn.\\n\\n## \ud83e\udd16 Semgrep Assistant\\n\\n### Added\\n\\n- Semgrep Assistant is now available for users with repositories hosted by Bitbucket Cloud and Azure DevOps.\\n\\n### Changed\\n\\n- Extended the amount of time you see the error message shown if Assistant can\'t parse or save a memory you provide. This error message includes a link to edit the memory.\\n\\n### Fixed\\n\\n- Fixed an issue with the Assistant Analyze button on Semgrep Code\'s Findings page hiding after analysis.\\n- Fixed an issue where remediation guidance included secret key values if present in the source code.\\n\\n## \ud83d\udd10 Semgrep Secrets\\n\\n### Added\\n\\n- Added support for **Critical** severity level to denote the highest severity level for a Secrets finding. You can now filter by Critical severity level in Semgrep AppSec Platform, and you can filter for and identify rules that generate critical severity findings in the Semgrep Registry.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Added the following new documents, articles, and sections:\\n    - [View Semgrep findings in Wiz\'s Security Graph](/semgrep-appsec-platform/wiz).\\n    - [JavaScript frameworks and analyses](/languages/javascript).\\n    - [Triage findings through PR comments with repositories hosted by Azure DevOps and Bitbucket Cloud](/semgrep-code/triage-remediation#triage-findings-through-pr-and-mr-comments).\\n\\n### Changed\\n\\n- Major updates to the following documents and sections:\\n    - [Add support for a new language](/contributing/adding-a-language).\\n    - [Semgrep Registry](/semgrep-code/glossary#registry-semgrep-registry) and [Semgrep FAQ](/faq/overview).\\n    - [Semgrep Supply Chain Policies](/semgrep-supply-chain/policies).\\n- Minor clarifications involving:\\n  - Network Broker usage.\\n  - Required scopes for Managed Scans of Azure DevOps repositories.\\n  - Semgrep\'s Jira integration.\\n  - Supported languages.\\n- Reorganization of Semgrep Assistant documentation.\\n\\n## \ud83d\udd27 OSS Engine\\n\\n* The following versions of the OSS Engine were released in February 2025:\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>v1.107.0](https://github.com/semgrep/semgrep/releases/tag/v1.107.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>v1.108.0](https://github.com/semgrep/semgrep/releases/tag/v1.108.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>v1.109.0](https://github.com/semgrep/semgrep/releases/tag/v1.109.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>v1.110.0](https://github.com/semgrep/semgrep/releases/tag/v1.110.0)\\n\x3c!-- truncate --\x3e"},{"id":"january-2025","metadata":{"permalink":"/docs/release-notes/january-2025","source":"@site/release-notes/january-2025.md","title":"January 2025","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2025-01-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":5.18,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"january-2025","title":"January 2025","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","tags":["Release notes"],"date":"2025-01-30T10:00"},"unlisted":false,"prevItem":{"title":"February 2025","permalink":"/docs/release-notes/february-2025"},"nextItem":{"title":"December 2024","permalink":"/docs/release-notes/december-2024"}},"content":"The following updates were made to Semgrep in January 2025.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n- The **Policy Management API** is now generally available. The Policy Management API allows you to automate tasks such as:\\n  - Add, update, and disable rules across multiple policies.\\n  - Apply rules in different modes, such as monitor, comment, block, or disable, to align with security workflows.\\n  - Integrate policy management into CI/CD pipelines to ensure consistent enforcement during software development.\\n- **Semgrep Managed Scans:**\\n  - Managed scans for repositories hosted by **Azure DevOps** is now in public beta.\\n  - GitHub users can turn on or off full scans and diff-aware scans for individual projects scanned by Semgrep Managed Scans.\\n- **Jira:** added the ability to map the **Team** information back to Semgrep.  \\n- Org admins can now invite new users to Semgrep by email. Invited users receive an email with instructions on how to join the organization\'s Semgrep account.\\n- Added pagination to the **Settings > Access > Members** page, as well as the ability to search for members.\\n\\n## Changed\\n\\n- The **search bar** in the **Projects** page now loads faster.  \x3c!-- 18697 --\x3e\\n- Links to the **Project Settings** and **Scans** pages now use project IDs instead of project names. Existing links using project names continue to function normally.\\n\\n## Fixed\\n\\n- Fixed an issue where commands not prefixed with `/semgrep` or `/` weren\'t correctly handled.\\n- Fixed an issue where reports generated by Semgrep AppSec Platform weren\'t correctly displaying the age of findings.\\n- Fixed an issue where the first page of Bitbucket Data Center repositories wasn\'t displayed.\\n- Fixed the formatting of Bitbucket Cloud PR comments.\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Added\\n\\n- Added support for lambdas (anonymous functions) as callbacks. This is supported for all languages that have lambdas.\\n  ```javascript\\n    var tainted = source();\\n\\n    function withCallback1(val, callback) {\\n        if (val) {\\n            callback(val);\\n      }\\n    }\\n\\n    withCallback1(tainted, function (val) {\\n        sink(val); // finding !\\n    });\\n  ```\\n\\n### Changed\\n\\n- Removed **pip** from the Semgrep Docker image. If necessary, you can install it by running `apk add py3-pip`.\\n\\n### Fixed\\n\\n- The `semgrep test` and `semgrep validate` commands have been correctly documented as **EXPERIMENTAL** in `semgrep --help`.\\n  - Those commands are not GA. It is recommended to use the `semgrep scan --test` and `semgrep scan --validate`.\\n- Improve error handling for capabilities ancillary to a scan, such as looking for `nosemgrep` comments and rendering autofixes, to reduce the likelihood of an unexpected error in such a component causing the scan to error.\\n- Fix the behavior of Semgrep when running into broken symlinks. If such a path is passed explicitly as a scan root on the command line, it results in an error. Otherwise, if it\'s a file discovered while scanning the file system, it\'s a warning.\\n- Fixed an issue with crashes due to an exception in `lines_of_file`. The code should now be more robust and not stop the whole scan when an out-of-bound line access happens during `nosemgrep` analysis or when displaying the lines of a match.\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n\x3c!-- Dependency graphs? --\x3e\\n- [Dependency Paths](/semgrep-supply-chain/dependency-search#view-the-dependency-path) are now available in **public beta** for the following languages and package managers:\\n  - **JavaScript**: npm, pnpm, and yarn are supported.\\n  - **Python**: Only Poetry is supported.\\n  Reach out to [Semgrep Support](/docs/support) to join the beta program.\\n- **C#**: Semgrep can now scan NuGet codebases without the need for a lockfile. This feature is in **private beta**. See also [Scan a project without lockfiles](/semgrep-supply-chain/getting-started#scan-a-project-without-lockfiles-beta). Reach out to [<i class=\\"fa-regular fa-envelope\\"></i> support@semgrep.com](mailto:support@semgrep.com) to join the beta program.\\n- Semgrep now ingests CVE information from [<i class=\\"fas fa-external-link fa-xs\\"></i> Electron release notes](https://releases.electronjs.org/releases/stable). This information is used to generate rules that can detect if you\'re affected by CVEs from this source.\\n\\n### Changed\\n\\n- Semgrep Supply Chain [Policies](/semgrep-supply-chain/policies) are now in public beta. Creating a policy enables you to:\\n  - Customize when Semgrep sends a finding as a PR or MR comment or fails the CI job.\\n  - Customize the projects and conditions that send a comment or fail a CI job.\\n\\n### Fixed\\n\\n- Fixed bug where Supply Chain diff-aware scans of `package-lock.json` v2 projects incorrectly produced non-new findings.\\n\\n## \ud83e\udd16 Semgrep Assistant \\n\\n### Added\\n\\n- **Noise filtering** is now in public beta. With Noise Filtering, Assistant evaluates each Semgrep Code finding to determine if it\'s a true positive using additional context and prevents a PR comment from being posted in the developer workflow if it\'s not.\\n- **Auto-triage Memories** is now in public beta. With this feature, you can identify findings that are safe to ignore and write triage notes indicating why this is so. Assistant then stores this information as a memory and uses it to assess whether similar findings are shown to developers in the future. Assistant also takes that memory, reanalyzes similar findings in your backlog, and suggests issues that may be safe to close.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added \\n- Added the following new documents, articles, and sections:\\n  - Set up [Semgrep Managed Scans with Azure DevOps](/deployment/managed-scanning/azure).\\n  - [Semgrep for developers](/for-developers/overview), a new series of documents that aims to:\\n    - Help AppSec engineers educate developers about Semgrep and secure coding.\\n    - Inform developers of how to resolve Semgrep findings in various environments, such as their pull requests or merge requests.\\n  - [Semgrep Assistant metrics](/semgrep-assistant/metrics), which explains how Assistant\'s metrics and benchmarks are analyzed.\\n  - [SAML single-sign on with Google Workspace](/kb/semgrep-appsec-platform/saml-google-workspace).\\n  - [Reference for Semgrepignore v2](/semgrepignore-v2-reference).\\n  - [Customize semgrep in `pre-commit`](/kb/integrations/customize-semgrep-precommit).\\n- Minor additions and updates:\\n  - Added instructions to remove projects scanned with Semgrep Managed Scans.\\n- Major updates have been made to the following documentation:\\n  - [Supported languages](/supported-languages) now provides a summary table for both Code and Supply Chain features for each language.\\n- Thanks to [savq](https://github.com/savq) for their improvements to Semgrep\'s contributing documentation.\\n\\n### Changed\\n\\n- Clarified language around manifest files and lockfiles.\\n- Updated Semgrep rules licensing documentation.\\n\\n### Removed\\n\\n- Removed references to the asdf-semgrep plugin.\\n\\n## \ud83d\udd27 Semgrep Community Edition (CE)\\n\\n* The following versions of Semgrep CE were released in January 2025:\\n\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.102.0](https://github.com/semgrep/semgrep/releases/tag/v1.102.0) \\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.103.0](https://github.com/semgrep/semgrep/releases/tag/v1.103.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.104.0](https://github.com/semgrep/semgrep/releases/tag/v1.104.0)"},{"id":"december-2024","metadata":{"permalink":"/docs/release-notes/december-2024","source":"@site/release-notes/december-2024.md","title":"December 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-12-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.95,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"december-2024","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"December 2024","tags":["Release notes"],"date":"2024-12-30T10:00"},"unlisted":false,"prevItem":{"title":"January 2025","permalink":"/docs/release-notes/january-2025"},"nextItem":{"title":"November 2024","permalink":"/docs/release-notes/november-2024"}},"content":"The following updates were made to Semgrep in December 2024.\\n\\n:::info Important changes\\n- The Semgrep CLI tool requires a minimum version of **Python 3.9** as of Semgrep 1.100.0.\\n- Semgrep OSS is now **Semgrep Community Edition (CE)**. Read the [Semgrep CE section](#-semgrep-community-edition-ce) for more details.\\n:::\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- **Policy management API** is now in private beta. This API enables you to add, update, and turn off rules for selected policies in your chosen mode.\\n- You can now export your findings in CSV format. Semgrep can export up to 10,000 most recent findings. For findings greater than 10,000, use the [<i class=\\"fas fa-external-link fa-xs\\"></i> API](https://semgrep.dev/api/v1/docs/). See [Export findings](/semgrep-code/findings#export-findings) for more information.\\n  ![The download findings CSV button](/img/download-csv.png#md-width)\\n  _**Figure**. The download findings CSV button._\\n- Semgrep now tracks individual fields or keys in record or dict expressions. For example:\\n  ```python\\n  def foo():\\n      return { 0: \\"safe\\", 1: taint }\\n  \\n  def test():\\n      t = foo()\\n      sink(t[0]) # safe; this is not a finding\\n      sink(t[1]) # this produces a finding\\n  ```\\n- **TypeScript**: Semgrep now supports ellipses in function parameters. For\\nexample, the following code is TypeScript, as opposed to pure JavaScript, because it uses decorators on function parameters:\\n  ```typescript\\n  foo(x, @Bar() y, z): string { return \'\'; }\\n  ```\\n  - You can match this method using the following pattern:\\n  ```typescript\\n  function $FN(..., @Bar(...) $X, ...) { ... }\\n  ```\\n- C#: Patterns such as new `$T(...)` now matches C# target-typed new expressions such as `new ()`.\\n\\n### Changed\\n\\n- **Semgrep Managed Scans**: Cloning repositories is now faster. This improves the speed of the overall scan.\\n- **Reporting**: In cases where there were **no new findings** for the selected time period, the **Guardrails adoption** chart displayed 0% adoption, which was incorrect because there was nothing to adopt as there were no new findings. To better display that there is no data on adoption, the reporting page now displays blocks of grey for periods where there are no findings.\\n\\n### Removed\\n\\n- Removed the `use-osemgrep-sarif` flag.\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Added\\n\\n- Added new **Pro rules**:\\n  - 4 new rules for **Express.js** that cover SQL injection, object injection, and misconfiguration vulnerabilities.\\n  - 13 new rules for **NestJS** framework vulnerabilities that cover code injection, SQL injection, path traversal, log injection, XML external entity, and cross site scripting.\\n\\n### Fixed\\n\\n\x3c!-- vale off --\x3e\\n- Fixed the date format used in `--gitlab-sast` option to match the specification and not use RFC 3339. Thanks to Elias Haeussler for the fix.\\n- Fixed what is considered a sink when a sink formula matches a lambda expression: it is the lambda itself that is the sink, not the individual statements in the lambda.\\n\x3c!-- vale on --\x3e\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n- Semgrep now supports reachability for **Swift**. For CLI users, ensure that you are using Semgrep **1.98.0 or higher**. Swift is the tenth language Semgrep supports with reachability analysis.\\n  - Added support for SwiftPM `Package.resolved` version 3.\\n- **Dependency Path**, which displays how transitive dependencies are imported into your code, is now in public beta for Java Gradle and Maven package managers.\\n  - Dependency Path for Kotlin is in private beta.\\n  - To join this beta, contact [<i class=\\"fa-regular fa-envelope\\"></i> support@semgrep.com](mailto:support@semgrep.com).\\n- Semgrep can now scan your Java Gradle and Maven codebases without the need for a lockfile. This feature is in public beta for Java and private beta for Kotlin Gradle and Maven. See also [Scan a project without lockfiles](/semgrep-supply-chain/getting-started#scan-a-project-without-lockfiles-beta).\\n  - To participate in this beta, contact [<i class=\\"fa-regular fa-envelope\\"></i> support@semgrep.com](mailto:support@semgrep.com).\\n  - Semgrep now provides the flag `--allow-local-builds`, which is used to enable this feature.\\n\\n### Changed\\n\\n- Improved `pnpm-lock.yaml` parsing.\\n\\n## \ud83e\udd16 Semgrep Assistant \\n\\n### Changed\\n\\n- Semgrep Assistant is in the process of integrating its remediation guidelines into a single PR or MR comment. This means that you receive only one comment per finding, not including summary comments.\\n  - Previously, Semgrep Assistant would add an additional, separate comment on the thread after the first comment from Semgrep. With this change, **all Semgrep guidance** is in one comment for clarity.\\n  - This change is rolling out over the course of several weeks.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Added the following new documents, articles and sections:\\n  - [JSON and SARIF reference](/semgrep-appsec-platform/json-and-sarif) provides you with a list of fields supported by Semgrep CE and Semgrep AppSec Platform.\\n  - [Full and diff-aware scans with GitHub and Jenkins](/kb/semgrep-ci/jenkins-diff-scans) helps you set up and troubleshoot Semgrep.\\n  - The [Semgrep Supply Chain > Dependency graphs](/semgrep-supply-chain/dependency-search#dependency-paths-beta) section provides instructions on how to enable the feature.\\n  - Instructions on [scanning a project without lockfiles](/semgrep-supply-chain/getting-started#scan-a-project-without-lockfiles-beta) in Semgrep Supply Chain. \\n\\n### Changed\\n\\n- Updated Quickstart links to point users to the most common methods of setting up Semgrep.\\n- Updated language support details in [Supported languages > Semgrep Supply Chain](/supported-languages#semgrep-supply-chain).\\n- **Extract mode** has been moved to the [Deprecated experiments](/writing-rules/experiments/deprecated-experiments) page.\\n- Updated Semgrep Secrets triage documentation to include new ticketing integrations and triage states.\\n- Renamed instances of Semgrep OSS to Semgrep CE, except for instances within release notes.\\n\\n## \ud83d\udd27 Semgrep Community Edition (CE)\\n\\n- Semgrep OSS has been renamed to **Semgrep Community Edition (CE)**. Semgrep CE remains free, with 2800+ rules and no login required. See also [<i class=\\"fas fa-external-link fa-xs\\"></i> Important updates to Semgrep OSS](https://semgrep.dev/blog/2024/important-updates-to-semgrep-oss/) in the Semgrep blog.\\n- Rules authored and maintained by Semgrep, Inc. are now licensed under [<i class=\\"fas fa-external-link fa-xs\\"></i> Semgrep Rules License v.1.0](https://semgrep.dev/legal/rules-license/). These rules are available only for internal, non-competing, and non-Software-as-a-Service (SaaS) contexts.\\n- As of Semgrep 1.100.0, certain JSON and SARIF export fields are available only for logged-in users. See the [JSON and SARIF reference](/semgrep-appsec-platform/json-and-sarif) for the list of fields.\\n- The following versions of Semgrep CE were released in December 2024:\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.98.0](https://github.com/semgrep/semgrep/releases/tag/v1.98.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.99.0](https://github.com/semgrep/semgrep/releases/tag/v1.99.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.100.0](https://github.com/semgrep/semgrep/releases/tag/v1.100.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.101.0](https://github.com/semgrep/semgrep/releases/tag/v1.101.0)"},{"id":"november-2024","metadata":{"permalink":"/docs/release-notes/november-2024","source":"@site/release-notes/november-2024.md","title":"November 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-11-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.975,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"november-2024","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"November 2024","tags":["Release notes"],"date":"2024-11-30T10:00"},"unlisted":false,"prevItem":{"title":"December 2024","permalink":"/docs/release-notes/december-2024"},"nextItem":{"title":"October 2024","permalink":"/docs/release-notes/october-2024"}},"content":"The following updates were made to Semgrep in November 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- Added the ability to filter all findings by **Last fixed** and **Last triaged** dates in Semgrep AppSec Platform.\\n  ![Time period and status filters](/img/findings-filters.png#sm-width)\\n  _**Figure**. Time period and status filters._\\n- **Dashboard**:\\n  - You can now view **trends**, comparing the previous time period to the current one, in the following charts:\\n    - Production backlog\\n    - Secure guardrails\\n    - Median open finding age\\n  - You can now export the Dashboard as a PDF. Sign in to [<i class=\\"fas fa-external-link fa-xs\\"></i> Semgrep AppSec Platform](https://semgrep.dev/login), then click **Dashboard > Download > Download as PDF (report)**.\\n\\n\x3c!--  NOT AVAILABLE\\n  - You can now view findings **Filtered by Assistant** under the **Guardrails activity** chart These are findings that Assistant did not display to developers, to prevent noise from findings it thinks are false positives. --\x3e\\n\\n\\n### Changed\\n\\n- **API**: The `GET /deployments/DEPLOYMENT_ID/policies` endpoint now displays all policies for a given deployment for all Semgrep products.\\n- **Teams**: You can now change roles in bulk:\\n  1. Click **Settings > Teams**, then the **name of the team** you want to edit.\\n  1. Select the target users, then click **Bulk Edit**.\\n  1. In the drop-down box, select the new role for those users. \x3c!-- 17549 --\x3e\\n\\n\\n### Fixed\\n\\n- Various improvements and fixes to Semgrep Managed Scans (SMS).\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Added\\n\\n- **C**: Semgrep cross-file analysis now handles duplicate function names properly. When Semgrep finds duplicate functions, it assumes that any of them could be called. For example, if the function `foo` is defined in two files, Semgrep reports taint errors for both instances:\\n    ```c\\n    // \\"a/test.h\\"\\n    void foo(int x) {\\n        //deepruleid: dup-symbols\\n        sink(x);\\n    }\\n\\n    // \\"b/test.h\\"\\n    void foo(int x) {\\n        //deepruleid: dup-symbols\\n        sink(x);\\n    }\\n\\n    // \\"main.c\\"\\n    #ifdef HEADER_A\\n        #include \\"a/test.h\\"\\n    #else\\n        #include \\"b/test.h\\"\\n    #endif\\n\\n    int main() {\\n        int x = source();\\n        foo(x);\\n    }\\n    ```\\n- **JavaScript and TypeScript**:\\n  - Added Pro rules for JavaScript and TypeScript, including:\\n    - Code injection rules for the `vm`, `vm2`, and puppeteer libraries\\n    - NoSQL injection rules for `mongodb` and `mongoose` libraries\\n    - SQL injection rules for the `knex`, `mysql`, `pg`, `sequelize`, and `sqlite` libraries\\n    - Path traversal rules for `fs` and `fs-extra`\\n  - Improved existing rules to have more precise sources and sinks.\\n  - Improved JavaScript and TypeScript imports resolution.\\n  - Added support for JavaScript callbacks.\\n\\n### Changed\\n\\n- The **Findings** page\'s **Projects and branches** filter now pins selected options to the top of the list for easy reference.\\n- Cross-file analysis now resolves method invocations on abstract classes, enhancing dataflow tracking accuracy for dynamic method invocations.\\n- Improved memory usage and time for scans with many findings due to reduced memory allocations by Semgrep while processing `nosemgrep` comments.\\n- **TypeScript**: improved logic for interfile analysis for projects using [project references](https://www.typescriptlang.org/docs/handbook/project-references.html).\\n\\n### Fixed\\n\\n- Cross-file taint analysis has been optimized to scale better when there are many matched sources, propagators, sanitizers, and sinks within a function.\\n- Semgrep now scans files containing special characters, as determined by Git, correctly instead of ignoring them. \\n- Semgrep no longer freezes when running on a machine with a low memory limit with tracking enabled.\\n- Fixed an issue with regex parsing during ReDoS analysis when Semgrep encountered a character class starting with `[:`, such as `[:a-z]`.\\n- Fixed an issue with `semgrep scan` where anchored `semgrepignore` patterns for folders such as `/tests` weren\'t honored. Previously, these patterns didn\'t affect target file filtering.\\n- Fixed an issue where exceptions thrown during target processing caused the scan to fail. The scan now returns exit code `0` instead of `2`, unless the scan was invoked with the `--strict` flag.\\n- Fixed an issue where input containing multiple unclosed braces on the same line resulted in exponential parsing time, causing the scan to time out.\\n- Improved error handling for networking errors.\\n- Fixed an issue where autofix and `nosemgrep` didn\'t work in Semgrep Editor.\\n- **Swift**: Ellipses and metavariable ellipses can now be used as function parameters in patterns.\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n- Supply Chain now provides reachability analysis for **Scala** and **Swift**.\\n\\n### Changed\\n\\n- Parsers for `poetry.lock` and `pyproject.toml` now handle multi-line strings.\\n\\n### Fixed\\n\\n- Fixed an issue where the Gradle parser failed to parse the lockfile if it didn\'t start with a specific block comment. Semgrep now ignores the comment, allowing any or no comment to exist.\\n\\n## \ud83e\udd16 Semgrep Assistant\\n\\n### Added\\n\\n- Added Assistant-generated component tags for Semgrep Supply Chain and Semgrep Secrets findings.\\n- Added support for Google Gemini.\\n\\n## \ud83d\udd10 Semgrep Secrets\\n\\n### Added\\n\\n- Added the ability to validate temporary AWS tokens.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Added the following new documents, articles, and sections:\\n  - A [section about **time period filters**](/semgrep-code/findings#time-period-and-triage), which you can apply to narrow down findings in the **Code**, **Supply Chain**, and **Secrets** pages. \\n  - [How to exclude a Semgrep Supply Chain rule](/kb/semgrep-supply-chain/exclude-rule)\\n  - [How to set up SMS with GitLab](/deployment/managed-scanning/gitlab)\\n  - [Why do new rules keep appearing in Comment or Block mode?](/kb/rules/ruleset-default-mode)\\n- Added the following sections in the docs homepage:\\n  - A summary of the latest release notes\\n  - A summary of supported languages for all Semgrep products\\n\\n### Changed\\n\\n- Updated the following documents and sections:\\n  - [Support documentation](/support)\\n  - [How findings are distinguishes new and duplicate findings](/semgrep-code/remove-duplicates)\\n  - [Troubleshooting if a scan \\"never finished\\"](/troubleshooting/semgrep-app)\\n- Clarified default behavior and options for how Semgrep handles exit codes.\\n- Clarified the relationship between ingress and egress IP addresses and the Semgrep Network Broker.\\n- Updated the wording in [Semgrep Assistant > Privacy and legal considerations](/semgrep-assistant/privacy) to include other large language models (LLMs). \\n\\n### Fixed\\n\\n- Improved site readability in mobile devices.\\n\\n### Removed\\n\\n- Removed `pattern-not` versus `pattern-not-inside` video.\\n\\n## \ud83d\udd27 OSS Engine\\n\\n* The following versions of the OSS Engine were released in November 2024:\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.97.0](https://github.com/semgrep/semgrep/releases/tag/v1.97.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.96.0](https://github.com/semgrep/semgrep/releases/tag/v1.96.0)"},{"id":"october-2024","metadata":{"permalink":"/docs/release-notes/october-2024","source":"@site/release-notes/october-2024.md","title":"October 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-10-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.35,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"october-2024","title":"October 2024","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","tags":["Release notes"],"date":"2024-10-30T10:00"},"unlisted":false,"prevItem":{"title":"November 2024","permalink":"/docs/release-notes/november-2024"},"nextItem":{"title":"September 2024","permalink":"/docs/release-notes/september-2024"}},"content":"The following updates were made to Semgrep in October 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- Added a **Scan details** page and pane for all completed scans. Use this to troubleshoot or view information about individual scans. \\n![Scan details pane with the permalink icon indicated in a box.](/img/scan-details-permalink.png)\\n_**Figure**. Scan details pane with the permalink icon indicated in a box._\\n- The **Dashboard** now provides a **Teams** filter, enabling you to create views based on a selection of [Teams](/deployment/teams#teams-beta) you are a part of. Click **Dashboard > Filters** to access the filter.\\n  - By default, the Dashboard now displays findings from teams you are a part of. Your finding count may differ from your colleagues based on your Teams.\\n- Added a Jira API endpoint to create Jira tickets, either by passing a list of `issue_ids` or filter query parameters to select findings. Refer to the [<i class=\\"fas fa-external-link fa-xs\\"></i> Jira API documentation](https://semgrep.dev/api/v1/docs/#tag/TicketingService/operation/semgrep_app.core_exp.notifications.ticketing.handlers.openapi_create_tickets).\\n- Semgrep now supports [Move on Sui](https://docs.sui.io/concepts/sui-move-concepts), thanks to the contributions of the Sui team.\\n\\n### Changed\\n\\n- Various UI improvements to the **Settings > SCM** tab.\\n![Old SCM card](/img/old-scm-card.png) \\n![Updated SCM card](/img/new-scm-card.png)\\n_**Figure**. Previous and current SCM card UI._\\n- **Semgrep Managed Scans**: scans now follow fail open behavior, consistent with how Semgrep in CI behaves. Failing open means that Semgrep scans with internal errors do not result in a failed job.\\n- The **Project details** page\'s **See findings** button is now a drop-down box, enabling you to select which product you want to view findings for.\\n\\n### Fixed\\n\\n- When a scan runs into an exception, Semgrep AppSec Platform displays information about the failure. Previously, within the AppSec Platform UI, it would appear to the user that the scan is still in progress.\\n- Fixed a bug where Semgrep would crash if `--trace` was passed.\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Added\\n\\n- Updated the C# parser to support all versions of the language up to 13.0 (.NET 9).\\n- Developers can now triage findings by replying to a GitHub PR comment from Semgrep, without the need to log in to Semgrep Cloud Platform. See [Triage findings through comments](/semgrep-code/triage-remediation#triage-findings-through-pr-and-mr-comments) for more information.\\n- Added an API endpoint you can use to triage findings in bulk, either by passing a list of `issue_ids` or filter query parameters to select findings. Refer to [<i class=\\"fas fa-external-link fa-xs\\"></i> Bulk triage API documentation](https://semgrep.dev/api/v1/docs/#tag/TriageService).\\n- Taint analysis now supports tracking sinks through callbacks for all applicable Semgrep-supported languages. For example:\\n  ```javascript\\n  function unsafe_callback(x) {\\n    sink(x); // Semgrep detects a finding here now!\\n  }\\n  \\n  function withCallback(val, callback) {\\n    callback(val);\\n  }\\n  \\n  withCallback(taint, unsafe_callback)\\n  ```\\n\\n### Removed\\n\\n- Removed support for Vue. The `tree-sitter` grammar has not been updated in 3 years and no community rules have been added. In theory, extract mode could be a good substitute to parse Vue files.\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n- Supply Chain now provides reachability analysis for Kotlin, including support for Gradle and Maven.\\n- Improved support and flexibility to Python dependency parsing (public beta):\\n  - Semgrep now finds non-standard `requirements.txt` names and parses them for dependencies. \\n  - Semgrep parses lockfiles in a `/requirements` folder.\\n- `cargo.lock` parser can now associate dependencies with lockfile line numbers.\\n\\n### Changed\\n\\n- Improvements to the **Advisories** page UI. \x3c!-- 16657 --\x3e\\n- **Dependency search**: the **Ecosystem** filter has been replaced by a **Language** filter. Several languages can share the same ecosystem, such as Java and Kotlin both using Maven. For accurate filtering, the **Dependencies** page now uses a **Language** filter so that you can view that language\'s packages from any ecosystem supported by Semgrep for that language.\\n\\n### Fixed\\n\\n- **Advisories** page: improved speed when fetching advisories.\\n\\n## \ud83e\udd16 Semgrep Assistant\\n\\n### Added\\n\\n- Users can now use Semgrep Assistant with their own OpenAI API key.\\n  - Enterprise users can also use the following API providers:\\n    - Azure OpenAI\\n    - AWS Bedrock\\n    - Google Gemini\\n See the [AI provider documentation](/semgrep-assistant/customize#select-your-ai-provider) for more details.\\n- PR comments made by Semgrep Assistant now reference the Git commits that it used to generate the fix. \x3c!-- 17152 --\x3e\\n![Semgrep Assistant referencing multiple commits](/img/semgrep-assistant-reference-commits.png)\\n_**Figure**. Semgrep Assistant referencing multiple commits._\\n\\n## \ud83d\udd10 Semgrep Secrets\\n\\n- `semgrep ci` output now includes a list of all Secrets rules which generated at least one blocking finding. This behavior is consistent with that of Semgrep Code.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Documented new triage workflows.\\n- Improvements to the **[Network broker documentation](/semgrep-ci/network-broker)**.\\n- Updated [Supported languages](/supported-languages) with new languages and features.\\n- Added new sections in [Semgrep AppSec Platform vs Semgrep OSS](/semgrep-pro-vs-oss).\\n- Added a new knowledge base article: [FedRAMP Authorization Guidance](/kb/semgrep-appsec-platform/fedramp-with-semgrep)\\n\\n### Changed\\n\\n- Reorganized and clarified the following:\\n  - [Semgrep Supply Chain](/semgrep-supply-chain/overview) documentation\\n  - [How Semgrep\'s **Block** mode works](/semgrep-ci/configuring-blocking-and-errors-in-ci)\\n  - [GitLab SCM connections](/deployment/connect-scm#connect-to-on-premise-orgs-and-projects) and MR comments\\n- Broadened language around Semgrep Assistant AI now that Assistant supports various LLMs.\\n\\n### Fixed\\n\\n- Various fixes to mobile UI.\\n\\n## \ud83d\udd27 OSS Engine\\n\\n- The following versions of the OSS Engine were released in October 2024:\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.91.0](https://github.com/semgrep/semgrep/releases/tag/v1.91.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.92.0](https://github.com/semgrep/semgrep/releases/tag/v1.92.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.93.0](https://github.com/semgrep/semgrep/releases/tag/v1.93.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.94.0](https://github.com/semgrep/semgrep/releases/tag/v1.94.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.95.0](https://github.com/semgrep/semgrep/releases/tag/v1.95.0)"},{"id":"september-2024","metadata":{"permalink":"/docs/release-notes/september-2024","source":"@site/release-notes/september-2024.md","title":"September 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-09-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":7.225,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"september-2024","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"September 2024","tags":["Release notes"],"date":"2024-09-30T10:00"},"unlisted":false,"prevItem":{"title":"October 2024","permalink":"/docs/release-notes/october-2024"},"nextItem":{"title":"August 2024","permalink":"/docs/release-notes/august-2024"}},"content":"The following updates were made to Semgrep in September 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- **Semgrep Managed Scanning (SMS)** scans newly created repositories automatically if you grant code access to your GitHub repositories. With this feature enabled, the following steps occur whenever you create a new GitHub repository:\\n  - Semgrep creates a corresponding project in Semgrep AppSec Platform.\\n  - Semgrep starts scanning all pull requests to that repository.\\n  - Semgrep performs full scans weekly.\\n You can turn off or turn on diff-aware scans as needed.\\n- Semgrep AppSec Platform\'s new **reporting** feature is now GA. With reporting, you can:\\n  - Evaluate your AppSec program and assess your organization\'s deployment and adoption of secure guardrails, enabling you to know your current security risk.\\n  - Gain awareness of trends and opportunities to improve your security posture.\\n  - Granularly filter data on all the page\'s charts and view priority findings.\\n- **CLI**: added the `--max-log-list-entries` flag, allowing you to set the maximum number of entries in the log.\\n- **Network Broker**: added ability to turn on or off the Network Broker for each source code manager connected to the deployment.\\n\\n### Changed\\n\\n- The **Projects** page displays the number of findings from the primary branch, not the most recently scanned branch.\\n- Error messages originating in Semgrep scans with more than one job now include more detailed information.\\n- The Semgrep CLI is now more performant. Scans, especially smaller or diff-aware scans, complete faster.\\n- Semgrep now logs memory-related warnings and errors in debug mode.\\n- Minor stylistic changes to Semgrep AppSec Platform.\\n\\n### Fixed\\n\\n- Fixed an issue where a Semgrep Supply Chain rule couldn\'t be opened when viewing findings details in Semgrep AppSec Platform on a smaller screen.\\n- Fixed an issue where soft-deleted deployments caused problems with newly created deployments.\\n- Fixed an issue where Semgrep didn\'t post a status update after the finding\'s status was updated through a pull request or merge request comment.\\n- Fixed an issue where Semgrep couldn\'t connect to multiple GitHub cloud organizations. \\n- Fixed an issue where SSO errors weren\'t displayed.\\n- Fixed an issue with Semgrep Editor where you could be switched unexpectedly to Advanced Mode from Structure Mode if you deleted data that Structure Mode couldn\'t parse.\\n- Fixed an issue with Semgrep Editor where it deleted data if you attempted to load a rule containing an unknown nested key, such as taint labels.\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Added\\n\\n- Semgrep Pro Engine\'s dataflow analysis now tracks method invocations on variables of an interface type, assuming that any implementation of the method can be called. For example, in the following code snippet, Semgrep can detect tainted input vulnerabilities in both implementation classes:\\n    ```java\\n    public interface MovieService {\\n        String vulnerableInjection(String input);\\n    }\\n\\n    public class SimpleImpl implements MovieService {\\n        @Override\\n        public String vulnerableInjection(String input) {\\n            return sink(input);\\n        }\\n    }\\n\\n    public class MoreImpl implements MovieService {\\n        @Override\\n        public String vulnerableInjection(String input) {\\n            return sink(input);\\n        }\\n    }\\n\\n    public class AppController {\\n        private MovieService movieService;\\n\\n        public String pwnTest(String taintedInput) {\\n            return movieService.vulnerableInjection(taintedInput);\\n        }\\n    }\\n    ```\\n- Taint analysis can now track method invocations on variables of an interface type when there is a single implementation. For example, Semgrep now detects the tainted input vulnerability in the following code snippet:\\n    ```java\\n    public interface MovieService {\\n        String vulnerableInjection(String input);\\n    }\\n\\n    @Service\\n    public class MovieServiceImpl implements MovieService {\\n        @Override\\n        public String vulnerableInjection(String input) {\\n            return sink(input);\\n        }\\n    }\\n\\n    @RestController(\\"/\\")\\n    public class SpringController {\\n\\n        @Autowired\\n        private MovieService movieService;\\n\\n        @GetMapping(\\"/pwn\\")\\n        public String pwnTest(@RequestParam(\\"input\\") String taintedInput) {\\n            return movieService.vulnerableInjection(taintedInput);\\n        }\\n    }\\n    ```\\n- **Go**: added support for comparing Go pre-release versions, enabling comparisons of strict core versions, pseudo-versions, and pre-release versions.\\n- **JavaScript**: uses of values imported through ECMAScript `default` imports, such as `import example from \'mod\';` can now be matched by qualified name patterns, such as `mod.default`.\\n- **Python**:\\n  - Improved support for Python, including differentiated coverage for Django, Flask, and FastAPI, and coverage for ~100 of the most commonly used libraries.\\n  - Semgrep\'s interfile analysis now includes information about Python\'s standard library, improving its ability to resolve names and types in Python code.\\n- **TypeScript**: \\n  - Added support for type inference for constructor parameter properties. For example, taint analysis can recognize that `sampleFunction` is defined in the `AbstractedService` class in the following code snippet:\\n    ```typescript\\n        export class AppController {\\n            constructor(private readonly abstractedService: AbstractedService) {}\\n\\n            async taintTest() {\\n                const src = source();\\n                await this.abstractedService.sampleFunction(src);\\n            }\\n        } \\n    ```\\n  - Improved inference of type information for class fields. This improves taint tracking for dependency injection, as demonstrated in the following example:\\n    ```typescript\\n        export class AppController {\\n            private readonly abstractedService: AbstractedService;\\n\\n            constructor(abstractedService: AbstractedService) {\\n            this.abstractedService = abstractedService;\\n            }\\n\\n            async taintTest() {\\n                const src = taintedSource();\\n                await this.abstractedService.sinkInHere(src);\\n            }\\n        }\\n    ```\\n\\n### Changed\\n\\n- Semgrep attempts to recover from out-of-memory errors during interfile data flow analysis instead of immediately falling back to intrafile analysis.\\n\\n### Fixed\\n\\n- Fixed an issue with type inference in Kotlin and Scala, so that constructor invocations like `Foo()` are now properly inferred to be of type `Foo`.\\n- Fixed an issue where some findings were reported when a rule ID was specified, even when a `nosem` comment was present.\\n- Restored missing taint findings that were possibly missed before improving index sensitivity:\\n    ```js\\n    def foo(t):\\n        x = third_party_func(t)\\n        return x\\n\\n    def test1():\\n        t = (\\"ok\\", taint)\\n        y = foo(t)\\n        sink(y) # now it\'s found\\n    ```\\n- Fixed an issue with interfile constant propagation where some definitions were incorrectly identified as constant, even though other parts of the codebase modified them.\\n- Fixed an issue in taint signature instantiation that prevented the tracking of updates to a nested object\'s field. For example, in the following code snippet, Semgrep identified that `Nested.update` modifies the `fld` attribute of a `Nested` object. Before this issue was fixed, Semgrep would not identify that `Wrapper.update` modified the `fld` attribute of the `nested` object attribute in a `Wrapper` object. This is no longer the case.\\n    ```java\\n    public class Nested {\\n        private String fld;\\n        public void update(String str) {\\n        fld = str;\\n        }\\n        // ...\\n    }\\n\\n    public class Wrapper {\\n        private Nested nested;\\n        public void update(String str) {\\n        this.nested.update(str);\\n        }\\n        // ...\\n    }\\n    ```\\n- Fixed an issue with overly aggressive match deduplication that led to findings being closed and reopened in certain circumstances.\\n- Fixed an issue with regex-fix numbered capture groups. Formerly, regex with numbered capture groups like `\\\\1\\\\2\\\\3` would be the same as `\\\\1\\\\1\\\\1`. Now, the following code:\\n    ```python\\n    # src.py\\n    12345\\n    ```\\n    and the following rule:\\n    ```yaml\\n    pattern: $X\\n    fix-regex:\\n        regex: (1)(2)(3)(4)(5)\\n        replacement: \\\\5\\\\4\\\\3\\\\2\\\\1\\n    ```\\n    results in:\\n    ```\\n    54321\\n    ```\\n- **Docker**: `CMD $...ARGS` behaves like `CMD ...` and matches any `CMD` instruction that uses array syntax, such as `CMD [\\"ls\\"]`. This fix applies to the other command-like instructions, including RUN and ENTRYPOINT.\\n- **Julia**: fixed issue regarding incorrect range matching parametrized type expressions.\\n- **Python**: fixed an issue that could lead to failure to name to type imported Python symbols during interfile analysis.\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Changed\\n\\n- Semgrep consolidates lockfile parsing logic to the beginning of the scan. This consolidated process now considers changed and unchanged lockfiles during all steps of diff-aware scans.\\n\\n### Fixed\\n\\n- Fixed an issue where certain parsing errors caused by access to an unbound variable caused Semgrep Supply Chain to crash.\\n- Fixed an issue where Supply Chain findings displayed in Semgrep AppSec Platform were color-coded based on the rule severity, not the finding severity.\\n\\n## \ud83e\udd16 Semgrep Assistant\\n\\n### Added\\n\\n- Assistant displays the message \\"Assistant did not find any high risk markers in this file\\" on a finding details page if it didn\'t determine a specific risk level for the finding.\\n\\n### Changed\\n\\n- Semgrep Assistant now provides inline code fixes that you can directly commit based on its guidance, instead of generating inline code fixes and guidance independently.\\n- Semgrep Assistant is now enabled by default if you allow code access to your repositories.\\n- Semgrep AppSec Platform only displays **Assistant recommended tasks** information on the **Dashboard** if there are tasks for the current week.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- New Semgrep Docs homepage.\\n\\n### Changed\\n\\n- Updated theming, including colors and styling.\\n- Various updates and reorganization of documentation for Semgrep Assistant.\\n- Various improvements to the [Network broker](/semgrep-ci/network-broker) documentation.\\n\\n### Fixed\\n\\n- Updated and fixed various broken links.\\n- Minor typographical fixes.\\n\\n## \ud83d\udd27 OSS Engine\\n\\n* The following versions of the OSS Engine were released in September 2024:\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.86.0](https://github.com/semgrep/semgrep/releases/tag/v1.86.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.87.0](https://github.com/semgrep/semgrep/releases/tag/v1.87.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.88.0](https://github.com/semgrep/semgrep/releases/tag/v1.88.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.89.0](https://github.com/semgrep/semgrep/releases/tag/v1.89.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.90.0](https://github.com/semgrep/semgrep/releases/tag/v1.90.0)"},{"id":"august-2024","metadata":{"permalink":"/docs/release-notes/august-2024","source":"@site/release-notes/august-2024.md","title":"August 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-07-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":5,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"august-2024","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"August 2024","tags":["Release notes"],"date":"2024-07-30T10:00"},"unlisted":false,"prevItem":{"title":"September 2024","permalink":"/docs/release-notes/september-2024"},"nextItem":{"title":"July 2024","permalink":"/docs/release-notes/july-2024"}},"content":"The following updates were made to Semgrep in August 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- A new **primary branch** feature is now generally available (GA)! This feature lets you set your repository\'s default branch; typically Semgrep deployments perform full scans only on default branches. Previously, Semgrep automatically detected primary branches through a list of common names, such as `main` or `master`, but now you can set it to any unique name your organization may use, such as `prod-1`. [Read the documentation](/deployment/primary-branch).\\n- **Semgrep Managed Scans and Semgrep in CI**: You can now view logs of all scans by going to the project\'s **Details** page. \x3c!-- 15974 --\x3e\\n- **Jira**:\\n  - Added multi-label support when creating Jira tickets. Use a comma to delineate labels.\\n  - Added Jira ticket information to information returned from the Findings API.\\n- Added initial page state for **Project > Details > Scans** tab. \x3c!-- 15805 --\x3e\\n\\n### Changed\\n\\n- Various improvements and updates to the Semgrep pricing page. \x3c!-- 16210 --\x3e\\n- Improvements to tooltips, help text, and icons in the **Projects** and **Findings** pages. \x3c!-- 16246, 16186, 16058 --\x3e\\n- **Semgrep Managed Scans**: Improved error messages to users when clicking **Run a new scan** from the **Projects > Details** page. Now you are better equipped to troubleshoot issues with managed scans. \x3c!-- 16025 --\x3e\\n- Updated the Buildkite CI configuration template. \x3c!-- 15932 --\x3e\\n- **Code search**: YAML is now validated in the search step and invalid YAML is caught when viewing results. \x3c!-- 15886 --\x3e\\n\\n### Fixed\\n\\n- **Jira**: Fixed a bug which prevented error messages from appearing in tooltips when Jira tickets failed to be created. Now, you can see detailed error messages letting you know what went wrong when a Jira ticket is not successfully created through Semgrep. \x3c!-- 16259 --\x3e\\n- Fixed a regression in which clicking outside of the **Findings** page filter component did not clear all filters.\\n- Various copy edits to the Dashboard (beta) page. \x3c!-- 16176 --\x3e\\n- Fixed an issue in which untriaged findings could be marked as reopened when creating Jira tickets from the **Finding details** page. \x3c!-- 15969 --\x3e\\n- Fixed a bug in which the **Dashboard** did not display the correct number of findings. \x3c!-- 15935--\x3e\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Added\\n\\n- **Docker**: Semgrep ellipses `...` are now allowed in patterns for `HEALTHCHECK` commands.\\n- **Terraform**: Added support for `.tfvars` files. \x3c!-- SAF-1481 --\x3e\\n\\n### Changed\\n\\n- Semgrep CLI\'s `--debug` flag no longer generates profiling information, including time and scan performance measurements. To obtain this information, use `--time`.\\n\\n### Fixed\\n\\n- Fixed an error with Julia list comprehensions. For example, the pattern `[$A for $B in $C]` matches `[x for y in z]` and result in three bindings `[$A/x,$B/y,$C/z]` instead of one `[$A/x]`.\\n- Fixed an issue resulting in deadlock when a scan has interfile analysis and tracing enabled and the number of subprocesses is greater than 1 (`j < 1`). \x3c!-- SAF-1157 --\x3e\\n- Fixed an issue where the number of files reported as scanned by Semgrep CLI was inflated due double-counting of generic and regex modes. \x3c!-- SAF-507 --\x3e\\n- `--debug` now generates fewer log entries. Additionally, when the number of ignored files, rules, or other entities is too large, Semgrep indicates this in the logs with `<SKIPPED DATA>` to keep the output minimal.\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n- You can now filter and view EPSS scores for your Supply Chain findings.\\n\\n### Changed\\n\\n- The link to the Supply Chain findings page in Semgrep AppSec Platform filters to the specific repository and `ref` on which the findings are detected.\\n\\n### Fixed\\n\\n- Fixed an issue where Supply Chain\'s Findings Detail pages weren\'t showing detailed error information.\\n\\n## \ud83e\udd16 Semgrep Assistant\\n\\n### Added\\n\\n- Assistant Memories is now in public beta. This feature allows you to tailor Assistant\'s remediation guidance to your organization\'s standards and defaults on a per-project, per-rule basis.\\n- Added the ability for you to use your own OpenAI API key instead of Semgrep\'s. This allows you to have complete control over how OpenAI handles your data.\\n- Added the ability to query for Assistant\'s remediation guidance via the [Findings API](https://semgrep.dev/api/v1/docs/#tag/Finding/operation/semgrep_app.core_exp.findings.handlers.issue.openapi_list_recent_issues).\\n\\n## \ud83d\udd10 Semgrep Secrets\\n\\n### Changed\\n\\n- The **Secrets** page in Semgrep AppSec Platform has been updated to match those for Semgrep Code and Semgrep Supply Chain.\\n- Secrets findings no longer display code snippets, even if the user has granted Semgrep code access.\\n- Secrets is no longer self-serve. To access Semgrep Secrets, you can contact your Semgrep account executive for a trial license.\\n\\n### Fixed\\n\\n- Fixed an issue that caused files ignored by Semgrep Code, but not Semgrep Secrets, fail to be scanned by Semgrep Secrets. \x3c!-- SAF-1459 --\x3e\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Documentation for providing your [own OpenAI API key](/semgrep-assistant/customize#openai-api-with-your-own-key) for use with Semgrep Assistant.\\n- EPSS documentation.\\n- Sections for various source code manager additions, such as:\\n  - Support for multiple GitHub Enterprise Server organizations.\\n  - MR comments for multiple GitLab groups.\\n- Documentation specifying which features make use of the [IP addresses](/deployment/checklist#ip-addresses) that you must add to your allowlist when you deploy Semgrep.\\n\\n### Changed\\n\\n- Various improvements to the **[Network broker documentation](/semgrep-ci/network-broker)**, such as:\\n  - Improved logging guidance.\\n  - Clarified variable names and placeholder values that users should replace.\\n- Various updates to [Editor documentation](https://semgrep.dev/docs/semgrep-code/editor) as a whole.\\n- Various updates to [Semgrep Assistant](/semgrep-assistant/overview) documentation.\\n- Updated Semgrep Supply Chain documentation to reflect the latest product UI/UX state.\\n\\n### Fixed\\n\\n- Updated and fixed various broken links.\\n- Minor typographical fixes.\\n\\n### Removed\\n\\n- Removed the Ticketing page; Semgrep supports Jira exclusively. Other ticketing integration betas have been closed. Semgrep may reopen beta programs for future ticketing integrations.\\n\\n## \ud83d\udd27 OSS Engine\\n\\n* The following versions of the OSS Engine were released in August 2024:\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.83.0](https://github.com/semgrep/semgrep/releases/tag/v1.83.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.84.0](https://github.com/semgrep/semgrep/releases/tag/v1.84.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.84.1](https://github.com/semgrep/semgrep/releases/tag/v1.84.1)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.85.0](https://github.com/semgrep/semgrep/releases/tag/v1.85.0)"},{"id":"july-2024","metadata":{"permalink":"/docs/release-notes/july-2024","source":"@site/release-notes/july-2024.md","title":"July 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-07-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":6.145,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"july-2024","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"July 2024","tags":["Release notes"],"date":"2024-07-30T10:00"},"unlisted":false,"prevItem":{"title":"August 2024","permalink":"/docs/release-notes/august-2024"},"nextItem":{"title":"June 2024","permalink":"/docs/release-notes/June-2024"}},"content":"The following updates were made to Semgrep in July 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- A new **dashboard** focused on secure guardrails adoption is now in private beta. Find out what percent of findings are fixed before they enter your default or primary branch. To join the private beta, reach out to your Technical Account Manager or Account Executive. See the [Dashboard documentation](/semgrep-appsec-platform/dashboard) for more information.\\n  ![Dashboard (beta) page](/img/dashboard-fold.png)\\n- Added support for the following source code managers (SCMs):\\n  - Azure DevOps\\n  - Bitbucket Cloud\\n  - Bitbucket Data Center\\n  With these changes, it is easier for you to add repositories from these SCMs to Semgrep.\\n- Semgrep Managed Scans:\\n  - You can now view your most recent scan log.\\n  - You can enable or disable diff-aware scans for PRs and MRs.\\n- Semgrep API:\\n  - There is a new public endpoint `/v1/scan/:id`, which returns the metadata from `first_seen_scan`. \x3c!-- 15178 --\x3e\\n  - Added `ecosystem` field to public findings API response. It is under `found_dependency`. \x3c!-- 15284 --\x3e\\n\\n### Changed\\n\\n- Improved the new user onboarding experience for GitHub users. Changes to the onboarding flow include copy fixes to the instructions and the faster addition of Semgrep to your repository\'s CI pipeline. \x3c!-- 15330 --\x3e\\n- Updated the **findings details** page. \x3c!-- 15573 --\x3e\\n- Updated GHA sample workflows to use `setup-node@v4`.  \x3c!-- 15707 --\x3e\\n- Various performance improvements to Semgrep Managed Scans.\\n- Projects on Semgrep Managed Scans now use the `managed-scan` tag instead of `autoscan`. \x3c!-- 15450 --\x3e\\n- Improvements to API documentation.\\n\\n### Fixed\\n\\n- Fixed an issue in the Editor or Playground in which Turbo mode could return an `undefined` object. \x3c!-- 15619 --\x3e\\n- Fixed an issue in which **Add other GitHub organization** wouldn\'t redirect to the correct URL. \x3c!-- Semgrep 15419 --\x3e\\n- Minor type fixes to the Policies page. \x3c!-- 15299 --\x3e\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Added\\n\\n- Added the `--exclude-minified-files` flag to enable skipping minified files and the `--no-exclude-minified-files` flag to include minified files during scans triggered by running `semgrep ci` and `semgrep scan`. By default, Semgrep scans minified files.\\n- Added `as-metavariable`, a new rule-writing feature that allows rule writers to bind arbitrary matches to a name and then use it with autofixes.\\n- **Python**: Added support for [Flask](https://semgrep.dev/p/flask), [Django](https://semgrep.dev/p/django), and [FastAPI](https://semgrep.dev/p/fastapi).\\n- Added community support for [Move](https://aptos.dev/en/build/smart-contracts).\\n- \x3c!-- vale off --\x3e Added community support for [Circom](https://docs.circom.io/circom-language/signals/).\x3c!-- vale on --\x3e\\n\\n### Changed\\n\\n- Improved module resolution for Python scans so that imports like `from a.b import c`, where `c` is a module, resolve correctly.\\n- Improved error handling for rules with invalid patterns so that scans still complete and findings from other rules are reported.\\n- **CLI**:\\n  - Users must sign in before running `semgrep scan --pro`. Scans will not begin until the user signs in.\\n  - The `--debug` option now displays logging information incrementally instead of waiting for the scan to complete.\\n\\n### Fixed\\n\\n- Fixed an issue where Semgrep Managed Scanning would occasionally hang.\\n- Fixed an issue where users couldn\'t pass in the `--junit-xml-output` flag.\\n- Fixed an issue with the `--pro-intrafile` flag that caused Semgrep to confuse parameters\\nwith top-level functions with no arguments when both share a name:\\n  ```js\\n  def foo\\n    taint\\n  end\\n\\n  def bar(foo)\\n    sink(foo) # no more false positive here\\n  end\\n  ```\\n- Semgrep is stricter when unifying identifiers. For example, this pattern doesn\'t work because the `foo` methods in classes `A` and `B` aren\'t the same. As such, their IDs aren\'t unifiable through `$F`:\\n  ```yaml\\n  patterns:\\n    - pattern-inside: |\\n        class A:\\n          ...\\n          def $F(...):\\n            ...\\n          ...\\n        ...\\n    - pattern-inside: |\\n        class B:\\n          ...\\n          def $F(...):\\n            ...\\n          ...\\n        ...\\n  ```\\n  should be rewritten as follows:\\n  ```yaml\\n  patterns:\\n    - pattern-inside: |\\n        class A:\\n          ...\\n          def $F1(...):\\n            ...\\n          ...\\n        ...\\n    - pattern-inside: |\\n        class B:\\n          ...\\n          def $F2(...):\\n            ...\\n          ...\\n        ...\\n    - metavariable-comparison:\\n        comparison: str($F1) == str($F2)\\n  ```\\n- Fixed an issue where code snippets from GitLab-hosted repositories weren\'t loading.\\n- **C++**: Fixed an issue so that scanning a project with header files no longer causes spurious warnings that the file is being skipped or isn\'t being analyzed.\\n- **CLI**:\\n  - Fixed an issue where autofix previews weren\'t displayed with appropriate spacing.\\n  - Fixed an issue where rules served to the CLI weren\'t filtered by minimum and maximum versions supported, causing errors.\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n- Added support for comparing Go pseudo-versions against other pseudo-versions and strict core versions.\\n- Added support for uploading and parsing large npm repositories.\\n- Added the ability for Supply Chain to retrieve and display CVE data.\\n- Added a filter to support filtering by reachability rule, CVE, or GHSA information.\\n\\n### Changed\\n\\n- SBOMs generated by Semgrep now contain time zone information.\\n\\n### Fixed\\n\\n- Fixed an issue where `package-lock.json` parser incorrectly assumed that all paths in the `packages` component of `package-lock.json` started with `node_modules/`. This is incorrect, since a dependency can be installed anywhere. The parser can now recognize alternative locations.\\n- Fixed an issue where users couldn\'t create Jira tickets for Supply Chain findings with the severity filter active.\\n- Fixed an issue where CVE information was labeled as CWE information.\\n\\n## \ud83e\udd16 Semgrep Assistant\\n\\n### Added\\n\\n* **Assistant Memories** is now in public beta. [Assistant Memories](/semgrep-assistant/overview#memories) allows users to tailor Assistant\'s remediation guidance on a per-project, per-rule basis.\\n\\n### Fixed\\n\\n- Fixed various UI issues when analyzing findings.\\n\\n## \ud83d\udd10 Semgrep Secrets\\n\\n### Added\\n\\n- Added the **Open in Editor** button to the findings detail page for findings identified by Secrets.\\n- Added the ability to filter for Secrets findings with the status of **Ignored**.\\n- Added the ability to triage Secrets using the **Reviewing** and **Fixing** statuses.\\n\\n### Fixed\\n\\n- Fixed an issue where Slack webhooks weren\'t included in historical scan findings.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Added the following new documents, articles and sections:\\n  - [Secure guardrails in Semgrep](/secure-guardrails/secure-guardrails-in-semgrep) - an overview of secure guardrails and how to use Semgrep features to implement guardrails.\\n    - [Secure defaults](/secure-guardrails/secure-defaults) - a definition of secure defaults and reference towards creating your own.\\n  - Added sections about connecting the following SCMs to Semgrep:\\n    - [Azure DevOps Cloud](/deployment/connect-scm#connect-to-cloud-hosted-orgs)\\n    - [Bitbucket Cloud](/deployment/connect-scm#connect-to-cloud-hosted-orgs) \x3c!-- vale off --\x3e\\n    - [Bitbucket Data Center](/deployment/connect-scm#connect-to-on-premise-orgs-and-projects)\\n    \x3c!-- vale on --\x3e\\n  - Added documentation about setting up PR comments for Azure and Bitbucket:\\n    - [Azure PR comments](/semgrep-appsec-platform/azure-pr-comments)\\n    - [Bitbucket PR comments](/category/bitbucket-pr-comments)\\n  - Added a section about Assistant Memories (beta).\\n- Added the `semgrep ci` help output into the CLI reference documentation.\\n\\n### Changed\\n\\n- Updated the [Semgrep Network Broker](/semgrep-ci/network-broker) documentation to work with Semgrep Managed Scans and Bitbucket.\\n- Updated instructions for connecting [Semgrep with GitHub Enterprise](/deployment/connect-scm#connect-to-on-premise-orgs-and-projects).\\n- Updated the [Scan monorepo in parts](/kb/semgrep-ci/scan-monorepo-in-parts) knowledge base article to use the new Semgrep `--subdir` option.\\n- Updated Semgrep Pro rules documentation.\\n- Updated Semgrep rule syntax with the following:\\n  - [Metavariable unification](/writing-rules/pattern-syntax#metavariable-unification)\\n  - [Anonymous metavariables](/writing-rules/pattern-syntax#anonymous-metavariables)\\n  - [`decorators_order_matters`](/writing-rules/rule-syntax#options)\\n\\n### Fixed\\n\\n- Various broken links have been updated.\\n\\n### Removed\\n\\n- Removed the Semgrep vim extension from the documentation due to the lack of activity on the extension itself.\\n\\n## \ud83d\udd27 OSS Engine\\n\\n* The following versions of the OSS Engine were released in July 2024:\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.79.0](https://github.com/semgrep/semgrep/releases/tag/v1.79.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.80.0](https://github.com/semgrep/semgrep/releases/tag/v1.80.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.81.0](https://github.com/semgrep/semgrep/releases/tag/v1.81.0)\\n* Semgrep now supports [Move on Aptos](https://medium.com/aptoslabs/semgrep-support-for-move-on-aptos-39f9109f2266), thanks to the contributions of Aptos Labs."},{"id":"June-2024","metadata":{"permalink":"/docs/release-notes/June-2024","source":"@site/release-notes/june-2024.md","title":"June 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-06-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.675,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"June-2024","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"June 2024","tags":["Release notes"],"date":"2024-06-30T10:00"},"unlisted":false,"prevItem":{"title":"July 2024","permalink":"/docs/release-notes/july-2024"},"nextItem":{"title":"May 2024","permalink":"/docs/release-notes/May-2024"}},"content":"The following updates were made to Semgrep in June 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- The Semgrep **Jira integration** is now in **public beta**. Create Jira project tickets from Semgrep AppSec Platform and configure mappings from Semgrep fields to Jira fields. Read the [Jira integration documentation](/semgrep-appsec-platform/jira#enable-the-jira-integration) to learn more.\\n  - Assistant remediation guidance is now available in Jira tickets you create. \x3c!-- 14994 --\x3e\\n  - Added a red Jira ticket icon in the **Findings** page to make it clear when Jira ticket creation fails.  \x3c!-- 14835 --\x3e\\n- The onboarding checklist modal now expands automatically to show more items when you first sign in to Semgrep AppSec Platform. \x3c!-- 14987 --\x3e\\n- You can now sort projects by name and latest scan by navigating to the **Projects** page and clicking the arrow next to their respective headers. \x3c!-- 14923 --\x3e\\n![Arrows used to sort projects by name and latest scan.](/img/release-notes-project-sorting.png)\\n- **Playground**: Added the `fix` key to structure mode.\\n- Added a setup page for Semgrep Managed Scanning. New users are now able to create a source code manager when setting up managed scans for the first time.\\n- Added the ability [to define separate path ignores lists](/ignoring-files-folders-code#define-ignored-files-and-folders-in-semgrep-appsec-platform). Users can now define one for Semgrep Code and Supply Chain and another for Semgrep Secrets.\\n- Added two additional triage states for all Semgrep products:\\n  - Reviewing\\n  - Fixing\\n\\n### Changed\\n\\n- Updated the **Settings > Integrations** tab with the latest supported integration information. \x3c!--15042 --\x3e\\n\\n### Fixed\\n\\n- Previously, users whose access token had expired found themselves redirected back and forth between `/login` and `/orgs/-`, ultimately navigating them to `/login`. This issue has been fixed and the user is now properly redirected based on the state of the access token.\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Added\\n\\n- Added support for the `--subdir` command, which enables scanning monorepos in parts. `--subdir` accepts the path to a subdirectory, then runs Semgrep only on the specified subdirectory and ensures that the file links displayed in Semgrep AppSec Platform are correct.\\n- Added traces to help debug the performance of tainting. To send traces added in the PR, pass `--trace` and set the environment variable `SEMGREP_TRACE_LEVEL=trace`. To send traces to a local endpoint instead of Semgrep\'s default endpoint, use `--trace-endpoint`.\\n\\n### Changed\\n\\n- Removed URLs at the end of logs generated whenever `semgrep ci --dryrun` is run. Dry runs occur locally without results uploaded to Semgrep AppSec Platform, so the URL is unnecessary.\\n\\n### Fixed\\n\\n- Fixed an issue that caused findings to be flagged as **Untriaged** and display the message, \\"Untriaged by Semgrep because a related issue was untriaged.\\"\\n- Fixed an issue with **last seen** scan dates when projects are scanned with individual products, such as Code and Supply Chain, not simultaneously.\\n\\n## \u26d3\ufe0f  Semgrep Supply Chain\\n\\n### Added\\n\\n- You can now disable Supply Chain PR comments for reachable findings. Navigate to **Settings > Deployment**, and within the **Supply Chain** section, click the <i class=\\"fa-solid fa-toggle-large-on\\"></i> **PR/MR Comments** toggle.\\n\\n### Changed\\n\\n- The Supply Chain > **Advisories** tab search box now allows you to search by CVE number, such as `CVE-2023-44487`, or GitHub Security Advisory (GHSA) ID.\\n\\n### Fixed\\n\\n- Clicking the **Clear filters** button in **Supply Chain > Vulnerabilities** now clears all filters correctly. \x3c!-- 15004 --\x3e\\n\\n## \ud83e\udd16 Semgrep Assistant\\n\\n### Added\\n\\n- Added the Assistant **Analyze** button to Semgrep Code\'s **Finding Details** page so that users do not have to return to the **Findings** page to trigger Assistant actions.\\n- Assistant features have been added to the Jira integration. See [Semgrep AppSec Platform](#-semgrep-appsec-platform) for more information.\\n\\n### Fixed\\n\\n- Fixed an issue with Assistant causing long wait times for analysis results.\\n\\n## \ud83d\udd10 Semgrep Secrets\\n\\n### Added\\n\\n- Added a pop-up confirmation in Semgrep AppSec Platform that enabling historical secrets results in longer scan times.\\n\\n### Changed\\n\\n- Changed the details page for Secrets findings to match findings identified by Semgrep Code and Semgrep Supply Chain.\\n- Changed Secrets findings to rely on the findings severity instead of rule severity, since a validator can override the latter value.\\n\\n### Fixed\\n\\n- Fixed an issue where Semgrep Code incorrectly ran alongside Semgrep Secrets. This occurred when there were files that:\\n  - Should be scanned by Semgrep Secrets but ignored by Semgrep Code, and\\n  - Contained Python functions with annotations ending in `endpoint`, `route`, `get`, `patch`, `post`, `put`, `delete`, `before_request`, or `after_request`\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Added the following new documents, articles and sections:\\n  - [Why didn\'t Semgrep ignore the files and folders in the Secrets Path ignores for this project?](http://localhost:3000/docs/kb/semgrep-secrets/per-product-ignore-not-working)\\n  - [How to paginate responses from the Semgrep API](/kb/integrations/pagination)\\n  - [The `semgrep login` command doesn\'t redirect to my Semgrep tenant site](/kb/semgrep-appsec-platform/semgrep-login-cli-tenant)\\n  - [What does \\"Act on your behalf\\" mean?](/kb/semgrep-appsec-platform/act-on-your-behalf)\\n- Various documentation presentation updates.\\n- Added a [list of default branch names](/semgrep-code/glossary#default-branch) that Semgrep uses to identify trunk or mainline branches.\\n\\n### Changed\\n\\n\x3c!-- 15039 --\x3e\\n- Revised the definitions for the following fields in the API documentation:\\n  - State\\n  - Status\\n  - Triage state\\n- Major updates have been made to the following documentation:\\n  - [Create Jira tickets](/semgrep-appsec-platform/jira)\\n  - [Pro rules](/semgrep-code/pro-rules)\\n  - [Notifications](/semgrep-appsec-platform/notifications)\\n- Updated [webhook samples](/semgrep-appsec-platform/webhooks#semgrep-findings-object).\\n- Site look and feel: minor cosmetic improvements.\\n\\n### Fixed\\n\\n- Fixed various broken links.\\n- Various troubleshooting documents have been restored and re-edited for clarity and quality.\\n\\n## \ud83d\udd27 Semgrep OSS Engine\\n\\nThe following versions of Semgrep OSS Engine were released in June 2024:\\n\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i>1.75.0](https://github.com/semgrep/semgrep/releases/tag/v1.75.0)\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i>1.76.0](https://github.com/semgrep/semgrep/releases/tag/v1.76.0)\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i>1.77.0](https://github.com/semgrep/semgrep/releases/tag/v1.77.0)\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i>1.78.0](https://github.com/semgrep/semgrep/releases/tag/v1.78.0)"},{"id":"May-2024","metadata":{"permalink":"/docs/release-notes/May-2024","source":"@site/release-notes/may-2024.md","title":"May 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-05-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":5.26,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"May-2024","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"May 2024","tags":["Release notes"],"date":"2024-05-30T10:00"},"unlisted":false,"prevItem":{"title":"June 2024","permalink":"/docs/release-notes/June-2024"},"nextItem":{"title":"April 2024","permalink":"/docs/release-notes/April-2024"}},"content":"The following updates were made to Semgrep in May 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- **Semgrep managed scanning** is now in public beta. It enables you to scan with Semgrep on any GitHub-hosted repository without the need to change existing CI/CD configurations.\\n  - Managed scanning is crucial to organizations with hundreds or thousands of repositories. Read the [<i class=\\"fa-regular fa-file-lines\\"></i> docs](/deployment/managed-scanning/overview) or the [<i class=\\"fas fa-external-link fa-xs\\"></i> blog post](https://semgrep.dev/blog/2024/rapidly-deploy-code-scans-with-semgrep-managed-scanning).\\n\\n### Changed\\n\\n- Improved the onboarding experience when scanning with Semgrep on a remote repository.\\n- **Projects page**: Improved the **Can\'t find your project?** tooltip with more troubleshooting advice.\\n  - The **Sync projects** button has been moved to the **Can\'t find your project** tooltip.\\n- Improved Jira integration and workflow. Jira tickets can now be created for Supply Chain findings, and provide better ticket summaries \x3c!-- 14334 --\x3e and descriptions. \x3c!-- 14253 --\x3e\\n  - The Jira integration is in a private beta. See the [<i class=\\"fa-regular fa-file-lines\\"></i> Jira documentation](/semgrep-appsec-platform/jira) to learn how it works and how to gain access to the beta.\\n- **Editor and Playground**: various improvements to structure mode, including the addition of tooltips to aid in rule writing and bug fixes.\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Added\\n\\n- **Code search** is now in public beta. Code search allows you to test a Semgrep rule by running it against one or more GitHub repositories or projects instead of just a few lines of test code. Its results highlight all instances of matching code in those target repositories, allowing you to see whether your rule works as intended or not.\\n- **Pro findings** filter: when reviewing items on Semgrep AppSec Platform\'s **Findings** page, the **Pro findings** filter allows you to filter for:\\n  - Findings identified using Semgrep Pro rules.\\n  - Findings identified as a result of Pro Engine analysis, or interfile and interprocedural analysis.\\n\\n### Changed\\n\\n- The sorting criteria used on Semgrep AppSec Platform\'s **Findings** has been updated to reflect the follow order:\\n  1. Severity\\n  2. Findings generated by custom rules\\n  3. Findings generated by [Pro rules](/semgrep-code/pro-rules)\\n  4. Issue count in descending order\\n  5. Findings ID in ascending order\\n\\n### Fixed\\n\\n- When using `semgrep --test --json` to run tests against your rules and obtain the results in JSON format, Semgrep now reports the following issues to the `config_missing_fixtests` field in the JSON output for all rules in a file (not just the first rule):\\n  - Rule files containing `fix:` without the corresponding `.fixed` test file.\\n  - Rule files using `fix-regex:` without the corresponding `.fixed` test file.\\n- Fixed an issue where Dockerfiles lacking a trailing newline character at the end of the file caused a segmentation fault.\\n- Fixed an issue with the improper handling of Unicode characters caused Semgrep to crash.\\n- Fixed an issue where interfile tainting missed a constant propagation phase, leading to the omission of true positives in some cases during interfile analysis.\\n- Fixed an issue where Semgrep ignored YAML tags instead of matching them correctly.\\n- Fixed an issue where findings identified in an earlier scan aren\'t marked as fixed when they no longer appear in later scans.\\n- Fixed an issue where patterns flagged as disabled were not disabled when switching from structure mode to advanced mode in the Semgrep Editor.\\n- **CLI**:\\n  - When outputting Semgrep results in SARIF format, Semgrep now adds the **security** tag when CWE metadata is present in the rule.\\n  - Fixed an issue where rules with `metavariable-type` do not show up in the SARIF output.\\n\\n## \u26d3\ufe0f  Semgrep Supply Chain\\n\\n### Added\\n\\n- Added public Supply Chain APIs. [<i class=\\"fas fa-external-link fa-xs\\"></i> Read the documentation](https://semgrep.dev/api/v1/docs/#tag/Finding/operation/semgrep_app.core_exp.findings.handlers.issue.openapi_list_recent_issues).\\n- Added [lockfile-only support](/supported-languages/#semgrep-supply-chain) for the **Hex package manager** for Elixir codebases.\\n\\n### Changed\\n\\n- The Supply Chain UI has been improved for consistency across Semgrep products. With these changes, users are now able to easily manage SCA, SAST, and secret findings. The Supply Chain UI updates provide the following workflow improvements:\\n  - Grouping vulnerabilities by rule\\n  - Bulk triaging of findings\\n  - Comprehensive filtering\\n  - A unified API for findings across Semgrep Code and Semgrep Supply Chain\\n- The **Supply Chain > Settings** page has been renamed to **License configuration**.\\n\\n### Fixed\\n\\n- **Elixir**: Fixed a bug in the `mix.lock` parser where it failed on a Python `None` error and added a handler for arbitrary exceptions during lockfile processing.\\n- Fixed an issue where upgrade-only SCA rules without patterns could not be validated.\\n\\n## \ud83e\udd16 Semgrep Assistant\\n\\n### Changed\\n\\n- Autofix results older than six months are now re-analyzed and updated.\\n- Assistant displays guidance information on how to fix an issue, even if there is no autofix, or code, suggestion present.\\n\\n### Fixed\\n\\n- Fixed issue with Assistant license check issue causing rate limiting errors.\\n- Fixed an issue where users couldn\'t toggle on Semgrep Assistant with only GitLab connected as the source code manager.\\n- Fixed an issue where findings that had been auto-triaged weren\'t analyzed, leading to lack of remediation guidance from Semgrep.\\n- Fixed an issue where Assistant suggested actions for findings that were ignored.\\n\\n## \ud83d\udd10 Semgrep Secrets\\n\\n### Added\\n\\n- Added support for AWS validator syntax.\\n\\n### Changed\\n\\n- **CLI**: The deprecated `--beta-testing-secrets-enabled` flag is removed. Use `--secrets` instead.\\n\\n### Fixed\\n\\n- Fixed an issue where the `--historical-secrets` flag was implemented as an option in the output formats group instead of the Pro options group, sometimes causing scans to fail.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Added the following new documents and sections:\\n  - [<i class=\\"fa-regular fa-file-lines\\"></i> Managed scanning](/deployment/managed-scanning/overview)\\n  - [<i class=\\"fa-regular fa-file-lines\\"></i> Code Search (beta)](https://semgrep.dev/docs/semgrep-code/editor#code-search-beta)\\n- Added a **Last updated** widget to the docs.\\n\\n### Changed\\n\\n- Major updates have been made to the following documentation:\\n  - [<i class=\\"fa-regular fa-file-lines\\"></i> The docs homepage](/)\\n  - [<i class=\\"fa-regular fa-file-lines\\"></i> Jira integration](/semgrep-appsec-platform/jira)\\n- Updated how the docs are organized (minor changes).\\n- Various documentation presentation updates.\\n- Minor documentation updates.\\n\\n### Fixed\\n\\n- Fixed an issue where the docs wouldn\'t display all the tags in the headings. The docs now consistently show tags, if any, at the beginning of the document.\\n\\n## \ud83d\udd27 Semgrep OSS Engine\\n\\nThe following versions of Semgrep OSS Engine were released in May 2024:\\n\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i>1.71.0](https://github.com/semgrep/semgrep/releases/tag/v1.71.0)\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i>1.72.0](https://github.com/semgrep/semgrep/releases/tag/v1.72.0)\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i>1.73.0](https://github.com/semgrep/semgrep/releases/tag/v1.73.0)\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i>1.74.0](https://github.com/semgrep/semgrep/releases/tag/v1.74.0)"},{"id":"April-2024","metadata":{"permalink":"/docs/release-notes/April-2024","source":"@site/release-notes/april-2024.md","title":"April 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-04-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":5.46,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"April-2024","hide_title":true,"title":"April 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"date":"2024-04-30T10:00"},"unlisted":false,"prevItem":{"title":"May 2024","permalink":"/docs/release-notes/May-2024"},"nextItem":{"title":"March 2024","permalink":"/docs/release-notes/march-2024"}},"content":"The following updates were made to Semgrep in April 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf10 Semgrep AppSec Platform\\n\\n### Added\\n\\n- The **Teams** feature, which provides project-level role-based access control (RBAC), is now in public beta. This feature enables you to assign **members** to **teams**, and then grant those teams access to specific projects (repositories added to Semgrep).\\n    - Teams are crucial to large organizations with hundreds of members and projects. See [<i class=\\"fa-regular fa-file-lines\\"></i> Manage user access to projects](/deployment/teams).\\n- The Dashboard now displays the Assistant **priority inbox**, a list of essential tasks that Semgrep Assistant prepares for you each time you log in. \x3c!-- 13768 --\x3e\\n\\n### Changed\\n\\n- **Editor and playground**: Structure mode has replaced simple mode. Try it out in the [<i class=\\"fas fa-external-link fa-xs\\"></i> Playground](https://semgrep.dev/playground/new). Structure mode facilitates the creation of valid Semgrep rules for both power and new users.\\n- Semgrep Cloud Platform has been renamed to Semgrep AppSec Platform.\\n- The Dashboard now has several UX improvements.\\n- The default Bitbucket YAML configuration file has been updated with options for full, diff, and on-demand scans.\\n- Improved the process of creating a GitHub Enterprise private Semgrep app. \x3c!-- 13675 --\x3e\\n- **Settings**: The Semgrep Pro Engine toggle has been renamed to **<i class=\\"fa-solid fa-toggle-large-on\\"></i> Cross-file**.\\n\\n### Fixed\\n\\n## \ud83d\udcbb Code\\n\\n### Added\\n\\n- Added support for the QL language, which is used by CodeQL.\\n- Added the ability to [specify multiple output flags](/getting-started/cli#scan-your-project), which allows users to write output to multiple files in multiple formats, such as SARIF and JSON. For example:\\n```bash\\n# prints findings in text to standard out and writes JSON output to `findings.json`.\\nsemgrep ci --json-output=findings.json\\n```\\n- Added the ability to copy autofix suggestions displayed on the **Findings** page.\\n- Added the ability to filter findings generated by Pro rules on the **Findings** page.\\n- Added dataflow traces to the SARIF output obtained from the CLI.\\n\\n### Changed\\n\\n- Cross-function (intrafile) analysis is now the default for Semgrep Code.\\n- Updated how Semgrep parses regex; some rules may need to be updated to comply with stricter regex standards.\\n\\n### Fixed\\n\\n- Fixed an issue with interfile diff-aware scans where the removal of pre-existing findings\\ndidn\'t work properly when adding a new file or renaming an existing file.\\n- Fixed an issue where findings reopened after they were initially removed when the findings metadata was changed.\\n- Fixed an issue where bulk triage did not work.\\n- **IDE Extensions**: Semgrep waits longer for users to log in from the IDE.\\n- **CLI**:\\n  - Upon completion, `semgrep ci` sends a message to Semgrep AppSec Platform to mark the scan as completed.\\n  - Fixed an issue where `semgrep ci --oss-only` crashed when Semgrep Secrets was enabled.\\n\\n## \u26d3\ufe0f  Supply Chain\\n\\n\x3c!--\\n### Added\\n\\n- Added a new **Finding details** page. In Semgrep AppSec Platform, click on **Supply Chain > Details** on the specific finding\'s card. The finding details page displays an all triage activity, in-depth description of the vulnerability, remediation, and the rule pattern that generated the finding.  \x3c!-- 13780 --\x3e\\n\\n### Changed\\n\\n- Updated the ecosystem used for Elixir from Mix to Hex.\\n\\n\x3c!--\\n\x3c!-- should we include the new UI for SCA  --\x3e\\n\x3c!--\\n- The Supply Chain page UX has been redesigned. Improvements include:\\n    - Consistency with the Semgrep Code UX, for ease of workflows such as triage.\\n    - You can now filter by project, dependency, and CVE.\\n    - Updated reachability categories.\\n    - Vulnerabilities are now grouped by the rule that detected them.\\n    - Triage multiple vulnerabilities at once by clicking multiple <i class=\\"fa-solid fa-square-check\\"></i> checkboxes. You can <kbd>Shift + click</kbd> to select a range.\\n    - Within the projects page, the count of reachable vulnerabilities counts only Always reachable \x3c!-- 13645 --\x3e\\n\\n### Fixed\\n\\n- Fixed an issue where tooltips for conditionally reachable vulnerabilities were not being displayed. \x3c!-- 13775 --\x3e\\n\\n## \ud83e\udd16 Semgrep Assistant\\n\\n### Changed\\n\\n- Assistant usage is now capped by an hourly rate rather than a monthly limit.\\n\\n### Fixed\\n\\n- Fixed an issue where Assistant sent PR or MR comments for Supply Chain and Secrets findings; Assistant should only be doing so for Code findings.\\n\\n## \ud83d\udd10 Semgrep Secrets\\n\\n### Added\\n\\n- Added a template to the Semgrep Editor to aid in writing custom rules with validators for use with Secrets. Access this template in the Editor by clicking on the small **(+)** plus sign and clicking **HTTP validators**\\n\\n### Changed\\n\\n- Users with access to Secrets can view the **Rules > Policies > Secrets** page, even if they have Secrets disabled.\\n\\n### Fixed\\n\\n- Fixed an issue where the **Secrets** page filters disappeared after users selected a single filter.\\n- Fixed an issue where historical scanning for credentials leaked in Git commits ran on diff-aware scans instead of on full scans.\\n- Fixed an issue where users without access to Secrets could still see Secrets settings in Semgrep AppSec Platform.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Added the following new documents:\\n    - [<i class=\\"fa-regular fa-file-lines\\"></i> Semantic detection in Java](/semgrep-code/java) - describes how Semgrep reduces false positives through its understanding of the Java language.\\n    - [<i class=\\"fa-regular fa-file-lines\\"></i> How to scan your Git history (beta)](/semgrep-secrets/historical-scanning).\\n    - [<i class=\\"fa-regular fa-file-lines\\"></i> Write custom validators](/semgrep-secrets/validators)\\n    - Added two additional glossaries:\\n        - Static analysis and rule writing glossary\\n        - Semgrep Code glossary\\n- Added a new section for user management on **[Teams (beta)](/deployment/teams)**, an access control feature that enables administrators or managers to assign projects to specific team members.\\n- Expanded the documentation on [Semgrep Assistant\'s new features](/semgrep-assistant/overview).\\n\\n### Changed\\n\\n- Renamed occurrences of Semgrep Cloud Platform to Semgrep AppSec Platform.\\n- Edited the [Semgrep FAQ](/faq/overview) for clarity and correctness.\\n- Renamed instances of Pro Engine to cross-file or interfile analysis.\\n- Rearranged documents under Semgrep Code to better reflect the user journey.\\n- Updated documentation on how Semgrep differentiates between **Fixed** and **Removed** statuses.\\n- Updated the sample [Bitbucket Pipelines CI configuration](/semgrep-ci/sample-ci-configs#bitbucket-pipelines) file\\n- Minor additions and updates:\\n    - How Semgrep computes [user limits across multiple orgs](/usage-and-billing).\\n    - Findings retention policy.\\n- The following knowledge base articles have been updated:\\n    - [Scan a monorepo in parts](/kb/semgrep-ci/scan-monorepo-in-parts)\\n    - [Failed to run a Git command during a pull request or merge request scan](/kb/semgrep-ci/git-command-errors)\\n\\n### Fixed\\n\\n- Fixed some broken links to redirect to the correct doc.\\n- Standardized the disuse of trailing slashes in docs URLs.\\n\\n## \ud83d\udd27 OSS Engine\\n\\nThe following versions of the OSS Engine were released in April 2024:\\n\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i>1.68.0](https://github.com/semgrep/semgrep/releases/tag/v1.68.0)\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i>1.69.0](https://github.com/semgrep/semgrep/releases/tag/v1.69.0)\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i>1.70.0](https://github.com/semgrep/semgrep/releases/tag/v1.70.0)"},{"id":"march-2024","metadata":{"permalink":"/docs/release-notes/march-2024","source":"@site/release-notes/march-2024.md","title":"March 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-03-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":6.05,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"march-2024","hide_title":true,"title":"March 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"date":"2024-03-30T10:00"},"unlisted":false,"prevItem":{"title":"April 2024","permalink":"/docs/release-notes/April-2024"},"nextItem":{"title":"February 2024","permalink":"/docs/release-notes/february-2024"}},"content":"The following updates were made to Semgrep in March 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\udd27 OSS Engine\\n\\n* The following versions of the OSS Engine were released in March 2024:\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.64.0](https://github.com/semgrep/semgrep/releases/tag/v1.64.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.65.0](https://github.com/semgrep/semgrep/releases/tag/v1.65.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.66.0](https://github.com/semgrep/semgrep/releases/tag/v1.66.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.66.1](https://github.com/semgrep/semgrep/releases/tag/v1.66.1)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.66.2](https://github.com/semgrep/semgrep/releases/tag/v1.66.2)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.67.0](https://github.com/semgrep/semgrep/releases/tag/v1.67.0)\\n\\n## \ud83c\udf10 Cloud Platform\\n\\n### Added\\n\\n- The **Add to policy** button in the **Playground** can now differentiate between custom Code and Secrets rules. When you click **Add to policy**, it detects which type of rule you have written and adds the rule to the corresponding policy board. \x3c!-- 12739 --\x3e\\n\\n### Fixed\\n\\n- Fixed a bug in which users couldn\'t claim a license if they only had one organization. \x3c!-- 13076 --\x3e\\n- **Visual Studio Code extension:** fixed an issue where rules weren\'t downloaded to the user\'s machine, which resulted in no findings detected.\\n- Minor UI and in-app copy fixes in the following:\\n    - Editor\\n    - Settings page\\n    - Tutorial page\\n    - Onboarding process \x3c!-- 13447, 13445, 13364, 13194, 13082 --\x3e\\n- Fixed a bug in which users were sometimes unable to delete their SSO configuration. \x3c!-- 13171 --\x3e\\n\\n## \ud83d\udcbb Code\\n\\n### Added\\n\\n- Added support for Python\'s `yield` keyword, enabling the detection of taint findings from taint sources returned by `yield`.\\n- Added ability for users to copy file paths displayed in Semgrep Cloud Platform\'s **Findings** page if they aren\'t links.\\n- Added the ability for users to see if there\'s a version of a rule they\'re currently using that supports interfile analysis.\\n- Added **Clear filters** button when no findings appear in the **Findings** page after the user has set some filters.\\n- **API**: added ability to get rules metadata from the API.\\n\\n### Changed\\n\\n- Code analysis started by logged-in users running `semgrep ci` now includes cross-function (intrafile) analysis by default. This change affects CI jobs and CLI scans.\\n- `.phtml` files are now processed as PHP files and analyzed using PHP rules.\\n- Updated PR comments to include links to specific findings in Semgrep Cloud Platform.\\n- Users can see all projects, even if they don\'t have any identified findings, in the **Most findings** list on Semgrep Cloud Platform\'s **Dashboard** page. \x3c!-- https://github.com/semgrep/semgrep-app/pull/12870 --\x3e\\n- Semgrep Code now distinguishes between findings **resolved by rule changes** and findings **resolved due to code modifications**. This change applies only to new findings.\\n  - Only findings fixed due to **code modifications** are marked as **fixed**.\\n    - The fix rate calculated by Semgrep Code now includes only such findings.\\n  - Findings fixed due to rule changes are marked as **resolved**.\\n- **CLI**: Semgrep clones the repository into the current working directory instead of a `tmp` folder when using the `--remote` flag.\\n\\n### Fixed\\n\\n- **Kotlin**: Fixed a parsing error when a newline appears between the class name and the primary constructor.\\n- Fixed an issue where autofix on variable definitions could not handle semicolons for Java, C++, C#, Rust, Cairo, Solidity, and Dart.\\n- Fixed an issue with autofix application on lines with multi-byte characters.\\n- Fixed issue where credentials were inadvertently included in a project URL when publishing a custom rule using `semgrep publish`. Running `semgrep publish` generates a `rule-origin-note`, which includes the project URL in the metadata. When this process occurs in a GitLab CI job, GitLab includes the CI job tokens in the project URL. Semgrep now removes the credential from the metadata.\\n- Fixed an issue where reachability rules were deleted from Semgrep Registry.\\n- Fixed an issue where the timestamp on the findings didn\'t correspond to the timestamp used by the filter; now, both use the `relevant_since` filter, which provides information about when findings were last reopened.\\n\\n## \u26d3\ufe0f Supply Chain\\n\\n### Added\\n\\n- Supply Chain now offers [lockfile-only support](/supported-languages/#semgrep-supply-chain) for Swift projects.\\n\\n### Changed\\n\\n- Findings with a **critical** severity now display in Semgrep Cloud Platform with a darker red color to help distinguish them from high-severity findings.\\n- Findings are now displayed in Semgrep Cloud Platform with readable names, such as `git-url-parse: Inefficient Regular Expression Complexity` instead of `lodash.defaultsdeep: Improper Input Validation`.\\n\\n### Fixed\\n\\n- Fixed an issue where bulk triage didn\'t work in Semgrep Cloud Platform for Supply Chain findings.\\n- Fixed an issue where Supply Chain rules and findings erroneously display a confidence label.\\n\\n## \ud83e\udd16 Assistant\\n\\nSemgrep Assistant is **now generally available (GA)**. Read [the docs](/semgrep-assistant/overview/) and the [<i class=\\"fas fa-external-link fa-xs\\"></i> blog post](https://semgrep.dev/blog/2024/assistant-ga-launch).\\n\\n### Added\\n\\n- Added the **Agree** and **Ignore** buttons to the **No grouping** view in the **Semgrep Cloud Platform > Code** page.\\n- Added the AI **component tags** in the **Finding details** page and **No grouping** view. \x3c!-- 13419 --\x3e\\n- Added the ability to use AI to generate Semgrep rules (beta). To try this feature:\\n    1. Navigate to the [<i class=\\"fas fa-external-link fa-xs\\"></i> Editor](https://semgrep.dev/orgs/-/editor) and click on the **<span style={{color:\'#ffffff\'}}><span style={{backgroundColor:\'#000000\'}}><i class=\\"fa-solid fa-circle-plus\\"></i></span></span> black square with white circle plus sign**.\\n    2. Select **...with Semgrep Assistant (beta)** from the drop-down box.\\n    ![Generate rule with Semgrep Assistant form](/img/ai-generate-rule.png)\\n\\n### Changed\\n\\n- Improvements to in-app copy and UI. \x3c!-- 13399, 13352 --\x3e\\n\\n## \ud83d\udd10 Secrets\\n\\n### Added\\n\\n- Historical scanning is now available as a **public beta** feature. [<i class=\\"fa-regular fa-file-lines\\"></i> Historical scanning](/docs/semgrep-secrets/historical-scanning/) allows users to find valid secrets in their Git commit history. To enable this feature:\\n    1. Log in to Semgrep Cloud Platform.\\n    2. Navigate to **Settings** > **Deployments**.\\n    3. Under **Secrets**, toggle on **Historical scanning**.\\n  Users can also include the `--historical-secrets` flag when running `semgrep ci` in the CLI.\\n- Added the ability to view a Secrets rule if there\'s one that supersedes a Semgrep Code rule with similar functionality. These notifications are available in Semgrep Cloud Platform on:\\n  - The **Findings** and **Finding Details** pages\\n  - The **Policies** page\\n  In addition to the affected findings labeled with **Secrets version available**, users can look for findings using the **Available rule upgrades** filter.\\n\\n### Changed\\n\\n- Moved the **Settings** page for Secrets from its **Findings** page to **Settings** > **Deployment**.\\n\\n### Fixed\\n\\n- Fixed an issue where some Secrets findings were labeled as Code findings.\\n- **CLI**: Fixed an issue where there were no warnings if Secrets is enabled, but users have no Secrets rules configured.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Added the following new documents:\\n    - [<i class=\\"fa-regular fa-file-lines\\"></i> Packages in the Semgrep Docker image](/semgrep-ci/packages-in-semgrep-docker/): Lists the packages including in the Semgrep docker image in addition to the Semgrep binary.\\n    - [<i class=\\"fa-regular fa-file-lines\\"></i> Semgrep OSS in CI](/docs/deployment/oss-deployment/): A guide to using only open source Semgrep in your CI jobs.\\n- New Knowledge base article: [Generate lockfiles for Semgrep Supply Chain in a Circle CI pipeline](/kb/semgrep-supply-chain/ssc-lockfiles-circleci).\\n- Added information on [installing and using the Semgrep App for GitHub Enterprise](/deployment/connect-scm#connect-to-on-premise-orgs-and-projects) to connect to your GitHub orgs.\\n\\n### Changed\\n\\n- Major edits and updates to documentation for:\\n  - [Semgrep Secrets](/semgrep-secrets/getting-started)\\n  - [Semgrep Assistant](/semgrep-assistant/overview)\\n  - [Semgrep extension for Visual Studio Code](/extensions/semgrep-vs-code)\\n- Updated Semgrep Pro Engine documentation to clarify what is enabled by the **cross-file analysis** toggle in **Semgrep Cloud Platform > Settings**.\\n- Updated [**Findings** page information](/semgrep-code/findings).\\n- Updated SSO documentation with latest steps to integrate with [Microsoft Entra ID](/kb/semgrep-appsec-platform/saml-microsoft-entra-id).\\n- GitHub Actions configuration snippets have been updated to use `actions/checkout@v4`."},{"id":"february-2024","metadata":{"permalink":"/docs/release-notes/february-2024","source":"@site/release-notes/february-2024.md","title":"February 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-02-28T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":5.075,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"february-2024","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"February 2024","tags":["Release notes"],"date":"2024-02-28T10:00"},"unlisted":false,"prevItem":{"title":"March 2024","permalink":"/docs/release-notes/march-2024"},"nextItem":{"title":"January 2024","permalink":"/docs/release-notes/january-2024"}},"content":"The following updates were made to Semgrep in February 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\udd27 OSS Engine\\n\\n* The following versions of the OSS Engine were released in February 2024:\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.59.1](https://github.com/semgrep/semgrep/releases/tag/v1.59.1)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.60.0](https://github.com/semgrep/semgrep/releases/tag/v1.60.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.60.1](https://github.com/semgrep/semgrep/releases/tag/v1.60.1)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.61.1](https://github.com/semgrep/semgrep/releases/tag/v1.61.1)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.62.0](https://github.com/semgrep/semgrep/releases/tag/v1.62.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.63.0](https://github.com/semgrep/semgrep/releases/tag/v1.63.0)\\n\\n## \ud83c\udf10 Cloud Platform\\n\\n### Added\\n\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i> API](https://semgrep.dev/api/v1/docs/#tag/Finding/operation/semgrep_app.core_exp.findings.handlers.issue.openapi_list_recent_issues): Added a `rule` object under `findings` with the following fields:\\n    - `name`\\n    - `message`\\n    - `confidence`\\n    - `category`\\n    - `subcategories`\\n    - `technologies`\\n    - `vulnerability_classes`\\n    - `cwe_names`\\n    - `owasp_names` \x3c!-- 12868 --\x3e\\n- Added distinction between Pro engine and OSS findings in the Playground and Editor. \x3c!-- 12275 --\x3e\\n- Added support for the `linux-arm64` platform when you download Semgrep Pro Engine. \x3c!-- 12430 --\x3e\\n\\n### Changed\\n\\n- Updated the Semgrep Cloud Platform (SCP) login page. \x3c!-- 12744 --\x3e\\n- Updated the login process from the CLI to SCP. This change affects new users. \x3c!-- 12531 --\x3e\\n- Updated the Semgrep installation instructions for Docker. \x3c!-- 12531 --\x3e\\n- Improved performance of Semgrep Playground and Editor. \x3c!-- 12461 --\x3e\\n\\n### Fixed\\n\\n- Fixed a bug where the navigation sidebar covered the entire mobile screen and could not be collapsed. \x3c!-- 12876 --\x3e\\n- Scan summary links printed after users run `semgrep ci` now reflect a\\n  custom `SEMGREP_APP_URL` if set.\\n\\n## \ud83d\udcbb Code\\n\\n### Added\\n\\n* Support for C and C++ is now generally available (GA), including cross-file and cross-function analysis.\\n* Added new Pro rules for Elixir and the Phoenix framework, covering various security and correctness issues. These are available in the `p/elixir`\\n  ruleset.\\n* Added support for Python, with a focus on the Flask ecosystem, to the Semgrep\\n  Pro Engine.\\n* Added support for nested record patterns on the left-hand side of an\\n  assignment during dataflow analysis. For example, given `{ body: { param } } =\\n  tainted`, Semgrep correctly marks `param` as tainted.\\n* The `metavariable-regex` operator can now match on metavariables of interpolated strings\\n  that use variables with known values.\\n* **Taint analysis**:\\n  * Added support for Python constructors.\\n  * Added support for index sensitivity. Semgrep tracks taint on individual\\n    indexes of a data structure when these are constant values, either integers\\n    or strings, and the code uses the built-in syntax for array indexing.\\n  * Added `exact: false` as a `pattern-sources` sub-key so you can specify that anything inside a code region is a sink:\\n    ```yaml\\n        pattern-sources:\\n          - exact: false\\n            pattern: ...\\n    ```\\n  * When `exact: true` and `taint_assume_safe_functions: true`, Semgrep now\\n    considers that, if the specified formula isn\'t a `patterns` with a\\n    `focus-metavariable`, it must look for taint in the function call\'s arguments. For example:\\n    ```yaml\\n    ...\\n    options:\\n      taint_assume_safe_functions: true\\n    pattern-sources:\\n      - exact: false\\n        pattern: ...\\n    ```\\n\\n### Changed\\n\\n* Improved error handling during interfile analysis so Semgrep Code doesn\'t crash.\\n* **CLI**: If there are multiple errors resulting from the user running Pro\\n  rules without a license, the CLI groups all errors and reports a\\n  single warning.\\n* The project name for repositories scanned locally is `local_scan/<repo_name>`\\n  instead of `<repo_name>`.\\n* The **View Results** URL displayed for findings now includes the repository\\n  and branch names.\\n\\n### Fixed\\n\\n* Fixed an issue with incorrect autofix application where multiple fixes were\\n  applied to the same line.\\n* Fixed issue where tokens for type parameter brackets weren\'t stored correctly.\\n  They\'re now stored in the generic AST, allowing Semgrep to autofix\\n  these constructs correctly.\\n* Fixed an issue where Semgrep doesn\'t support multiple labels for taint\\n  traces. Now, Semgrep looks at the `requires` of the sink, and if it has the\\n  shape `A and ...`, it picks `A` as the preferred label and reports the\\n  trace.\\n* Fixed issue where taint signatures don\'t capture changes to parameter fields.\\n\\n## \u26d3\ufe0f Supply Chain\\n\\n### Added\\n\\n* Added support for parsing Swift Package Manager manifest files and lock files.\\n* Added the ability to filter for dependencies that Semgrep has commented on.\\n  \x3c!-- https://github.com/semgrep/semgrep-app/pull/12898 --\x3e\\n* Added manual review advice to GitHub PR comments. Certain Semgrep Supply Chain (SSC) findings require **manual review** to verify if the finding is reachable or not. \x3c!-- 12907 --\x3e\\n\\n### Fixed\\n\\n* Fixed issues with trailing newline parsing in `pyproject.toml` and\\n  `poetry.lock` files.\\n\\n## \ud83d\udd10 Secrets\\n\\n### Added\\n\\n- Added the following new rules:\\n  - Detection rules for Azure and AWS\\n  - Semantic secrets rules for Python, JavaScript, and TypeScript\\n  - Semantic rules for hard-coded credentials in bash for `curl` commands\\n- Added non-validator regex detection for databases, including MongoDB,\\n  Microsoft SQL Server, MySQL, Postgres, and Redis\\n- Added secrets rule management, which is accessible in Semgrep Cloud Platform\\n  by going to **Rules** > **Policies** > **Secrets**. This allows you to:\\n  - See all available rules\\n  - Set valid finding modes for the rules\\n  - Set invalid and error validation state modes across multiple rules\\n\\n### Fixed\\n\\n- Fixed an issue where the **Analysis method** filter in Semgrep Cloud Platform\\n  wasn\'t filtering correctly.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- The Semgrep docs sidebar has been reorganized to help users browse through the docs.\\n- Added a [series of guides](/deployment/core-deployment) to setting up Semgrep as part of a security program for your organization.\\n- Added a guide to setting up a [network broker](/semgrep-ci/network-broker) that facilitates secure access between Semgrep and your private network.\\n- Added [Experimental rules](/writing-rules/experiments/pattern-syntax) syntax reference.\\n- Added the following knowledge base articles:\\n    - [GitLab \\"Job\'s log exceeded limit\\" error](/kb/semgrep-ci/collect-gitlab-logs)\\n    - [Set up Jenkins pipeline projects for Bitbucket repositories](/kb/semgrep-ci/bitbuket-jenkins-pipeline-projects)\\n\\n### Changed\\n\\n- Updated the links within the [GitLab CI/CD configuration file](/semgrep-ci/sample-ci-configs/#sample-gitlab-cicd-configuration-snippet).\\n- Removed phone support from the docs.\\n- Updated the [Semgrep-Slack integration docs](/semgrep-appsec-platform/slack-notifications) to clarify requirements for posting to private channels.\\n- Updated the [sample GHA configuration file](/writing-rules/private-rules)for a CI job that publishes private Semgrep rules.\\n- Clarified the Semgrep Assistant [privacy policy](/semgrep-assistant/overview) on what data is stored.\\n- Updated [Semgrep Pro versus OSS](/docs/semgrep-pro-vs-oss) docs. \x3c!-- 1338 --\x3e\\n\\n### Fixed\\n\\n- Fixed formatting on GitHub PR comments documentation. Thank you to [parsiya](https://github.com/parsiya) for the fix.\\n- Various link fixes and Docker image updates."},{"id":"january-2024","metadata":{"permalink":"/docs/release-notes/january-2024","source":"@site/release-notes/january-2024.md","title":"January 2024","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2024-01-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.5,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"january-2024","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"January 2024","tags":["Release notes"],"date":"2024-01-30T10:00"},"unlisted":false,"prevItem":{"title":"February 2024","permalink":"/docs/release-notes/february-2024"},"nextItem":{"title":"December 2023","permalink":"/docs/release-notes/december-2023"}},"content":"The following updates were made to Semgrep in January 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\udd27 OSS Engine\\n\\n* The following versions of the OSS Engine were released in January 2024:\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.55.1](https://github.com/semgrep/semgrep/releases/tag/v1.55.1)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.55.2](https://github.com/semgrep/semgrep/releases/tag/v1.55.2)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.56.0](https://github.com/semgrep/semgrep/releases/tag/v1.56.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.57.0](https://github.com/semgrep/semgrep/releases/tag/v1.57.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.58.0](https://github.com/semgrep/semgrep/releases/tag/v1.58.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>1.59.0](https://github.com/semgrep/semgrep/releases/tag/v1.59.0)\\n\\n## \ud83c\udf10 Cloud Platform\\n\\n### Added\\n\\n* Semgrep\'s Visual Studio Code extension now runs natively on Windows machines.\\n* Added ability for organizations to test connections to GitHub and GitLab by going to\\n  **Settings** > **Source Code Managers**.\\n* Projects are now moved from the **Scanning** to **Not scanning** tab when the\\n  corresponding GitHub repository is archived.\\n* **CLI tool**:\\n  * Added color-coded severity icons, such as `\u276f\u276f\u2771`, to the CLI\\n  output for findings of known severity.\\n  * Metrics sent from the CLI and collected by Semgrep now include a breakdown of the number\\n  of findings per product.\\n  * Rules stored under a hidden directory, such as\\n  `dir/.hidden/myrule.yml`, are now processed when scanning with the `--config`\\n  flag.\\n\\n### Changed\\n\\n* Renamed the **Upgrade** page to **Usage & billing**.\\n* Redesigned the **Settings** > **Source Code Managers** page; changes include:\\n  * Renamed the **Remove SCM config** button to **Disconnect**.\\n  * Set the **Remove app** button to only show up for registered GitHub apps.\\n* Improved the page load times for the **Settings** > **Source Code Managers**\\n  page, especially for organizations with many source code managers connected.\\n* Updated de-duplication logic for users with multiple source code managers. \x3c!-- 12409, 12418 --\x3e\\n\\n### Fixed\\n\\n* Fixed an issue where paid subscribers couldn\'t submit support cases through\\n  the **Help** page.\\n* **CLI tool**:\\n  * Fixed an issue where multi-line comments in Dockerfiles weren\'t\\n  parsed correctly.\\n  * Fixed an issue where Semgrep used `/tmp` instead of the path set\\n    in the `TMPDIR` environment variable for the Semgrep cache.\\n  * Fixed an issue where Semgrep would error on reading a\\n    `nosemgrep` comment with multiple rule IDs.\\n\\n## \ud83d\udcbb Code\\n\\n### Added\\n\\n- **Swift**: Now supports typed metavariables, such as `($X : ty)`.\\n- **Java**: You can now use metavariable ellipses properly in function arguments, as statements, and as expressions. \x3c!-- (gh-9260)--\x3eFor instance, you may write the pattern:\\n    ```\\n    public $F($...ARGS) { ... }\\n    ```\\n- **C++ with Semgrep Pro Engine**: Improved translation of delete expressions to the dataflow so that\\nrecently added at-exit sinks work on them. Previously, delete expression at \\"exit\\" positions were not being properly recognized as such. \x3c!-- (pa-3339) --\x3e\\n\\n### Changed\\n\\n- Improved loading times for **Dashboard** and **Findings** pages.\\n- Redesigned the **Findings** page to display issues present on multiple branches,\\n  regardless of which branch is used as a filter.\\n\\n### Fixed\\n\\n- **Editor**: Fixed a bug where the editor could crash due to rules having more than one metadata subcategory.\\n- Fixed a bug in which **open** findings were counted differently between the **Code** and **Dashboard** pages in Semgrep Cloud Platform. The counts now match.  \x3c!-- 12319 --\x3e\\n- **Findings** page:\\n    - Fixed a bug in which leaving a note automatically triaged a finding. Now, the state of the finding does not change when a user leaves a note. \x3c!-- 12051 --\x3e\\n    - Fixed a bug in which **fixed** findings were triagable despite their already fixed state through the rule group checkbox. Now these findings are not triagable. \x3c!-- 11919 --\x3e\\n    - Fixed an issue where hovering over the Assistant\'s **Analyze** button caused the window to jitter.\\n\\n## \u26d3\ufe0f Supply Chain\\n\\n### Added\\n\\n* Added ability to manually create custom dependency exceptions under **Supply\\n  Chain** > **Settings**. This helps prevent blocking a pull request or merge\\n  request due to licensing issues. For example, if `bitwarden/cli@2023.9.0`,\\n  which has a GPL-3.0 license, is on the allowlist, setting a custom dependency\\n  exception means that the exclusion won\'t fail when upgrading to\\n  `bitwarden/cli@2023.9.1`.\\n\\n### Changed\\n\\n- **Vulnerabilities page**: Improved filtering performance. \x3c!-- 12162 --\x3e\\n- Software bill of materials (SBOM) generation is now generally available (GA). \x3c!-- 11956 --\x3e\\n- The **Dependencies** tab is now GA.\\n\\n### Fixed\\n\\n* Fixed an issue where Semgrep couldn\'t parse a Pipfile correctly if it had a\\n  `[dev-packages]` section.\\n* Fixed a bug where `Gemfile.lock` files with multiple `GEM` sections weren\'t parsed correctly.\\n\\n## \ud83d\udd10 Secrets (beta)\\n\\n### Fixed\\n\\n- Fixed a bug with custom secrets rules in which rule visibility could be set to `unlisted`. Now, to protect the privacy of secrets rules, users cannot set Secrets rules to any other visibility except for **private**. \x3c!-- 12039, 12040, 12025 --\x3e\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Added [legal information](/semgrep-assistant/privacy) about Semgrep Assistant. \x3c!-- 1308 --\x3e\\n- Added documentation about Semgrep Assistant\'s Component and Recommendation filters. \x3c!-- 1324 --\x3e\\n- Knowledge base articles:\\n    - Troubleshoot why [SAML stops working](/kb/semgrep-appsec-platform/saml-stops-working) \x3c!-- 1330 --\x3e\\n    - [Troubleshooting \\"You are seeing this because the engine was killed\\" on monorepos](/kb/semgrep-code/scan-engine-kill) \x3c!-- 1310 --\x3e\\n- Added guidance on running Semgrep Supply Chain scans [in the CLI](/semgrep-supply-chain/getting-started/#run-a-scan-using-the-cli ). \x3c!-- 1334 --\x3e\\n\\n### Changed\\n\\n\x3c!-- - Updated API docs to use the term `teams`. The use of the term `groups` is deprecated. --\x3e\\n- Updated the Semgrep Supply Chain [languages table](/supported-languages/#semgrep-supply-chain) to clarify that **lockfile-only** languages do not have reachable rules.\\n- Updated documentation on event triggers for diff-aware and full scans. \x3c!-- 1316 --\x3e\\n- Updated [Licensing](/licensing) documentation for Semgrep Supply Chain and Semgrep Secrets.\\n- Updated the [Findings](/docs/semgrep-code/findings) documentation page."},{"id":"december-2023","metadata":{"permalink":"/docs/release-notes/december-2023","source":"@site/release-notes/december-2023.md","title":"December 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-12-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":3.615,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"december-2023","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"December 2023","tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-12-30T10:00"},"unlisted":false,"prevItem":{"title":"January 2024","permalink":"/docs/release-notes/january-2024"},"nextItem":{"title":"November 2023","permalink":"/docs/release-notes/november-2023"}},"content":"The following updates were made to Semgrep in December 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\udd27 OSS Engine\\n\\n* The following versions of the OSS Engine were released in December 2023:\\n\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>\\n    1.52.0](https://github.com/semgrep/semgrep/releases/tag/v1.52.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>\\n    1.53.0](https://github.com/semgrep/semgrep/releases/tag/v1.53.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>\\n    1.54.0](https://github.com/semgrep/semgrep/releases/tag/v1.54.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i>\\n    1.54.1](https://github.com/semgrep/semgrep/releases/tag/v1.54.1)\\n\\n## \ud83c\udf10 Cloud Platform\\n\\n### Added\\n\\n* Semgrep IDE integrations now cache information about the current repository so\\n  that it doesn\'t traverse the entire repository on every scan to determine if\\n  the files are valid targets for scanning; this improves scan times.\\n* Users can now ignore findings locally in Semgrep IDE extensions. The changes\\npersist between restarts, though they\'re not reported back to Semgrep Cloud\\nPlatform and don\'t affect the remote repository or other users. Note that these findings\\nare still detected when Semgrep scans your code, typically when opening a pull\\nrequest or merge request.\\n* The metrics collected now include more granular information to help\\ndifferentiate scans using different engine capabilities, such as intraprocedural\\nscans without secrets validation versus intraprocedural scans *with* secrets\\nvalidation.\\n* **CLI tool**: Added new `semgrep test` subcommand, which is an alias for\\n`semgrep scan --test`. **Note**: If the **name** of the directory you are\\nscanning is `test`, use `semgrep scan test` to avoid confusion with the new\\n`semgrep test` subcommand.\\n\\n### Changed\\n\\n* **OCaml**: Switched to a tree-sitter-based parser instead of the Menhir\\n  parser.\\n* **Rust**: Updated the parser used for Rust.\\n\\n### Fixed\\n\\n* Fixed an issue where webhooks stopped working.\\n* Fixed an issue so that clicking **Start Tour** now restarts the Getting Started\\n  tutorial.\\n* Fixed an issue where the **Members** page doesn\'t display a user\'s new role until\\n  the page reloads. \x3c!--OS-1233--\x3e\\n* Fixed an issue where users switching organizations would result in a 404.\\n  \x3c!--OS-136--\x3e\\n* Fixed the **Connect to** button under **Settings** > **Source Code Managers**\\n  so that it displays correctly based on whether the user can connect to a\\n  source code manager. \x3c!-- https://github.com/semgrep/semgrep-app/pull/11812\\n  --\x3e\\n* **CLI tool**: Updated CLI error message to clarify that users should log in\\n  before running either:\\n  * `semgrep ci`\\n  * `semgrep scan --config`\\n\\n## \ud83d\udcbb Code\\n\\n### Fixed\\n\\n* Fixed an issue where Semgrep Code findings marked as **fixed** can be triaged through\\n  the rule group. Once a finding is fixed, its triage status can\'t be changed back\\n  to **ignored**.\\n  \x3c!--FIND-1453--\x3e\\n* Fixed an issue where the rule information card and the rule preview are missing\\n  for older findings; all findings now display this information.\\n  \x3c!--FIND-1433--\x3e\\n* Fixed an issue where the finding\'s severity displayed doesn\'t match the rule\'s\\n  severity once the rule has been updated. \x3c!--FIND-1397--\x3e\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Changed\\n\\n* Fixed an issue where empty tables in `pyproject.toml` files would fail to parse.\\n\\n## \ud83e\udd16 Assistant (beta)\\n\\n### Added\\n\\n* Added the **Analyze** button to Semgrep Cloud Platform\'s **Code** page, which\\ntriggers all Assistant functions on selected findings, including autofix, autotriage, and component\\ntagging. After Assistant performs these functions, users\\ncan see their results if they filter for findings based on **Recommendation** or\\nby **Component**. Additionally, users who choose **No Grouping** instead of\\n**Group by Rule** see false positive and true positive recommendations when\\nviewing their finding details pages.\\n\\n## \ud83d\udd10 Secrets (beta)\\n\\n### Added\\n\\n* Added support for custom validator rules, which can be written using Semgrep\'s\\n  Rules Editor and run using `semgrep ci --allow-untrusted-validators`. Note\\n  that custom validator rules are private and can\'t be shared to Semgrep\\n  Registry.\\n\\n### Fixed\\n\\n* Fixed an issue where the **Ignore** button doesn\'t work when triaging Secrets.\\n  \x3c!--SCRT-283--\x3e\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n* Added [Quickstart](/docs/getting-started/quickstart).\\n* Added [Privacy and legal considerations](/semgrep-assistant/privacy) information for Semgrep Assistant.\\n* New knowledge base articles:\\n  * [Fix pattern parse errors when running rules](/docs/kb/rules/pattern-parse-error)\\n  * [How to scan a large monorepo](/kb/semgrep-code/scan-engine-kill)\\n  * [Scanning a monorepo in parts](/kb/semgrep-ci/scan-monorepo-in-parts)\\n  * [SSO Error: Signature validation failed. SAML Response rejected](/docs/kb/semgrep-appsec-platform/saml-bad-signature)\\n  * [Troubleshooting \\"You are seeing this because the engine was killed\\" on monorepos](/docs/kb/semgrep-code/scan-engine-kill)\\n\\n### Changed\\n\\n* Updated overview articles for [Semgrep Code](/semgrep-code/overview) and\\n  [Semgrep Supply Chain](/docs/semgrep-supply-chain/overview).\\n* Updated documentation on setting up pull request or merge request comments for\\n  [GitHub](/docs/semgrep-appsec-platform/github-pr-comments),\\n  [GitLab](/docs/semgrep-appsec-platform/gitlab-mr-comments), and\\n  [Bitbucket](/category/bitbucket-pr-comments) users.\\n* General improvements to API docs, including clarification of usage\\n  instructions for Supply Chain and Secrets endpoints.\\n\\n### Fixed\\n\\n* Minor corrections and updates to various articles."},{"id":"november-2023","metadata":{"permalink":"/docs/release-notes/november-2023","source":"@site/release-notes/november-2023.md","title":"November 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-11-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":5.195,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"november-2023","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"November 2023","tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-11-30T10:00"},"unlisted":false,"prevItem":{"title":"December 2023","permalink":"/docs/release-notes/december-2023"},"nextItem":{"title":"October 2023","permalink":"/docs/release-notes/October-2023"}},"content":"The following updates were made to Semgrep in November 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n:::tip\\n- **Semgrep Pro Engine** is now generally available (GA). Team tier users and above can use the Pro Engine to perform **cross-file (interfile)** and **cross-function (intrafile)** analyses. To enable Semgrep Pro Engine:\\n    1. Sign in to [<i class=\\"fas fa-external-link fa-xs\\"></i> Semgrep Cloud Platform](https://semgrep.dev/login)\\n    1. Click **Settings**.\\n    1. Click the **<i class=\\"fa-solid fa-toggle-large-on\\"></i> Semgrep Pro Engine** toggle.\\n- See [<i class=\\"fa-regular fa-file-lines\\"></i> Semgrep Pro Engine](/semgrep-code/semgrep-pro-engine-intro) documentation for more information.\\n- The Semgrep command-line tool now requires **Python 3.8** or later.\\n:::\\n\\n## \ud83d\udd27 Semgrep OSS Engine\\n\\n:::note\\nBeginning with version 1.46.0, Semgrep is first released to:\\n- `pypy`\\n- `brew`\\n- `semgrep/semgrep:canary` (Docker)\\n\\nIf no issues are detected after a few days, the Semgrep team then promotes the `:canary` Docker tag to `:latest`.\\n:::\\n\\n- The following versions of Semgrep OSS Engine were released in November 2023:\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.47.0](https://github.com/semgrep/semgrep/releases/tag/v1.47.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.48.0](https://github.com/semgrep/semgrep/releases/tag/v1.48.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.49.0](https://github.com/semgrep/semgrep/releases/tag/v1.49.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.50.0](https://github.com/semgrep/semgrep/releases/tag/v1.50.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.51.0](https://github.com/semgrep/semgrep/releases/tag/v1.51.0)\\n\\n\\n## \ud83c\udf10 Semgrep Cloud Platform\\n\\n### Added\\n\\n- Semgrep now records the languages using interfile analysis during a scan. This enables the Semgrep team to measure new Pro Engine languages\' performance impact and error rates. **For scans that don\'t send metrics, there is no change.** See [<i class=\\"fas fa-external-link fa-xs\\"></i> Semgrep Privacy Policy](https://github.com/semgrep/semgrep/blob/develop/PRIVACY.md) for more information.\\n- Added a link to the SSO documentation to help users set up SSO. \x3c!-- 11485 --\x3e\\n- **CLI tool:** Added `--config code` and `--config secrets` flags to the `semgrep scan` command. When using these flags, the environment variable SEMGREP_REPO_NAME must be set. For example,\\n    ```\\n    $ SEMGREP_REPO_NAME=test_repo semgrep --config secrets\\n    ```\\n\\n### Changed\\n\\n- Elixir language support now requires the Pro Engine. To scan Elixir codebases, enable the Pro Engine. \x3c!-- 9308 --\x3e\\n- The Semgrep CLI tool now correctly counts the rules run on a codebase. Previously, Semgrep counted the total rules in the user\'s Policies or rulesets, including rules that did **not** have valid targets and therefore, did not actually run. \x3c!-- 9130  --\x3e\\n- Updated instances of **returntocorp** to **Semgrep**. \x3c!-- gh 112877 --\x3e\\n- **Semgrep Editor:** Rules created in the editor are private by default. This means only members of your organization can view rules you have created. To create a private rule visible only to you (an individual), ensure that you create the rule in your **individual account**. \x3c!-- 11267 --\x3e\\n- Improved error pages.\\n- <code>semgrep scan --config <em><b>PRODUCT_NAME</b></em></code>\xa0now uses the same endpoint as <code>semgrep ci</code>\xa0to fetch the scan configuration. You must be logged in when using these commands. You can continue running `semgrep scan` without logging in by providing configuration such as <code>--config auto</code>.\\n\\n\\n### Fixed\\n\\n- **API:** Fixed an issue where the severities filter did not return the correct value. \x3c!-- gh-11307 --\x3e\\n- **CLI tool:**\\n    - The `--severity=[VALUE]` option, which can be added to a `semgrep scan` command, has been fixed. \x3c!-- gh-9062 --\x3e\\n    - The `--sarif` flag no longer crashes when Semgrep itself encounters errors.\\n- Semgrep now refuses to run incompatible versions of the Pro Engine, rather than crashing and returning a confusing error message. \x3c!-- (gh-8873) --\x3e\\n- Fixed an issue where the CI provider icons disappeared from the **Scan new project in CI** window. The icons now appear. \x3c!-- 11228 --\x3e\\n- Implemented minor fixes for the new onboarding flow. \x3c!-- 11209, 11207 --\x3e\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Changed\\n\\n- **Scanning timeout:** The timeout per rule and per file has increased from 2 seconds to 5 seconds.\\n\\n### Fixed\\n\\n- **Findings page:** Fixed an issue where filtering by repositories wasn\'t working. \x3c!-- (11414) --\x3e\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Fixed\\n\\n-  **Slack messages:**\\n    - Improved readability of Semgrep Supply Chain messages by adding new lines between sections. \x3c!-- (11396) --\x3e\\n    -  Fixed links that were not working. \x3c!-- (11210) --\x3e\\n- Fixed out-of-bounds list access error in `Cargo.lock` parser. \x3c!-- (sc-1072) --\x3e\\n\\n## \ud83d\udd10 Semgrep Secrets (beta)\\n\\n### Added\\n\\n- Added an optional\xa0`--no-secrets-validation`\xa0flag to skip secrets validation. To run a Secrets scan without validation, use the command `semgrep ci --secrets --no-secrets-validation`.\\n- **Secrets and Secrets details page:** Added a **<i class=\\"fa-solid fa-ticket\\"></i> ticket icon** to quickly inform users if a ticket has been created for the finding.\\n\\n### Changed\\n\\n- Semgrep Secrets now bypasses targets defined in `.semgrepignore`. This means that files not typically part of a SAST or SCA scan scope, such as configuration files, are now scanned by Semgrep Secrets. Broadening the scope of Semgrep Secrets scans means it is more likely to find leaked secrets.\\n    - Previously, Semgrep Secrets excluded targets from `.semgrepignore`. Your findings count may increase with this change.\\n    - You can still define exclusions from Secrets scanning. To **exclude targets** from Secrets scanning, define files or paths for exclusion in Semgrep Cloud Platform:\\n        1. Click **Projects**.\\n        1. Click the Project\'s **<i class=\\"fa-solid fa-gear\\"></i> icon**.\\n        1. Add exclusions through the **Path ignores** text box.\\n    - In the future, Semgrep will enable users to define ignores based on the type of scan, whether SAST, SCA, or Secrets. \x3c!-- 9125 (https://github.com/semgrep/semgrep/pull/9125 --\x3e\\n\\n### Fixed\\n\\n- Fixed an issue where the Secrets page could freeze due to too many findings. \x3c!-- (11254) --\x3e\\n- Fixed a bug where enabling the Secrets beta causes the default scan mode to be set to OSS Engine, even when the Pro flag is turned on in the web UI. \x3c!-- (ea-248) --\x3e\\n- Metadata overrides specified in validators were incorrectly applied on top of one another (on a per-rule basis), so that only the last was applied. Each update is now correctly applied independently to each finding based on the rule\'s validators. \x3c!-- (scrt-231) --\x3e\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n- Added [<i class=\\"fa-regular fa-file-lines\\"></i> IntelliJ extension](/extensions/semgrep-intellij) documentation.\\n- Added a [<i class=\\"fa-regular fa-file-lines\\"></i> guide to exporting SBOMs](/semgrep-supply-chain/glossary).\\n\\n### Changed\\n\\n- Improved [<i class=\\"fa-regular fa-file-lines\\"></i> Semgrep Pro Engine](/semgrep-code/semgrep-pro-engine-intro) documentation with a new example and updated definitions.\\n- Updated [<i class=\\"fa-regular fa-file-lines\\"></i> Troubleshooting Semgrep in CI](/troubleshooting/semgrep-app)\\n- Clarified language around [Semgrep and source code managers](/deployment/connect-scm).\\n- Added a section about additional permissions required to run Semgrep Assistant.\\n\\n### Fixed\\n\\n- Minor corrections and updates to various articles."},{"id":"October-2023","metadata":{"permalink":"/docs/release-notes/October-2023","source":"@site/release-notes/october-2023.md","title":"October 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-10-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":3.575,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"October-2023","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"title":"October 2023","tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-10-30T10:00"},"unlisted":false,"prevItem":{"title":"November 2023","permalink":"/docs/release-notes/november-2023"},"nextItem":{"title":"September 2023","permalink":"/docs/release-notes/september-2023"}},"content":"The following updates were made to Semgrep in October 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\udd27 Semgrep OSS Engine\\n\\n- The following versions of Semgrep OSS Engine were released in October 2023:\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.43.0](https://github.com/semgrep/semgrep/releases/tag/v1.43.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.44.0](https://github.com/semgrep/semgrep/releases/tag/v1.44.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.45.0](https://github.com/semgrep/semgrep/releases/tag/v1.45.0)\\n  - [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.46.0](https://github.com/semgrep/semgrep/releases/tag/v1.46.0)\\n\\n## \ud83c\udf10 Semgrep Cloud Platform\\n\\n### Added\\n- Added a button to **Remove** source code manager (SCM) apps. This is helpful when you have a misconfigured SCM app, such as GitHub\'s `semgrep-app`, and want to reinstall it. \x3c!--(10688)--\x3e To remove an SCM, click **<i class=\\"fa-solid fa-gear\\"></i> Settings > Source code managers**.\\n    ![Remove your source code manager](/img/settings-scm-remove.png)\\n- Added Semgrep Assistant to the new **Getting started** guide in the onboarding flow. \x3c!--(10716) --\x3e\\n- **OpenAPI:** Renamed instances of r2c to Semgrep. \x3c!--(10685) --\x3e\\n- **CLI login:** New users are now directed to create a Semgrep org when they are logging in for the first time to Semgrep Cloud Platform from the CLI. \x3c!-- (10596) --\x3e\\n\\n### Changed\\n\\n- Updated the default CircleCI YAML snippet to include full and diff scans. \x3c!-- (#10678) --\x3e\\n\\n### Fixed\\n\\n- Fixed UI issues in the new onboarding flow.\\n- Fixed an issue where Semgrep Cloud Platform could crash during the onboarding flow. \x3c!--(#10940) --\x3e\\n- Various frontend fixes and improvements to the following:\\n\\t- Finding detail page\\n\\t- Projects page\\n- Fixed an issue where the **Delete user** functionality did not work for some Semgrep orgs. \x3c!-- (#10756) --\x3e\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Fixed\\n\\n- Speed and stability improvements across the product. Semgrep Code pages, such as Findings and Policies, now load faster.\\n- **Semgrep Assistant:** Component tags are now visible for all Assistant users.\\n    - **Component tags** use GPT-4 to categorize a finding based on its function, such as:\\n        - Payments\\n        - User authentication\\n        - Infrastructure\\n    - By categorizing your code through component tags, Semgrep Assistant is able to help you prioritize **high-risk issues**, for example if Semgrep has detected a code finding related to payments or user authentication.\\n    ![Semgrep Assistant Component tag list](/img/assistant-component-tags.png)\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n- Added a new, public [<i class=\\"fas fa-external-link fa-xs\\"></i> Semgrep Supply Chain API](https://semgrep.dev/api/v1/docs/#tag/SupplyChainService) where you can filter and query third-party vulnerability findings by a variety of parameters, such as:\\n    - Severity\\n    - Repository\\n    - Exposure\\n- **C# reachability** is now **GA (generally available)**. Semgrep Supply Chain has added reachability rule support for all C# CVEs from May 2022 onward.\\n- **SBOM export:** Add vulnerabilities enriched with reachability analysis to export SBOMs. \x3c!-- (#10879 ) --\x3e\\n- Dependency license scanning:\\n    - Added support for NuGet (C#) license detection. \x3c!-- (10777) --\x3e\\n    - Added support for RubyGems (Ruby) license detection.\\n- **Advisories:** Added a tooltip displaying the date when a CVE Numbering Authority (CNA) created the security advisory. [<i class=\\"fas fa-external-link fa-xs\\"></i> CVE Numbering Authorities](https://nvd.nist.gov/general/cve-process) include the MITRE Corporation. These dates are not assigned by Semgrep, Inc. \x3c!-- (10743) --\x3e\\n![Tooltip of advisory creation date](/img/advisories-date-created.png)\\n\\n### Changed\\n\\n- **SBOM (software bill of materials) export:** The name of the exported SBOM file now follows the following format: `sbom-<org_name>-<repo_name>-<MM-DD-YY_H-m-s>--<serial_number>.<xml|json>` \x3c!-- (10850) --\x3e\\n\\n### Fixed\\n\\n* **SBOM export:** Fixed an issue where SBOM export failed when encountering dependencies with empty names.\\n* **Vulnerabilities page:** Fixed an issue where triage states did not update until a page refresh. Triage states now update as the user performs a triage action. \x3c!-- (10887) --\x3e\\n\\n## \ud83d\udd10 Semgrep Secrets (beta)\\n\\n### Added\\n\\n- Semgrep Secrets is now in **public beta**.\\n- **Projects page:** Added a new column to display a Semgrep Secrets counter. This counter counts all secrets regardless of validation state. \x3c!--(10588)--\x3e\\n\\n### Fixed\\n\\n- Fixed links to branches in GitLab self-hosted repositories. \x3c!-- (#10897) --\x3e\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n- Added Semgrep Secrets documentation:\\n\\t- [<i class=\\"fa-regular fa-file-lines\\"></i> Conceptual overview of Semgrep Secrets](/semgrep-secrets/conceptual-overview)\\n\\t- [<i class=\\"fa-regular fa-file-lines\\"></i> Getting started with Semgrep Secrets](/semgrep-secrets/getting-started)\\n- Added [<i class=\\"fa-regular fa-file-lines\\"></i> Repository rulesets](/kb/semgrep-ci/github-repository-rulesets-semgrep) knowledge base article. This article explains how to scale Semgrep across many GitHub repositories.\\n- Created an automated job to sync the help output of the Semgrep CLI tool with [<i class=\\"fa-regular fa-file-lines\\"></i> CLI reference](/cli-reference).\\n\\n### Changed\\n\\n- The [<i class=\\"fa-regular fa-file-lines\\"></i> Policies](/semgrep-code/policies) documentation has been improved.\\n\\n### Fixed\\n\\n* Various improvements to knowledge base articles."},{"id":"september-2023","metadata":{"permalink":"/docs/release-notes/september-2023","source":"@site/release-notes/september-2023.md","title":"September 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-09-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.125,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"september-2023","append_help_link":true,"title":"September 2023","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-09-30T10:00"},"unlisted":false,"prevItem":{"title":"October 2023","permalink":"/docs/release-notes/October-2023"},"nextItem":{"title":"August 2023","permalink":"/docs/release-notes/august-2023"}},"content":"The following updates were made to Semgrep in September 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n:::info\\n* Moving forward, these release notes cover the following products:\\n    * Semgrep Cloud Platform\\n    * Semgrep Code\\n    * Semrep Supply Chain\\n    * Semgrep Assistant (beta)\\n    * Semgrep documentation and knowledge base\\n* Refer to **Semgrep OSS** release notes in [<i class=\\"fas fa-external-link fa-xs\\"></i> Semgrep GitHub > Releases](https://github.com/semgrep/semgrep/releases/) as the source of truth for OSS releases.\\n:::\\n\\n## Private beta sign-ups\\n\\n* **Semgrep Secrets** is a code scanner that detects exposed API keys, passwords, and other credentials. Sign up for the private beta by filling out the [<i class=\\"fas fa-external-link fa-xs\\"></i> Semgrep Secrets Beta](https://get.semgrep.dev/secrets-beta-request.html) form.\\n* **Semgrep Supply Chain SBOM (software bill of materials)** enables you to export a list of dependencies in the CycloneDX 1.4 XML/JSON format. Sign up for the private beta by filling out the [<i class=\\"fas fa-external-link fa-xs\\"></i> SSC SBOM Export](https://get.semgrep.dev/SBOM-Export-private-beta.htm) form.\\n\\n## \ud83d\udd27 Semgrep OSS Engine\\n\\n* The following versions of Semgrep OSS Engine were released in September 2023:\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.38.0](https://github.com/semgrep/semgrep/releases/tag/v1.38.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.39.0](https://github.com/semgrep/semgrep/releases/tag/v1.39.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.40.0](https://github.com/semgrep/semgrep/releases/tag/v1.40.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.41.0](https://github.com/semgrep/semgrep/releases/tag/v1.41.0)\\n  * [<i class=\\"fas fa-external-link fa-xs\\"></i> 1.42.0](https://github.com/semgrep/semgrep/releases/tag/v1.42.0)\\n\\n## \ud83c\udf10 Semgrep Cloud Platform\\n\\n### Added\\n\\n- UX: Added a new **onboarding** flow. This onboarding flow streamlines the following steps to ensure that users are able to quickly set up Semgrep scans: \x3c!-- #10473 --\x3e\\n\\t- **Deployment creation**. The Semgrep team has made improvements to Semgrep account creation and connecting your source code manager, such as GitHub or GitLab.\\n\\t- **Onboarding checklist.** This helps you troubleshoot and resolve any issues early on in your journey.\\n\\t- **Tour of features**. Make the most of your Semgrep experience by learning what features are available to you.\\n- Logging into Semgrep Cloud Platform through the CLI associates your CLI user ID to your Semgrep Cloud Platform account. See the [<i class=\\"fas fa-external-link fa-xs\\"></i> Anonymous User ID](https://github.com/semgrep/semgrep/blob/develop/metrics.md#anonymous-user-id) section for more details.\\n\\n### Changed\\n\\n- **SCM configuration:** Improved the **Delete message** when deleting SCMs, so that you are aware of the implications of removing an SCM. Many major Semgrep features rely on a connection with your source code manager, so take care when deleting SCMs.\\n- **GitHub:** Semgrep no longer automatically associates a new user\'s Semgrep organization with their personal GitHub account. New users can still connect their Semgrep organization with their personal account.\\n\\n### Fixed\\n\\n- **GitLab:** Fixed the GitLab CI sample configuration file to help users onboard GitLab repositories more clearly. In particular, the configuration file now includes the `GITLAB_TOKEN` environment variable, which was previously only in the docs.\\n- Fixed a timeout issue when syncing large numbers (15,000+) of GitHub repositories in Semgrep Cloud Platform.\\n- Fixed performance issues when synchronizing Semgrep Cloud Platform Projects with their corresponding GitHub repositories \x3c!-- 10156 --\x3e\\n\\n## \ud83d\udcbb Semgrep Code\\n\\n### Changed\\n\\n- **Findings page:** By default, the findings page now displays findings from **default (trunk or main) branches**. You can customize this filter by selecting a value from the **Branch** drop-down menu.\\n\\n### Fixed\\n\\n- Various UX/UI bugfixes in the Findings page.\\n\\n## \u26d3\ufe0f Semgrep Supply Chain\\n\\n### Added\\n\\n- **Filtering:** Allow users to select more than one branch at a time.\\n\\n## \ud83e\udd16 Semgrep Assistant (beta)\\n\\n### Added\\n\\n- **GitLab:** Semgrep Assistant now supports GitLab cloud hosted and self-managed repositories.\\n- **Findings page**: Semgrep Assistant verdicts now appear in the Findings page if Assistant recommends that the finding should be **Ignored**. \x3c!-- #10438 --\x3e\\n![Sample finding entry with Semgrep Assistant verdict](/img/sept-2023-assistant-findings.png)\\n- **Finding Details page:** For findings with autofixes, the finding\'s detail page includes a link to the PR comment with the autofix since the PR comment allows for directly committing the autofix. \x3c!-- #10516 --\x3e\\n\\n### Fixed\\n\\n- **GitLab:** Fixed a bug in which comments were not appearing on GitLab.com cloud-hosted repositories.\\n\\n## \ud83d\udcdd Documentation and knowledge base\\n\\n### Added\\n\\n* New knowledge base articles:\\n    * [<i class=\\"fa-regular fa-file-lines\\"></i> Failed to run a Git command during pull request or merge request scans](/kb/semgrep-ci/git-command-errors)\\n    * [<i class=\\"fa-regular fa-file-lines\\"></i> How to exclude certain file types for a particular rule](/kb/rules/exclude_rule_for_certain_filetypes)\\n    * [<i class=\\"fa-regular fa-file-lines\\"></i> Why isn\u2019t Semgrep reporting all my tainted data flows?](/kb/semgrep-code/finding_all_taints)\\n    * [<i class=\\"fa-regular fa-file-lines\\"></i> How to scan multiple or nested lock files](/kb/semgrep-supply-chain/scanning_multiple_lockfiles)\\n* [<i class=\\"fa-regular fa-file-lines\\"></i> Semgrep Assistant](/semgrep-assistant/getting-started#enable-assistant): Added a guide to setting up Assistant on GitLab MRs.\\n* [<i class=\\"fa-regular fa-file-lines\\"></i> Supported languages](/supported-languages#language-maturity-levels): Added a section on Semgrep Pro Engine language maturity factors. These are the criteria that determine if a language is generally available (GA) or beta.\\n### Changed\\n\\n* Integrated **Ask** (GPT-powered chat) and **Search** functions into one modal.\\n* Clarifications on various Semgrep Supply Chain behaviors.\\n* [<i class=\\"fa-regular fa-file-lines\\"></i> Sample CI configurations](/semgrep-ci/sample-ci-configs):  Updated various CI configurations for standalone SAST scans.\\n* A clarification has been added on [Semgrep exit codes in conjunction with the `error` flag](/cli-reference#exit-codes). Thank you to [Bernardo de Araujo](https://github.com/bernardoamc) for this contribution.\\n\\n### Removed\\n\\n* Semgrep CLI autocomplete documentation has been removed."},{"id":"august-2023","metadata":{"permalink":"/docs/release-notes/august-2023","source":"@site/release-notes/august-2023.md","title":"August 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-07-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":8.005,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"august-2023","append_help_link":true,"title":"August 2023","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-07-30T10:00"},"unlisted":false,"prevItem":{"title":"September 2023","permalink":"/docs/release-notes/september-2023"},"nextItem":{"title":"July 2023","permalink":"/docs/release-notes/july-2023"}},"content":"The following updates were made to Semgrep in August 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep OSS Engine\\n\\n:::caution\\nSemgrep version 1.38.0 removed some features. This change may break your Semgrep workflows. See [Semgrep OSS > Removed](#removed) for more information.\\n:::\\n\\nThis section of release notes includes upgrades of Semgrep OSS Engine for versions between **1.35.0** and **1.38.3**.\\n\\n### Added\\n\\n- Added optional `min-version` and `max-version` fields for a Semgrep rule, specifying a range of compatible Semgrep versions.\\n    - If a rule is incompatible with the version of Semgrep being used, it is reported in the JSON output at the newly added `info` level, which doesn\'t cause an exit failure. ([#8496](https://github.com/semgrep/semgrep/pull/8496/))\\n- The `semgrep scan` command is now more resilient to failures when fetching a configuration file (config) from Semgrep servers.\\n    - If it can\'t fetch a config from Semgrep servers it will use backup infrastructure to fetch the most recent successful config for that customers environment. ([#8459](https://github.com/semgrep/semgrep/pull/8459/))\\n- `metavariable-comparison`: You can now use `in` and `not in` for strings in the same sense as in Python, for substring checking. ([#2979](https://github.com/semgrep/semgrep/pull/8406))\\n- The CLI now collects the commit timestamp when running `semgrep ci`.\\n- Added support for languages with case insensitive identifiers and generalized PHP to use these case insensitive identifiers.\\n  - For example, in PHP the pattern `MyClass()` now matches calls with different capitalizations such as `myclass()` and `Myclass()`. ([#8356](https://github.com/semgrep/semgrep/pull/8356))\\n- **Julia:** Added the deep expression operator. Now you can write patterns such as `foo(<... 42 ...>)` to find instances of calls to `foo` that contain `42` somewhere inside of it. ([#8540](https://github.com/semgrep/semgrep/pull/8540))\\n\\n### Fixed\\n\\n- Fixed `--text` and `--output` flags which broke in 1.38.0. If you are using version 1.38.0, update Semgrep to receive these fixes.\\n- Converted all \'@r2c.dev\' email addresses to \'@semgrep.com\'. Several error messages displayed outdated email addresses. With this fix, you can now see in the CLI the correct email to reach out to the Semgrep Support team, which is [support@semgrep.com](mailto:support@semgrep.com). ([#8446](https://github.com/semgrep/semgrep/pull/8446))\\n- Fixed CLI output to display matches from different rules with the same message. Now you are able to see the rule ID granularly even if two rules have the same rule message. ([#8557](https://github.com/semgrep/semgrep/pull/8557))\\n- Semgrep PyPI package can now be installed on **aarch64 libmusl** platforms such as Alpine. (gh-8565)\\n- Improved the `--max-memory` help description to make it clearer. Its previous message, \\"Defaults to 0 for all CLI scans,\\" did not convey that the default is 0 for all scans except when using Semgrep Pro Engine in CI scans. The default is 5000MiB for Semgrep Pro Engine CI scans, defined as:\\n    - Any scan using the `semgrep ci --pro` command, whether in a local environment or a CI/CD pipeline.\\n    - Any scan using the `semgrep ci` command with Pro Engine enabled in Semgrep Cloud Platform for the org whose repositories you are scanning.\\n- Fixed a regression introduced three years ago in 0.9.0, when optimizing the evaluation of the ellipsis operator `...` to be faster. The ellipsis only matched deeply, such as inside an if block, if it did not match anything non-deeply, thus causing that this pattern:\\n  ```\\n  foo()\\n  ...\\n  bar($A)\\n  ```\\n  would only produce a single match rather than two on this code:\\n  ```\\n  foo()\\n  if cond:\\n      bar(x)\\n  bar(y)\\n  ```\\n  Semgrep matched from `foo()` to `bar(y)` and because of that it did not try to match inside the `if`, thus there was no match from `foo()` to `bar(x)`. However, commenting out `bar(y)`, results in Semgrep matching `bar(x)`. Semgrep now produces the two expected matches. ([#8440](https://github.com/semgrep/semgrep/pull/8440))\\n- **Semgrep VSCode Extension:** Semgrep Language Server Protocol (LSP) is now compiled with `tls`. It should no longer cause crashes when running the Semgrep VSCode extension.\\n- **PromQL:** make aggregation labels independent of order. ([#8399](https://github.com/semgrep/semgrep/pull/8399)).\\n  For example:\\n  ```\\n  \\"sum by (..., b, a, c, ...) (X)\\"\\n  ```\\n  should match\\n  ```\\n  \\"sum by (a,b,c) (X)\\"\\n  ```\\n- **Julia:** Fixed a bug where `let end` blocks were not being parsed correctly, causing their contents to not strictly match while inside of a block. For example, `let ... end` didn\'t count as being inside of the `let` block, and would match everything. ([#8569](https://github.com/semgrep/semgrep/issues/8569))\\n- **Julia:** correctly parse `BitOr` and `BitAnd` ([#8449](https://github.com/semgrep/semgrep/issues/8449))\\n- **Julia:** Fixed a bug where parenthesized expressions sometimes did not match in constructs such as metavariable-comparison. ([#8444](https://github.com/semgrep/semgrep/issues/8444))\\n- **Julia:** Type information from declarations can now be used in metavariable-type. For instance, the program:\\n  ```\\n  x :: Int64 = 2\\n  ```\\n  now allows uses of x to match to the type Int64. ([#8470](https://github.com/semgrep/semgrep/issues/8470))\\n- **Julia:** Metavariables are now able to appear anywhere that identifiers can. For instance, they were not able to appear as the argument to a `do` block. ([#8486](https://github.com/semgrep/semgrep/issues/8486)) Now, you can write patterns such as:\\n```\\nmap($Y) do $X\\n  ...\\nend\\n```\\n- **Java:** Fixed a naming bug affecting Java and other object-oriented (OO) languages that allowed a method parameter to shadow a class attribute. For example, in:\\n  ```\\n  class Test {\\n\\n      private int x;\\n\\n      public void test2(int x) {\\n          foo(this.x);\\n      }\\n\\n  }\\n  ```\\n  Semgrep was considering that `this.x` referred to the parameter `x` of `test2` rather than to the class attribute `x`. ([#8508](https://github.com/semgrep/semgrep/pull/8508))\\n\\n\\n### Changed\\n\\n- Running the `semgrep`  command with no subcommand now displays the help message. Previously, the `semgrep` command ran a SAST scan by default.\\n\\n### Removed\\n\\n- `python -m semgrep` has been removed. Instead, invoke Semgrep directly by entering `semgrep` in the CLI.\\n- Semgrep no longer looks for a `.semgrep.yml` config file or `.semgrep/` in the current directory, which previously caused conflicts when invoking `semgrep` from your home directory. This is because the home directory can contain a `.semgrep/settings.yml` file that is not a Semgrep rule, despite Semgrep expecting a rule file. ([#4457](https://github.com/semgrep/semgrep/issues/4457))\\n  - The preferred method to run rules is to explicitly pass rules through the `--config` option. For example, to run a `.semgrep.yml` file containing rules, you must enter `semgrep --config .semgrep.yml`.\\n- If you previously wrapped Semgrep Python code by calling `semgrep_main.main`, you must replace the previous call with `run_scan.run_scan`. Note that these Python calls will be removed in the future.\\n- `--enable-metrics` and `--disable-metrics` have been removed. Instead, use any of the following:\\n  - `--metrics=on`\\n  - `--metrics=off`\\n  - `--metrics=auto`\\n\\n## Semgrep Pro Engine\\n\\n\x3c!-- Separated pro engine because it is proprietary --\x3e\\n\\n### Fixed\\n\\n- **JavaScipt (JS) or TypeScript (TS) taint mode:** fixed a bug introduced in 1.33.1 that had the side-effect of hurting performance of taint rules on JS or TS repositories that used destructuring in a function\'s formal parameters.\\n\\n## Semgrep Cloud Platform\\n\\n### Added\\n\\n- The `semgrep ci` command now displays enabled products when the scan config is generated from Semgrep Cloud Platform. Additionally, if no products are enabled then a friendly error is raised and the scan is stopped. You must enable a product in Semgrep **Cloud Platform > Settings** to start a scan.\\n- You can now remove your SSO configuration. Previously, you had to reach out to [support@semgrep.com](mailto:support@semgrep.com) to remove an SSO configuration. To remove your SSO configuration, go to **[Settings > Access > SSO](https://semgrep.dev/orgs/-/settings/)**.\\n- **Projects page:** Added a **Sync projects** button which enables you to synchronize your Semgrep projects with your SCM. This enables you to onboard projects faster to the Semgrep Cloud Platform and ensure all your repositories are represented and available for scanning.\\n\\n## Semgrep Code\\n\\n### Added\\n\\n- **Rules page:** Added a new view, **Group by vulnerability class**, that is the default view within the Rules page.\\n- Added a **last updated** attribute to rule cards. This helps you troubleshoot unexpected findings in unchanged configs.\\n- Added a **<i class=\\"fa-regular fa-clipboard\\"></i> Copy rule** button within the rule popup.\\n\\n## Semgrep Supply Chain\\n\\n### Added\\n\\n- Added **lockfile-only rules** for the following languages:\\n  - C#\\n  - PHP\\n\\n### Fixed\\n\\n- **PNPM:** Fixed a bug where dependencies in `pnpm-lock.yaml` at version 6.0 and up were not parsed.\\n- **Gradle:** Fixed an issue where packages in `build.gradle` files had their names incorrectly parsed without their group ID.\\n\\n### Removed\\n\\n- Removed the ability to turn off scanning with lockfile-only rules. Moving forward, lockfile-only rules are included in all full scans.\\n\\n## Semgrep Assistant (beta)\\n\\n### Fixed\\n\\n- **GitHub:** Fixed a bug in which you could receive duplicate PR comments if you had installed more than one instance of `semgrep-app`.\\n- **Slack notifications:** Previously, clicking the **Agree** button in a Slack Assistant message did not triage the original issue created. Now, if Semgrep Assistant suggests that a finding is safe to ignore, clicking Agree also triages the finding to Ignored.\\n- Various bugfixes and improvements.\\n\\n## Documentation and knowledge base updates\\n\\n### Added\\n\\n- Added a section on Semgrep Code\'s [deduplication behavior in the API](/semgrep-code/remove-duplicates) and expanded on deduplication behavior in Semgrep Cloud Platform.\\n- A new section has been added to guide you through [infrastructure-specific configuration when setting up Semgrep Cloud Platform](/semgrep-supply-chain/setup-infrastructure) for the first time.\\n- Added section on how a future [change in a Semgrep Supply Chain rule affects scan behavior](/semgrep-supply-chain/getting-started/#schedule-scans).\\n- Added a section describing how SSC\'s License compliance feature handles [packages with multiple licenses](/semgrep-supply-chain/license-compliance/#multiple-license-types).\\n- Added the following knowledge base articles:\\n  - [Running Semgrep in Visual Studio Code on Windows](/kb/integrations/semgrep-vs-code-windows)\\n  - [Matching multiple tokens with ellipsis metavariables](/kb/rules/ellipsis-metavariables)\\n\\n### Changed\\n\\n- The [Getting started with Semgrep Cloud Platform](/deployment/core-deployment) page has been rewritten to help you onboard yourself, your team or organization, and your repositories to SCP.\\n- Prefer the `semgrep ci` command to execute Semgrep in several quickstart and getting started guides.\\n- Updated Supported languages table for Swift, Rust, and Apex.\\n\\n### Removed\\n\\n- **Rule board documentation** has been removed. Refer to the [Policies](/semgrep-code/policies) documentation for information on rule management in Semgrep Cloud Platform."},{"id":"july-2023","metadata":{"permalink":"/docs/release-notes/july-2023","source":"@site/release-notes/july-2023.md","title":"July 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-07-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":8.5,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"july-2023","append_help_link":true,"title":"July 2023","hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-07-30T10:00"},"unlisted":false,"prevItem":{"title":"August 2023","permalink":"/docs/release-notes/august-2023"},"nextItem":{"title":"June 2023","permalink":"/docs/release-notes/june-2023"}},"content":"The following updates were made to Semgrep in July 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep OSS Engine\\n\\nThis section of release notes includes upgrades of Semgrep OSS Engine for versions between **1.31.0** and **1.34.1**.\\n\\n### Added\\n\\n* Added rule option `interfile: true`, which is set under the `options` key. This is now the preferred method of setting `interfile` to `true`. While `interfile` can still be set under the `metadata` key, this should be avoided because metadata is not meant to have any effect on how a rule is run.\\n* Added new `--legacy` flag to force the use of the Python implementation of Semgrep (also known as \'pysemgrep\'). Note that by default most `semgrep` commands are still using the Python implementation (except `semgrep interactive`), so in practice you don\'t need to add this flag, but as Semgrep Inc. ports more commands to OCaml, the new `--legacy` flag might be useful if you find some regressions.\\n* Julia: Added support for metavariable type.\\n* PromQL (Prometheus Query Language): Initial language support. Thank you to [Michael Hoffman](https://github.com/MichaHoffmann) for his contribution! ([#8281](https://github.com/semgrep/semgrep/pull/8281))\\n\\n* PromQL: Added `parse_promql_duration` function to convert a PromQL duration into milliseconds([#8381](https://github.com/semgrep/semgrep/pull/8381)). This makes it possible to write comparisons such as:\\n    ```yaml\\n    - metavariable-comparison:\\n        metavariable: $RANGE\\n            comparison: parse_promql_duration(str($RANGE)) > parse_promql_duration(\\"1d\\")\\n    ```\\n* `.h` files now run when C or C++ are selected as the language.\\n* `.cjs` and `.mjs` files now run when JavaScript is selected as the language.\\n* Rule syntax: Added metavariable type extension for Semgrep Rule Syntax 2.0 (also known as Experimental Semgrep Syntax). This addition introduces recent changes in Semgrep rule syntax 1.0 to the experimental syntax as well. ([#8183](https://github.com/semgrep/semgrep/issues/8183))\\n    ```yaml\\n    # previous rule syntax 2.0\\n    rules:\\n      - id: no-string-eqeq\\n        message: find errors\\n        severity: WARNING\\n        languages:\\n          - java\\n        match:\\n          all:\\n            - not: null == (String $Y)\\n            - $X == (String $Y)\\n    ```\\n    ```yaml\\n   # new additions to rule syntax 2.0 (experimental syntax)\\n    rules:\\n      - id: no-string-eqeq\\n        message: find errors\\n        severity: WARNING\\n        languages:\\n          - java\\n        match:\\n          all:\\n            - not: null == $Y\\n            - $X == $Y\\n          where:\\n            - metavariable: $Y\\n              type: String\\n    ```\\n* Taint analysis: Parameters to functions in languages with pattern matching in function arguments, such as Rust and OCaml, now transmit taint when they are sources. This works with nested patterns too. For example, in Rust:\\n    ```rust\\n    fn f ((x, (y, z)): t) {\\n      let x = 2;\\n    }\\n    ```\\n    Tainting the sole argument to this function results in all of the identifiers `x`, `y`, and `z` now being tainted. ([#8216](https://github.com/semgrep/semgrep/pull/8216))\\n* Rust: Added support for ellipsis patterns in attribute argument positions. For example, `#[get(...)]`. ([#8148](https://github.com/semgrep/semgrep/pull/8234))\\n* Rust: Added typed metavariable support for Rust. Users can create `TypedMetavar` using Rust\'s type annotation syntax `:`. For example, the following rule works for matching `HttpResponseBuilder` type of variables:\\n    ```yaml\\n    rules:\\n    - id: no-direct-response-write\\n      patterns:\\n      - pattern: \'($BUILDER : HttpResponseBuilder).body(...)\'\\n      - pattern-not: \'($BUILDER : HttpResponseBuilder).body(\\"...\\".to_string())\'\\n      message: find dangerous codes\\n      severity: WARNING\\n      languages: [rust]\\n    ```\\n* Rust: Added the ability to taint macro calls through its arguments, in macro calls with multiple arguments. (#[8209](https://github.com/semgrep/semgrep/pull/8209))\\n* Matching: Added the ability to use metavariables in parameters to match more sophisticated kinds of parameters. In particular, metavariables should now be able to match `self` parameters, such as in Rust. For example:\\n    ```rust\\n    fn $F($X, ...) { ... }\\n    ```\\n    should match:\\n    ```rust\\n    fn $F(self) { }\\n    ```\\n* Added support for naming propagation when the left-hand side (LHS) of a variable definition is an **identifier pattern**. In certain languages such as Rust, the variable definition is parsed as a pattern assignment, for example:\\n    ```rust\\n    let x: SomeType = SomeFunction();\\n    ```\\n   This commit ensures that the annotated type is propagated to the identifier pattern on the left-hand side (LHS) of the assignment, thus ensuring proper naming behavior.\\n* **Taint-mode:** Added experimental `control: true` option to `pattern-sources`. For example:\\n    ```yaml\\n    pattern-sources:\\n      - control: true\\n          pattern: source(...)\\n    ```\\n    * Such sources taint the \\"control flow\\" (or the program counter) so that it is possible to implement reachability queries that do not require the flow of any data. Thus, Semgrep reports a finding in the code below, because after source() the flow of control will reach sink(), even if no data is flowing between both:\\n    ```yaml\\n    def test():\\n      source()\\n      foo()\\n      bar()\\n      #ruleid: test\\n      sink()\\n    ``` (pa-2958)\\n* Taint mode: Taint sanitizers will be included in matching explanations. ([#8383](https://github.com/semgrep/semgrep/issues/8383))\\n\\n### Fixed\\n\\n- Dockerfile language support: String matching is now done by contents, treating the strings `foo`, `\'foo\'`, or `\\"foo\\"` as equal. ([#8229](https://github.com/semgrep/semgrep/pull/8229))\\n- Dockerfile: Single-quoted strings are now parsed without an error. ([#7780](https://github.com/semgrep/semgrep/pull/7780))\\n- Julia: Fixed a bug where try-catch patterns would not match properly. Now, you can use an empty try-catch pattern, such as:\\n    ```julia\\n    try\\n      ...\\n    catch\\n      ...\\n    end\\n    ```\\n    to catch only Julia code which does not specify an identifier for the catch.\\n    - Otherwise, if you want to match any kind of try-catch, you can specify an ellipsis for the catch identifier instead:\\n    ```julia\\n    try\\n      ...\\n    catch ...\\n      ...\\n    end\\n    ```\\n    and this matches any try-catch, including those that do not specify an identifier for the catch. It is strictly more general than the previous.\\n- TypeScript and JavaScript: Fixed an issue leading to incorrect autofix results involving JS/TS async arrow functions, for example, `async () => {}` ([#7353](https://github.com/semgrep/semgrep/pull/7353))\\n- Go: Fixed issue with patterns such as:\\n    - `make(...);`\\n    - `make(...,$X);`\\n    - `make($A,$B)` ([#8171](https://github.com/semgrep/semgrep/pull/8171))\\n- Rust: Fixed an issue where implicit returns did not allow taint to flow, and various other small translation issues that would affect taint. ([#8325](https://github.com/semgrep/semgrep/pull/8325))\\n- Rust: Fixed attribute patterns to allow matching on simple attribute syntax. ([#8234](https://github.com/semgrep/semgrep/pull/8234))\\n- Rust: Fixed a bug where standalone metavariable patterns were not matching as expected. ([#8206](https://github.com/semgrep/semgrep/pull/8206))\\n- Rust: Macro calls which involve dereferencing and reference operators (such as `foo!(&x)` and `foo!(*x)`) now properly transmit taint.\\n- Fixed Python Semgrep pattern parsing to also parse match statements, by chaining in the Python tree-sitter parser, and adding metavariable support to the Python tree-sitter parser.\\n- Aliengrep mode: Fix whitespace bug preventing correct matching of parentheses. ([#7990](https://github.com/semgrep/semgrep/pull/7990))\\n- Fixed stack overflow caused by symbolic propagation.\\n\\n\\n### Removed\\n\\n- **Dart** has been removed from experimental support.\\n\\n## Semgrep Cloud Platform\\n\\n### Added\\n\\n- Jira integration is now in **private beta** for existing customers.\\n    - You can **create Jira tickets** from Semgrep Cloud Platform by following steps in the [Jira integration documentation](/semgrep-appsec-platform/jira).\\n    - To enable this feature:\\n         1. Fill out the following form: [Request access to the Semgrep Jira integration private beta](https://get.semgrep.dev/Jira-private-beta.html).\\n        2. Contact your Technical Account Manager or your Account Executive and let them know you\'d like to try out the Jira integration.\\n- Usage limits are now in effect as of July 31, 2023. See the [Usage](/usage-and-billing) document to learn more.\\n- Various bugfixes and improvements.\\n\\n## Semgrep Code\\n\\n### Added\\n\\n- Added **open findings** column to the **Policies** page. This column displays the count of open findings for each rule in your Policies. With this column, you can quickly see which rules are producing the most or least amount of findings.\\n- Added **fix rate** column to the **Policies** page. This column displays a percentage of resolved fixes associated with the rule, or  \\"-\\" if there are no findings for that rule.\\n- Added **Label** as its own column in the **Policies** page.\\n- Added icons for **Severity** and **Source** columns in the **Policies** page. The following icons can be seen in the **Source** columns:\\n    - <i class=\\"fa-solid fa-pen-nib\\"></i> Custom rules\\n    - <i class=\\"fa-solid fa-diagram-project\\"></i> Community rules\\n    - <i class=\\"fa-solid fa-crown\\"></i> Semgrep Pro rules\\n\\n![Icons for Sources and Severities](/img/july2023-newicons.png)\\n\\n### Changed\\n\\n- **Policies** page: Rules are now sorted by mode, then by custom rules, then by Semgrep Pro rules, then by Community rules.\\n- Targets in a `.yarn/` folder or directory are now ignored by the default `.semgrepignore` patterns.\\n\\n### Fixed\\n\\n- Fixed an issue with the **Findings** page > **Triage** button in which the **Ignore** button was previously disabled when the **Note** or **Comment** textbox was empty. It has been fixed to let users **Ignore** the finding without filling the text box.\\n\\n### Removed\\n\\n- The **Rule board** has been deprecated and removed. The [Policies page](/semgrep-code/policies) is now the default and sole page for rule management in Semgrep Cloud Platform.\\n\\n## Semgrep Supply Chain\\n\\n### Fixed\\n\\n- Fixed bug in `gradle.lockfile` parser where Semgrep Supply Chain previously threw errors on `empty=` with nothing after it.\\n- `poetry.lock` parsing: Semgrep Supply Chain now correctly handles empty `toml` tables, quoted table keys, and arbitrarily placed comments.\\n- Exceptions raised during parsing of manifest files no longer interrupt general parser execution, which previously prevented lockfile parsing if a manifest failed to parse.\\n\\n## Semgrep Assistant\\n\\n### Added\\n\\n- Semgrep Assistant is now in public beta. Semgrep Assistant is available to any user of Semgrep Cloud Platform. To try it out, see [Enabling Semgrep Assistant](/semgrep-assistant/getting-started).\\n- Semgrep Assistant now suggests **rule categories** for your rules through the **Assistant recommendations** in the **Dashboard page**. Click the **Accept** button for Semgrep Assistant to automatically update the rule with its suggested category.\\n\\n## Documentation and knowledge base updates\\n\\n### Added\\n\\n- Semgrep documentation has added ChatGPT-4 as an experimental means for users to learn about Semgrep. Click the **<i class=\\"fas fa-comment\\"></i> floating chat icon** and enter a question to receive answers and sources for those answers. This service is powered by [Markprompt](https://markprompt.com).\\n- Added the following documentation articles:\\n    - [Semgrep integration guide for partners](/integrating): Use these guidelines to add Semgrep OSS to your tooling, developer stack, or infrastructure.\\n- Added the following knowlege base articles:\\n    - [Semgrep scan troubleshooting](/kb/semgrep-code/semgrep-scan-troubleshooting)\\n    - [Resolving SSO error BadRequest: Missing attribute](/kb/semgrep-appsec-platform/sso-attribute-error)\\n    - [How to run different versions of Semgrep](/kb/semgrep-code/run-specific-version)\\n    - [Importing Semgrep findings into DefectDojo](/kb/integrations/defect-dojo-integration)\\n    - [Why did the comments on a PR or MR not appear inline?](/kb/semgrep-appsec-platform/inline-pr-comments)\\n    - [Why aren\'t findings populating in the GitHub Advanced Security Dashboard after running Semgrep in CI?](/kb/semgrep-ci/github-upload-findings-in-security-dashboard)\\n- Added explicit steps to [publish **private rules** in the Semgrep Registry](/writing-rules/private-rules).\\n- Added a new section on [metavariable-type](/writing-rules/experiments/metavariable-type).\\n- Various piecemeal updates.\\n\\n### Changed\\n\\n- Migrated troubleshooting articles from Semgrep documentation to the knowledge base.\\n- Updated Semgrep Assistant for Code docs to reflect its public beta status and new self-serve flow.\\n\\n### Fixed\\n\\n- Various typographic and layout fixes."},{"id":"june-2023","metadata":{"permalink":"/docs/release-notes/june-2023","source":"@site/release-notes/june-2023.md","title":"June 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-06-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":7.5,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"june-2023","append_help_link":true,"hide_title":true,"title":"June 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-06-30T10:00"},"unlisted":false,"prevItem":{"title":"July 2023","permalink":"/docs/release-notes/july-2023"},"nextItem":{"title":"May 2023","permalink":"/docs/release-notes/may-2023"}},"content":"The following updates were made to Semgrep in June 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep OSS Engine\\n\\nThis section of release notes includes upgrades of Semgrep OSS Engine for versions ranging between **1.27.0** and **1.30.0**.\\n\\n### Added\\n\\n* New `--experimental` flag to switch to a new implementation of Semgrep entirely written in OCaml with the following benefits:\\n  * Faster startup time\\n  * Incremental display of matches\\n  * AST (abstract syntax tree) and registry caching\\n  * A new interactive mode\\n\\n:::caution\\nNot all Semgrep features have been ported to the OCaml implementation.\\n:::\\n\\n* Added a new field `metavariable-type` to Semgrep rule syntax. We at Semgrep have added a dedicated field for annotating the type information of metavariables. By adopting this approach, instead of relying solely on language-specific casting syntax, such as Java\'s `String` class, we improve usability by eliminating the need to write redundant type cast expressions for a single metavariable ([#8119](https://github.com/semgrep/semgrep/pull/8148)).\\n  * The new syntax improves support for target languages that lack built-in casting syntax.\\n  * It also promotes a unified approach to expressing type, pattern, and regex constraints for metavariables, resulting in better consistency across rule definitions.\\n  * The following is an example rule written with the current and new `metavariable-type` syntax:\\n  ```yaml\\n    # Current syntax without metavariable-type\\n    rules:\\n      - id: no-string-eqeq\\n        severity: WARNING\\n        message: find errors\\n        languages:\\n          - java\\n        patterns:\\n          - pattern-not: null == (String $Y)\\n          - pattern: $X == (String $Y)\\n  ```\\n  ```yaml\\n  # New syntax with metavariable-type\\n  rules:\\n   - id: no-string-eqeq\\n     severity: WARNING\\n     message: find errors\\n     languages:\\n       - java\\n     patterns:\\n       - pattern-not: null == $Y\\n       - pattern: $X == $Y\\n       - metavariable-type:\\n           metavariable: $Y\\n           type: String\\n  ```\\n  * The `metavariable-type` field is now supported for the following languages ([#8148](https://github.com/semgrep/semgrep/pull/8148), [#8165](https://github.com/semgrep/semgrep/pull/8165),[#8126](https://github.com/semgrep/semgrep/pull/8126)):\\n    * Kotlin\\n    * Go\\n    * Scala\\n    * C#\\n    * TypeScript\\n    * PHP\\n    * Rust\\n    * Python\\n* Pattern syntax: You can now introduce metavariables from parts of regular expressions using `pattern-regex`, by using regular expressions with [named capturing groups](https://www.regular-expressions.info/named.html). Such capture group metavariables must be explicitly named.\\n    * For example, the pattern:\\n       ```\\n       pattern-regex: \\"foo-(?P<X>.*)\\"\\n       ```\\n       binds what is matched by the capture group `?P<X>` to the metavariable `$X`, which can be used as normal.\\n    * `pattern-regex` patterns with capture groups, such as `pattern-regex: \\"(.*)\\"` still introduce metavariables of the form `$1`, `$2`, and so on, but this should be considered deprecated behavior, and that functionality will be taken away in a future release. Named capturing groups should be used instead. ([#8115](https://github.com/semgrep/semgrep/pull/8115))\\n* Rule syntax: Error messages for rule parsing have been improved. For instance, parsing now complains if you miss a hyphen in a list of patterns, or if you try to give a string to `patterns` or pattern-either. ([#8098](https://github.com/semgrep/semgrep/pull/8098)).\\n* JavaScript and TypeScript ([#8112](https://github.com/semgrep/semgrep/pull/8112)): Now, patterns of records with ellipses, such as:\\n  ```\\n  { $X: ... }\\n  ```\\n  Properly match to records of anonymous functions, such as:\\n  ```\\n  {\\n    func: () => { return 1; }\\n  }\\n  ```\\n* Matching: Writing a pattern which is a sequence of statements, such as\\n  ```\\n  foo();\\n  ...\\n  bar();\\n  ```\\n  now allows matching to sequences of statements within objects, classes, and related language constructs, in all languages ([#8052](https://github.com/semgrep/semgrep/pull/8052)).\\n* Added support for post-PEP 614 decorators.([#8100](https://github.com/semgrep/semgrep/pull/8100)). Now Semgrep accepts decorators of the form `@ named_expr_test NEWLINE`, for example with the pattern:\\n  ```\\n  lambda $X:$X($X):\\n  #match 1\\n  @omega := lambda ha:ha(ha)\\n  def func():\\n    return None\\n\\n  #match 2\\n  @omega[lambda a:a(a)].a.b.c.f(\\"wahoo\\")\\n  def fun():\\n    return None\\n  ```\\n* Constant propagation is now applied to stack array declarations in C. A pattern `$TYPE $NAME[101];` now produces two matches in the following snippet ([#8085](https://github.com/semgrep/semgrep/pull/8085)):\\n  ```\\n  int main() {\\n\\n    int bad_len = 101;\\n    /* match 1 */\\n    int arr1[101];\\n    /* match 2 */\\n    int arr2[bad_len];\\n    return 0;\\n  }\\n  ```\\n* Solidity: Allow metavariables for versions. This can be used for the pragma directive in Solidity. For example: `>= $VER;` ([#8105](https://github.com/semgrep/semgrep/pull/8105/files))\\n* PHP ([#8107](https://github.com/semgrep/semgrep/pull/8107)): Added support for parsing patterns of the form: `#[Attr1], #[Attr2]` in code such as:\\n  ```\\n  #[Attr1]\\n  #[Attr2]\\n  function test ()\\n  {\\n      echo \\"Test\\";\\n  }\\n  ```\\nPreviously, to match against multiple attributes it was required to write `#[Attr1, Attr2]`.\\n* Added lone decorators as a valid Python Semgrep pattern ([#8047](https://github.com/semgrep/semgrep/pull/8047)), so for example `$NAME($X)` now generates two seperate findings here:\\n  ```\\n  @hello(\\"world\\")\\n  @hi(\\"semgrep!\\")\\n  def shift():\\n    return \\"left!\\"\\n  ```\\n* JavaScript and TypeScript: Patterns for class properties can now have the static and async modifiers.\\nFor instance:\\n  ```\\n  @Foo(...)\\n  async bar(...) {\\n    ...\\n  }\\n  ```\\nor\\n  ```\\n  @Foo(...)\\n  static bar(...) {\\n    ...\\n  }\\n  ```\\n* Semgrep VS Code extension: Semgrep Language Server now supports multi-folder workspaces. ([#7966](https://github.com/semgrep/semgrep/pull/7966))\\n* New pre-commit hook semgrep-ci to use CI rules in pre-commit, which uses rules from the Policies page and blocks PRs when detecting findings from rules in Block mode ([#7973](https://github.com/semgrep/semgrep/pull/7973)).\\n* Added support for date comparison and functionality to get current date. This requires date strings to be in the format \\"yyyy-mm-dd\\" ([#8053](https://github.com/semgrep/semgrep/pull/8053)).\\n\\n### Changed\\n\\n* The output of `--debug` is now less verbose by default. It now shows internal warning and error messages. Alternatively, use `--verbose` for detailed scan information.\\n* Updated the maximum number of cores autodetected to 16 to prevent overloading on large machines when users do not specify number of jobs themselves. ([#8028](https://github.com/semgrep/semgrep/pull/8028))\\n* Taint mode: Several improvements to taint_assume_safe_\\\\{booleans,numbers\\\\} options. Most notably, we now use type info provided by explicit type casts, and we also use const-prop info to infer types.\\n\\n### Fixed\\n\\n* Taint analysis: Improve handling of dataflow for tainted value propagation in class field definitions\\nThis change resolves an issue where dataflow was not correctly accounted for when tainted values flowed through field definitions in class/object definitions. For instance, in Kotlin or Scala, singleton objects are commonly used to encapsulate executable logic, where each field definition behaves like a statement during object initialization. In order to handle this scenario, we have introduced an additional step to analyze a sequence of field definitions as a sequence of statements for taint analysis. This enhancement allows us to accurately track tainted values during object initialization. ([#7742](https://github.com/semgrep/semgrep/pull/7975))\\n* Allow any characters in file paths used to create dotted rule IDs. File path characters that aren\'t allowed in rule IDs are simply removed. For example, a rule whose ID is `my-rule` found in the file `hello/@world/rules.yaml` becomes `hello.world.my-rule`. ([#8057](https://github.com/semgrep/semgrep/pull/8057))\\n* Fixed a typing issue with Go. Previously, the pattern `($VAR : *tau.rho).$F()` wouldn\'t produce a match in the following:\\n  ```\\n  func f() {\\n    i_1 := &tau.rho{}\\n    i_2 := new(tau.rho)\\n\\n    i_1.shift() //miss one\\n    i_2.left()  //miss two\\n\\n    return 101\\n  }\\n  ```\\nbut now Semgrep doesn\'t miss those two findings. ([#8125](https://github.com/semgrep/semgrep/pull/8125))\\n\\n## Semgrep Cloud Platform\\n\\n### Added\\n* You can now rename projects (repositories). This feature may be useful when you change the name of your repository in your source code manager. To rename a project from within Semgrep Cloud Platform, do the following:\\n    1. Click **[Projects](https://semgrep.dev/orgs/-/projects/)**.\\n    2. Click the **<i class=\\"fa-solid fa-gear\\"></i> gear icon** on the entry of the project you want to rename.\\n    3. Click the **<i class=\\"fas fa-ellipsis-h\\"></i> three-dot icon > Rename project**.\\n    4. Enter the name of the new project and click **Rename**.\\n    ![Screenshot of repository rename modal](/img/projects-rename-repo.png#md-width)\\n* You can now select a default RBAC (role-based access control) role. Refer to [Setting a default role](/deployment/teams#set-a-default-role).\\n* The Policies page is now the default page used to manage rules. See the [Policies](/semgrep-code/policies) documentation for more information.\\n\\n\\n### Changed\\n\\n* For organizations with multiple GitHub organizations, you can now add organizations as a newline separated list.\\n\\n### Removed\\n\\n* The **Disliked** column has been removed from the Dashboard.\\n\\n## Semgrep Code\\n\\n### Added\\n\\n* Semgrep Pro Engine for Java: Semgrep\'s taint mode can now relate Java properties and their corresponding getters or setters even when these are autogenerated, so the actual getters or setters are not declared in the sources.\\n* Findings page: Added a badge to identify security-related findings.\\n![Screenshot of findings security badge](/img/findings-security-badge.png#md-width)\\n* Findings page: You can now select a range of findings cards at once while pressing <kbd>Shift</kbd>.\\n\\n### Fixed\\n\\n* Cleaned up and updated wording and UI to reflect the updated Team tier.\\n* Fixed many many issues in the Editor.\\n\\n### Removed\\n\\n* The **Rule board** has been deprecated and removed. To manage findings, use the **Policies page**. See the [Policies documentation](/semgrep-code/policies) for more information.\\n\\n## Semgrep Supply Chain\\n\\n* Semgrep Supply Chain now supports pnpm lockfiles (`pnpm-lock.yaml`) version 8 and above.\\n* CLI scans now include the following metadata:\\n    * Severity\\n    * Recommended version to upgrade a dependency to\\n\\n## Semgrep Assistant (beta)\\n\\n* A new setting lets you configure where Semgrep Assistant\'s triage suggestions appear. You can receive Semgrep Assistant messages within your Slack or GitHub PR comments.\\n* Added a new drop-down menu to set a minimum autofix confidence level required to display autofix suggestions from Semgrep Assistant.\\n\\n## Documentation updates\\n\\n### Added\\n* The [Semgrep knowledge base](/kb) is now live. The knowledge base hosts the following information:\\n    * Troubleshooting articles\\n    * How-to guides and tutorials for specific or custom user needs\\n* Added a new document about [Semgrep Assistant](/semgrep-assistant/overview).\\n* Minor updates and corrections."},{"id":"may-2023","metadata":{"permalink":"/docs/release-notes/may-2023","source":"@site/release-notes/may-2023.md","title":"May 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-05-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":9.215,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"may-2023","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-05-30T10:00","title":"May 2023"},"unlisted":false,"prevItem":{"title":"June 2023","permalink":"/docs/release-notes/june-2023"},"nextItem":{"title":"April 2023","permalink":"/docs/release-notes/april-2023"}},"content":"The following updates were made to Semgrep in May 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n:::info Release notes from May until June 9\\nThese release notes include updates made by Semgrep, Inc. from May 2023 until June 9. Due to the importance of the launch week at the beginning of June 2023, we decided to include the most important updates from the launch also on the release notes page that you are now reading.\\n:::\\n\\n## Semgrep tiers\\n\\n- Semgrep\u2019s Community Tier has been sunsetted. Existing and new users now have access to **all** Semgrep Team tier features for free, subject to [usage limits](/usage-and-billing).\\n\\n## Semgrep Cloud Platform\\n\\n- Semgrep Playground **Turbo mode** is now in beta. This new mode enables users to create rules using the Semgrep OSS engine which will automatically run upon detecting any change in the rule or sample code. There is **no need to click a Run button** in Turbo mode.\\n- Semgrep Zero-config Scanning for GitHub.com is now in beta. Onboard or add many repositories to the Semgrep Cloud Platform without having to commit a CI file for every repository! Reach out to [sales@semgrep.com](mailto:sales@semgrep.com) to try it out.\\n- Role-based access control (RBAC) is now available to all Team tier users, subject to usage limits.\\n- Single Sign-On (SSO) is now available to all Team tier users, subject to usage limits.\\n- Improved the UI on the **Settings** page.\\n\\n## Semgrep OSS Engine\\n\\nThis section of release notes includes upgrades of Semgrep OSS Engine for versions ranging between 1.21.0 and 1.26.0.\\n\\n- Kotlin language support update: Kotlin now upgraded from beta support to full GA support! Additionally, as a part of this update for Kotlin:\\n    - Added named ellipses, as `$...X`.\\n    - Added literal metavariables, from patterns like `\\"$FOO\\"`. You can still match strings that only contain a single interpolated ident by using the brace notation, e.g. `\\"${FOO}\\"`.\\n    - Interpolated identifiers in strings, such as `$foo`, are now properly able to match explicitly interpolated expressions, such as `${...}`.\\n- Added experimental support for the programming language Cairo 1.0. Thanks to [Frostweeds](https://github.com/Frostweeds) (Romain Jufer) for his contribution!\\n- Added experimental support for the programming language Julia.\\n- Java support improvement: Semgrep OSS Engine now includes heuristics based on the Java standard library and common naming patterns. As a result, Semgrep OSS Engine can now determine more types of Java expressions, for use with [Typed Metavariables](/writing-rules/pattern-syntax#typed-metavariables).\\n- We are introducing a new experimental generic matching engine [Aliengrep](/writing-rules/experiments/aliengrep) as an alternative to the default generic mode engine (Spacegrep). Generic mode is used for languages that are not supported by Semgrep OSS Engine. Try out [Aliengrep](/writing-rules/experiments/aliengrep) and let us know what you think about it!\\n- Taint analysis updates:\\n  - In Java, Semgrep OSS Engine can now track taint through more get and set methods (getters and setters). Before this update, taint analysis of Semgrep OSS Engine could already relate setters to getters (for example: `o.setX(taint); o.getX()`. With this update, it can relate setters and getters to properties (for example `o.setX(taint); o.x`).\\n  - Added experimental options `taint_assume_safe_booleans` and `taint_assume_safe_numbers` to avoid propagating taint that comes from expressions with boolean or number (integer, float) types.\\n  - Semgrep OSS Engine can recognize that an object constructed by `new Obj(\\"tainted\\", \\"safe\\")` has its `x` attribute tainted, whereas its `y` attribute is safe.\\n  - Extract mode: users can now choose to include or exclude rules to run on, similar to `paths:`.\\n\\n      For example, to only run the rules on `example-1` and `example-2`:\\n\\n      ```yaml\\n      rules:\\n        - id: test-rule\\n          mode: extract\\n          rules:\\n              include:\\n              - example-1\\n              - example-2\\n\\n      ```\\n\\n      To run the rule on everything except `example-1` and `example-2`:\\n\\n      ```yaml\\n      rules:\\n        - id: test-rule\\n          mode: extract\\n          rules:\\n              exclude:\\n              - example-1\\n              - example-2\\n\\n      ```\\n\\n      (GitHub issue [#7858](https://github.com/semgrep/semgrep/issues/7858))\\n\\n- Semgrep OSS Engine Language Server updates. The following two updates are also related to [Semgrep Visual Studio Code extension](#semgrep-visual-studio-code):\\n    - Support for search and replace with rule patterns through semgrep/search.\\n    - Language Server now notifies you about errors and includes a reason for the crash.\\n\\n- Relaxed restrictions on symbolic propagation so that symbolic values survive branching statements. Now (with symbolic-propagation enabled) `foo(bar())`  matches the following code:\\n\\n    ```python\\n    def test():\\n      x = bar()\\n      if cond:\\n        exit()\\n      foo(x)\\n    ```\\n\\nThe Semgrep OSS Engine section of release notes mentions only selected additions and changes, for specific bug fixes, see [Semgrep OSS Engine GitHub](https://github.com/semgrep/semgrep/blob/develop/CHANGELOG.md) changelog and search for Fixed sections under each version.\\n\\n## Semgrep Supply Chain\\n\\n- Semgrep Supply Chain\u2019s **License compliance** feature is now in beta. This feature enables developers to view the licenses of dependencies in all repositories that are scanned by Semgrep Supply Chain. Read the documentation: [License compliance](/semgrep-supply-chain/license-compliance).\\n    - This feature also enables security engineers to **Block,** leave a **Comment,** or **Allow** dependencies when a PR introducing the dependency is first opened, based on the license of the dependency.\\n    - License compliance supports many popular Copyleft, Weak-copyleft, and Permissive licenses. Other licenses can also be detected.\\n    ![Screenshot of Semgrep Supply Chain Dependencies tab with licenses listed](/img/sc-license-scanning.png)\\n- Semgrep Supply Chain is now available for free to Team tier users, subject to usage limits.\\n- Improvements to Semgrep Supply Chain **Dependencies** page.\\n\\n## Semgrep Visual Studio Code\\n\\nSemgrep Visual Studio Code extension received new updates! Try to scan your code using the extension and let us know what we can improve. See more in [Semgrep Visual Studio Code extension](/extensions/semgrep-vs-code) documentation. This extension allows you to check your code for vulnerabilities within seconds, with every line of code changed in the editor. The extension is built on Language Server Protocol, so you can hack it for other editors of your choice. The extension also has a dedicated [changelog on GitHub](https://github.com/semgrep/semgrep-vscode/blob/master/CHANGELOG.md) so you can always see the latest updates.\\n\\n## Semgrep Code\\n\\n- There is a new Policies page that is going to replace the Rule board in Semgrep Code! Switch to the new version by clicking **Try new version** in the Rule board header. The new page gives the rule overview a noticeable facelift and many optimizations, you can now easily filter for various types of rule metadata, and specific types of rules and make bulk edits which would have been hardly achievable with the old Rule board. Read more in [Policies](/semgrep-code/policies) documentation.\\n\\n    ![Screenshot of the default state of the Policies page](/img/policies.png)\\n\\n- You can now rename Projects in the Semgrep Cloud Platform. Before this update, when you renamed a repository in your Source Code Manager (SCM), for example in GitHub, GitLab, or Bitbucket, all of your previous Semgrep findings and triage data were lost as Semgrep recognized the renamed repository only as a new repository. With this update, you can now manually rename the project in Semgrep Code. This is the first step before we will bring you an automated solution (as this update still requires manual action). But now you can rename a project in Semgrep Code to match the new repository name without losing your findings data!\\n  To rename a repository:\\n  1. On the [Projects](https://semgrep.dev/orgs/-/projects) page of Semgrep Cloud Platform, click the gear icon <i class=\\"fa-solid fa-gear\\"></i> **Settings**. of the repository where you want to change the repository name.\\n  ![Screenshot of the settings icon on Projects page](/img/release-notes-rename-project1.png)\\n  2. Click the three dots \u2026, and then click Rename project.\\n  ![Screenshot of the three dots options menu on Projects page](/img/release-notes-rename-project2.png)\\n  3. Create a name that matches the name in your SCM, and then click **Rename**.\\n\\n## Pro rules\\n\\nRecently released rules bring a total of:\\n\\n- 61 Pro rules for\xa0**Kotlin**\xa0(with support frameworks like Spring and Ktor)\\n- 69 Pro rules for\xa0**Go**\xa0(with support frameworks such as Gin, Gorilla, gRPC, net/HTTP, and more)\\n\\nThese rules are available through the [Semgrep Registry](https://semgrep.dev/explore), in rulesets such as\xa0`p/default`\xa0and\xa0`p/comment`, as well as language-specific rulesets such as\xa0`p/kotlin`\xa0and\xa0`p/golang`. In total, there are now\xa0more than 500 Pro rules available.\\n\\n## Semgrep Pro Engine\\n\\n- Semgrep Pro Engine now provides cross-function support for Go and Kotlin!\\n- Semgrep Pro Engine allows you to visualize the flow of tainted data (dataflow traces) in Semgrep Code. With this update, you can also receive findings with the visualized flow of tainted data in a pull request (PR) or merge request (MR) Semgrep comments. For more information, see the following documentation:\\n    - [Dataflow traces in PR comments](/semgrep-appsec-platform/github-pr-comments/#dataflow-traces-in-pr-comments)\\n    - [Dataflow traces in MR comments](/semgrep-appsec-platform/gitlab-mr-comments/#dataflow-traces-in-mr-comments)\\n- Taint analysis:\\n    - Taint labels now mostly work cross-function (interprocedural) analysis, except for labeled propagators.\\n    Note that taint labels are experimental!\\n    - Taint analysis now supports cross-function (interprocedural) field sensitivity for JavaScript and TypeScript.\\n\\n        For example:\\n\\n        ```javascript\\n        class Obj {\\n          constructor(x, y) {\\n            this.x = x;\\n            this.y = y;\\n          }\\n        }\\n        ```\\n\\n    - Semgrep Pro Engine taint analysis can now perform field-sensitive analysis of class constructors in Java. For example, if the default constructor of a class `C` sets its field `x` to a tainted value, given `o = new C()`, Semgrep knows that `o.getX()` is tainted.\\n\\n## Documentation updates\\n\\n### Additions\\n\\n- Added a new [Usage limits](/usage-and-billing) FAQ page.\\n- Added a new document about [License compliance](/semgrep-supply-chain/license-compliance).\\n- Added a new document [Searching through your dependencies](/semgrep-supply-chain/dependency-search) in Semgrep Supply Chain documentation.\\n- Added a new section [Updating Semgrep Pro Engine in CLI](/semgrep-code/semgrep-pro-engine-intro#update-cross-file-analysis-in-the-cli).\\n- There is a new section [Limitations of symbolic propagation](/docs/writing-rules/experiments/symbolic-propagation#limitations-of-symbolic-propagation).\\n- Added dataflow traces in PRs and MRs documentation.\\n    - [Dataflow traces in PR comments](/semgrep-appsec-platform/github-pr-comments#dataflow-traces-in-pr-comments)\\n    - [Dataflow traces in MR comments](/semgrep-appsec-platform/gitlab-mr-comments#dataflow-traces-in-mr-comments)\\n- Add executing commands as strings and many more updates to the [Command injection prevention for Ruby](/cheat-sheets/ruby-command-injection).\\n- Added [Semgrep Pro Engine CI scans](/semgrep-code/semgrep-pro-engine-intro#run-cross-file-analysis-in-the-cli) section.\\n- Added new [Policies](/semgrep-code/policies) page documentation, also updated **Rule board** documentation with an admonition about Policies page.\\n- Added [Semgrep Visual Studio Code extension](/extensions/semgrep-vs-code) documentation.\\n- Added [Aliengrep](/writing-rules/experiments/aliengrep) reference documentation.\\n\\n### Changes\\n\\n- Updated [Join mode](/writing-rules/experiments/join-mode/overview) documentation.\\n- Admonitions regarding the new Turbo mode were added to Playground and Editor documentation. Go to [Playground](/semgrep-code/editor) documentation and search for turbo mode.\\n- Updated [Single-sign on (SSO) configuration](/deployment/sso).\\n- Updated [Evaluating your security posture through the Dashboard](/semgrep-appsec-platform/dashboard/) document.\\n- Our Rule syntax document now shows that focus metavariables can be a list of more focus metavariables. See the rule example in [Including multiple focus metavariables using set intersection semantics](/writing-rules/rule-syntax/#including-multiple-focus-metavariables-using-set-intersection-semantics) section.\\n- The [General rule requirements](/contributing/contributing-to-semgrep-rules-repository/#general-rule-requirements) section of Contributing rules document now includes a more precise definition of the `severity` YAML rules key.\\n- Our docs search now includes heading information to better contextualize search results and other fixes to optimize the documentation search.\\n- Code samples in [Sample continuous integration (CI) configurations](/semgrep-ci/sample-ci-configs) document now includes workflow dispatch and other additional updates to various code snippets on this page.\\n- Updated source paths in [Contributing code](/contributing/contributing-code/) documentation.\\n- Rule syntax table Language extensions and tags has been renamed to [Language extensions and languages key values](/writing-rules/rule-syntax/#language-extensions-and-languages-key-values). The table has also been updated and is now accompanied by an introductory information and admonition.\\n- Removed `pattern-where-python` documentation as it was deprecated in Semgrep OSS Engine version 0.61.0.\\n- There were also numerous typos fixed, many other docs pages improved, and some screenshots updated. All this is to improve your experience with our docs. Also big thanks to [Parsia Hakimian](https://github.com/parsiya) for helping us to fix some of these typos!"},{"id":"april-2023","metadata":{"permalink":"/docs/release-notes/april-2023","source":"@site/release-notes/april-2023.md","title":"April 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-04-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":5.91,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"april-2023","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-04-30T10:00","title":"April 2023"},"unlisted":false,"prevItem":{"title":"May 2023","permalink":"/docs/release-notes/may-2023"},"nextItem":{"title":"March 2023","permalink":"/docs/release-notes/march-2023"}},"content":"The following updates were made to Semgrep in April 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep OSS Engine\\n\\nThis section of release notes includes upgrades of Semgrep OSS Engine for versions ranging between 1.17.0 and 1.20.0.\\n\\n### Added\\n\\n- Java support: With this update, private static variables that are defined just once in a static block are now considered as `final` by [Constant propagation](/writing-rules/data-flow/constant-propagation), even if they are not explicitly declared.\\n- Metavariable comparison: You can now use the exponentiation operator `**` in your expressions when comparing metavariables.\\n- Kotlin language support: With this update, Semgrep evaluates class fields with the correct types and can detect these fields accurately with typed metavariables. For example, a class such as the following:\\n    ```kotlin\\n    class Foo {\\n        var x: Int\\n    }\\n\\n    ```\\n- Scala language support improvements:\\n    - Semgrep can now parse indented matches, such as the following:\\n\\n        ```scala\\n        e match\\n        case foo => \\"foo\\"\\n        case bar => \\"bar\\"\\n        ```\\n\\n    - Semgrep now provides improved parsing functionality for arguments with `using` keyword and splatted arguments. With this update, Semgrep can now correctly parse Scala code with constructs such as:\\n\\n        ```scala\\n        foo(using bar)\\n        foo(1, 2, bar*)\\n        ```\\n\\n    - Improved parsing functionality for indented `for` expressions in Scala. With this update, Semgrep can now correctly parse `for` expressions that are indented, such as:\\n\\n        ```scala\\n        for\\n          _ <- 5\\n          yield ...\\n        ```\\n\\n    - Some additional Scala updates that Semgrep now supports:\\n        - `enum` constructs\\n        - `given` definitions\\n        - `export` keyword\\n        - Top-level definitions\\n        - Added proper parsing for Scala 3 style imports.\\n\\n### Changed\\n\\n- Semgrep no longer reports partially analyzed files as skipped when using `--verbose` flag. If Semgrep lacks information about what lines have been skipped, it no longer reports that all lines have been skipped. For example, an error while evaluating a `metavariable-pattern` operator in one rule may cause a finding to be missed and report the file as partially analyzed. However, that error did not affect any other rules, and even the affected rule can produce some findings.\\n- Enhancement to the `--verbose` flag output. When you use the `--verbose` flag in the command line, the different lists of skipped files are now sorted alphabetically. This makes it easier to `diff` the outputs of two runs and quickly identify any differences in skipped files.\\n- Taint analysis:\\n    - Added option `taint_assume_safe_comparisons`, disabled by default, that prevents comparison operators to propagate taint, so for example `tainted != \\"something\\"` is not considered tainted. Note that this a syntactic check, if the operator is overloaded to perform a different operation this will not be detected.\\n    - Semgrep OSS Engine taint analysis now includes option `taint_assume_safe_comparisons` that prevents comparison operators to propagate taint. For example, `tainted != \\"something\\"` is not considered tainted. The `taint_assume_safe_comparisons` is disabled by default. Note that this a syntactic check, if the operator is overloaded to perform a different operation Semgrep does not detect this code.\\n\\n## Semgrep Code\\n\\n### Changed\\n\\n- Improvements to Slack notifications for Semgrep Code scans. See [Semgrep Cloud Platform](#semgrep-cloud-platform).\\n- Many Semgrep Pro rules now have rewritten messages. These new rule messages help you to better understand the detected vulnerabilities and enable you to mitigate them with ease. Updates cover all rules associated with the following Common Weakness Enumerations (CWE):\\n    - CWE-22 - Path traversal\\n    - CWE-78 - Command injection\\n    - CWE-89 - SQL Injection\\n    - CWE-94 - Code injection\\n    - CWE-287 - Improper authentication\\n    - CWE-798 - Hardcoded secrets\\n    - CWE-918 - Server-Side Request Forgery (SSRF)\\n\\n## Semgrep Pro Engine\\n\\n### Added\\n\\n- Taint analysis: Semgrep Pro Engine now supports simple cases of cross-function (interprocedural) taint labels.\\n- Java language support: With this update, Semgrep Pro Engine can track the propagation of taint from the arguments of a method to the called object. For example:\\n\\n    ```java\\n    public void foo(int x) {\\n        this.x = x;\\n    }\\n    ```\\n\\n    When called with a tainted argument:\\n\\n    ```java\\n    o.foo(tainted);\\n    ```\\n\\n    Semgrep can track and report that the field `x` of `o` has been tainted.\\n\\n### Changed\\n\\n- Previously, the `semgrep --pro` command required a directory as its single target. With this update, `semgrep --pro` command is still limited to a single target, but in addition to a whole directory, it can now target files also.\\n\\n## Semgrep Supply Chain\\n\\n### Additions\\n\\n- Semgrep Supply Chain Dependency search is now in beta. Dependency search displays all your direct and transitive dependencies on the **Supply Chain** > **Dependencies** page. You can search for any dependency in all of your repositories in the Semgrep Cloud Platform, provided that their language is supported by Semgrep Supply Chain.\\n- Semgrep Supply Chain now supports `package-lock.json` version 3.\\n\\n### Changes\\n\\n- Improvements to Slack notifications for Semgrep Supply Chain scans. See [Semgrep Cloud Platform](#semgrep-cloud-platform).\\n- Semgrep Supply now parses `go.mod` for a list of dependencies.\\n- Semgrep Supply Chain no longer parses `go.sum` for a list of dependencies.\\n- The title of Supply Chain findings in the CLI now consists of the package name and CVE, instead of just the rule\'s UUID.\\n\\n## Semgrep Cloud Platform\\n\\n### Additions\\n\\n- You can now add repositories from Azure Repos into the Semgrep Cloud Platform.\\n- Bitbucket PR comments are now available for Bitbucket Cloud users. See the [Enabling Bitbucket pull request comments](/category/bitbucket-pr-comments) to enable PR comments in your repositories.\\n\\n### Changes\\n\\n- The Semgrep Slack app has been improved. Create customized subscriptions to Semgrep findings based on Rule board policy (Monitor, Comment, or Block) and other filters for your specific Slack channels. By creating your customized subscriptions, Semgrep only sends notifications about repositories and findings relevant to developers. Security engineers can still receive notifications of all issues across the entire organization\u2019s repositories. See [Receiving Slack notifications](/semgrep-appsec-platform/slack-notifications).\\n- Updated the **Settings** > **SSO** page. The page now displays your current SSO settings, if any.\\n- Previously, Semgrep automatically associated organization accounts with their corresponding GitHub Cloud or GitLab SaaS organizations. Now, users can choose to connect their Semgrep organization accounts with their repository provider. To associate your Semgrep organization with your repository provider, sign in to Semgrep Cloud Platform, then go to Settings > **Source code** > then select your repository provider.\\n- Various improvements to UI consistency and improved layout for wide monitors.\\n- Fixed various bugs within the Editor and Playground.\\n\\n## Documentation updates\\n\\n### Added\\n\\n- New section [Semgrep add-on reconciliation of licenses](/usage-and-billing#reconciliation-of-licenses-and-usage) and [Example of license reconciliation](/usage-and-billing/#example-of-license-reconciliation).\\n- New section [Updating existing open-source rules in Semgrep Registry](/docs/contributing/contributing-to-semgrep-rules-repository#update-existing-rules-in-semgrep-registry).\\n- Added section [Creating rules that analyze across files](/semgrep-code/semgrep-pro-engine-intro/#write-rules-that-analyze-across-files-and-functions) and [Types of Semgrep Pro Engine analysis](/semgrep-code/semgrep-pro-engine-intro#types-of-semgrep-code-analysis).\\n- Added [Appendix: Token scopes](/deployment/teams#token-scopes).\\n\\n### Changed\\n\\n- [Notification documentation](/semgrep-appsec-platform/notifications) has been separated into guides for each notification channel, such as Slack or webhooks.\\n- Fixed embedded examples in [Semgrep Pro Engine examples](/semgrep-code/semgrep-pro-engine-examples) document.\\n- Our [Cheat sheets](/cheat-sheets/overview) now suggest the default ruleset instead of specific rules for you to scan your code.\\n- Updated [CLI reference](/cli-reference).\\n- Clarified sections [Disable rules](/semgrep-code/policies#disable-rules) and **Removing rulesets**.\\n- Known limitations of Semgrep Pro Engine section have been expanded and moved to the [Known limitations of cross-file analysis](/semgrep-code/semgrep-pro-engine-intro#known-limitations-of-cross-file-analysis) document.\\n- Fixed various broken links.\\n- Fixed various spelling issues."},{"id":"march-2023","metadata":{"permalink":"/docs/release-notes/march-2023","source":"@site/release-notes/march-2023.md","title":"March 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-03-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":6.42,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"march-2023","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-03-30T10:00","title":"March 2023"},"unlisted":false,"prevItem":{"title":"April 2023","permalink":"/docs/release-notes/april-2023"},"nextItem":{"title":"February 2023","permalink":"/docs/release-notes/february-2023"}},"content":"The following updates were made to Semgrep in March 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep OSS Engine\\n\\nThis section of release notes include upgrades of Semgrep OSS Engine for versions ranging between 1.14.0 and 1.16.0.\\n\\n### Added\\n\\n- Kotlin: Semgrep OSS Engine now supports typed metavariables in Kotlin. For example, to find all instances of a string type, you can now use the following rule pattern:\\n`($X : String)`\\n- Scala: Semgrep can now parse programs that contain quoted expressions, context parameter clauses that use the `using` function, and soft modifiers like `inline` and `open`.\\n\\n    Semgrep can now parse and analyze Scala code that contains matches on types, such as:\\n    ```scala\\n    type t = K match {\\n      case Int => String\\n    }\\n    ```\\n\\n- metavariable-comparison: Added support for bitwise operators `~`, `&`, `|`, and `^`.\\n- taint-mode: The latest update to `pattern-propagators` in Semgrep OSS Engine introduces two optional fields `requires` and `label`, that work identically to their counterparts in `pattern-sources` and  `pattern-sinks`. These fields are part of the experimental taint labels feature for taint analysis.\\n\\n    For instance, we can define:\\n\\n    ```yaml\\n    pattern-propagators:\\n      - pattern: |\\n          $TO.foo($FROM)\\n        from: $FROM\\n        to: $TO\\n        requires: A\\n        replace-labels: [A, C]\\n        label: B\\n    ```\\n\\n    This propagator only propagates if the source `$FROM` has taint label `A`. Additionally, any taints from `$TO` with labels `A` or `C` are converted to have label `B`.\\n\\n    If you don\'t specify a `label`, the target `$TO` is tainted with the same label as the taint on `$FROM`. If you don\'t specify a `requires` field, the propagator does not require the source to have a specific taint label.\\n\\n    Note that the `replace-labels` field only restricts the label being propagated if you also specify the `label` output.\\n\\n\\n### Changed\\n\\n- Semgrep\u2019s CLI output has been revamped to better organize scan information and provide more context about scans and findings. Previously, CLI output was minimal without much formatting. With this release, Semgrep CLI now provides headers, tables, scan summaries, and updated, granular data about individual findings and the project it is scanning.\\n\\n    ![release-notes-march2023-cli-output-old.png](/img/release-notes-march2023-cli-output-old.png)\\n    *Figure 1. Old Semgrep CLI output.*\\n\\n    ![release-notes-march2023-cli-output-new.png](/img/release-notes-march2023-cli-output-new.png)\\n    *Figure 2. New Semgrep CLI output.*\\n\\n- The latest update to`semgrep/semgrep` Docker images removes the custom entry point that was previously used to invoke Semgrep. As a result, you must now explicitly call `semgrep` when running the image. This change was already made approximately a year ago. In this update, the backward compatibility layer and a deprecation notice have been removed.\\n\\n    Previously, you could scan your code using the `semgrep/semgrep` image by running the following command:\\n    ```bash\\n    docker run -v $(pwd):/src semgrep/semgrep scan ...\\n    ```\\n\\n    However, this command no longer works. Instead, you must use the following command to achieve the same result:\\n    ```bash\\n    docker run -v $(pwd):/src semgrep/semgrep semgrep scan ...\\n    ```\\n\\n    By removing the custom entry point, this update provides greater flexibility and consistency in how Semgrep is invoked within Docker containers.\\n\\n- taint-mode: Previously, Semgrep OSS Engine taint analysis sometimes flagged sinks that did not propagate taint. For example, the `sink(ok if tainted else ok)` was flagged. To address this, we\'ve made taint analysis more precise. Now, sinks like `sink(...)` where you declare that any argument of a given function is a sink. For example:\\n\\n    ```yaml\\n    pattern-sinks:\\n      - patterns:\\n          - pattern: sink($X, ...)\\n          - focus-metavariable: $X\\n    ```\\n\\n    As a result, `sink(ok1 if tainted else ok2)`, `sink(not_a_propagator(tainted))`, and\\n    `sink(some_array[tainted])`, are not be reported as findings.\\n\\n\\n- The `-gitlab-sast` and `-gitlab-secrets` output formats have been upgraded. The output is now valid with the GitLab v15 schema, while staying valid with the GitLab v14 schema as well. Code findings now include the confidence of the rule.\\n\\n## Semgrep Code\\n\\n### Added\\n\\n- **Pro Engine beta** toggle is enabled by default in the [Semgrep Editor](https://semgrep.dev/orgs/-/editor/) and [Semgrep Playground](https://semgrep.dev/playground). Rules can still run with the Semgrep OSS Engine if\xa0`interfile: true` is not specified in the rule.\\n- Findings from Pro rules or Semgrep Pro Engine are now labeled with a gem icon to let you know where the finding has come from.\\n    ![semgrep-code-findings-pro-rule-gem.png](/img/release-notes-semgrep-code-findings-pro-rule-gem.png)\\n\\n\\n## Semgrep Pro Engine\\n\\n### Added\\n\\n- Previously, when installing Semgrep Pro Engine, Semgrep CLI downloaded the most recently released version of Semgrep Pro Engine. As a consequence, this version of Semgrep Pro Engine might not have been the most compatible version with Semgrep OSS Engine. With this update, the most compatible version of Semgrep Pro Engine with Semgrep OSS Engine is downloaded during the installation.\\n\\n    This behavior is only supported for Semgrep version 1.12.1 and later. Previous versions still download the most recently released version, as before.\\n\\n- taint-mode: Semgrep Pro Engine\u2019s taint analysis capabilities for Java now include support for basic field sensitivity through getters and setters. If you call `obj.setX(tainted)`, Semgrep can now identify that a subsequent call to `obj.getX()` will carry the same taint as `tainted`. Moreover, Semgrep can differentiate between different fields accessed by the getters and setters, such as `obj.getX()` and `obj.getY()`.\\n\\n    It\'s important to note that Semgrep Pro Engine doesn\'t examine the definitions of the getter and setter methods, and it doesn\'t know whether other methods like `obj.clearX()` clear the taint that `obj.setX(tainted)` adds. Nonetheless, this new feature enables Semgrep to detect vulnerabilities more accurately in tainted data flow in Java code.\\n\\n\\n### Changed\\n\\n- CI scans that use Semgrep Pro Engine now run intrafile and cross-function (interprocedural) taint analysis by default in differential scans (such as PR or MR scans). Note that cross-file (interfile) analysis is not run in differential scans for performance reasons.\\n\\n## Semgrep Cloud Platform\\n\\n### Added\\n\\n- For organizations with role-based access control (RBAC) enabled, members are now able to [log in through the CLI](/deployment/teams#member-scoped-access-tokens) and send findings data from their local machine to the Semgrep Cloud Platform.\\n\\n## Semgrep Supply Chain\\n\\n### Added\\n\\n- You can now receive Semgrep Supply Chain notifications in your Slack channel. Be notified of **reachable vulnerabilities** as soon as a scan finishes. Sign in to Semgrep Cloud Platform and click Settings > Integrations > Add integration > Slack and follow the instructions to start setting up your Slack notifications.\\n\\n### Changed\\n\\n- Previously, Semgrep Supply Chain used `go.sum` files to read Go dependencies. Semgrep Supply Chain now uses `go.mod` files.\\n- Supply Chain findings now include the exposure type. Exposure types can be any of the following values:\\n    - Reachable \u2014 this type of exposure means that the finding has detected a vulnerable dependency **and** the vulnerable code is used in your codebase. Additionally, the **inclusion** of certain severely vulnerable packages such as `log4j` is also categorized as a reachable exposure even without the vulnerable code\u2019s usage within your codebase.\\n    - Unreachable \u2014 this type of exposure means that the finding has detected a vulnerable dependency but the vulnerable code is not used in your codebase.\\n    - Undetermined \u2014 Reachability analysis has not been performed on this finding, therefore its exposure is undetermined.\\n- Historical rules (also known as parity rules) are now enabled by default for new personal and organizational accounts. Existing organizations can reach out to [support@semgrep.com](mailto:support@semgrep.com) to enable parity rules by default.\\n- Semgrep Supply Chain scans now understand `maven_dep_tree.txt` files that are made of multiple smaller `maven_dep_tree.txt` files concatenated with`cat`. To make use of this functionality, create a script or command using the `cat` command as a step in your CI pipeline.\\n\\n## Documentation\\n\\n### Added\\n\\n- Created a new section on [Member scoped access tokens](/deployment/teams#member-scoped-access-tokens).\\n\\n### Changed\\n\\n- Updated [Tagging projects](/semgrep-appsec-platform/tags) document.\\n- Expanded, clarified, and improved licensing information in [FAQs](/faq/overview#how-are-semgrep-and-its-rules-licensed). See sections such as [I\u2019m a security professional. Do I have to pay for Semgrep?](/faq/overview#im-a-security-professional-do-i-have-to-pay-for-semgrep) or [Can I ship my own code analysis software that uses Semgrep?](/faq/overview#can-i-ship-my-own-code-analysis-software-that-uses-semgrep-ce).\\n- Updated [Private rules](/writing-rules/private-rules) documentation. Added section about [Creating private rules](/writing-rules/private-rules/#creating-private-rules) and [Deleting private rules](/writing-rules/private-rules/#deleting-private-rules)."},{"id":"february-2023","metadata":{"permalink":"/docs/release-notes/february-2023","source":"@site/release-notes/february-2023.md","title":"February 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-02-28T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.325,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"february-2023","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-02-28T10:00","title":"February 2023"},"unlisted":false,"prevItem":{"title":"March 2023","permalink":"/docs/release-notes/march-2023"},"nextItem":{"title":"Rule updates","permalink":"/docs/release-notes/rule-updates"}},"content":"The following updates were made to Semgrep in February 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Important update\\n\\n- Semgrep CLI is now officially renamed to **Semgrep open-source (OSS) Engine**. As of this update, this documentation uses the term Semgrep CLI for Semgrep command-line interface (CLI) which you can utilize for several products, such as Semgrep OSS, Semgrep Code, and Semgrep Supply Chain.\\n- Team tier rules are now renamed to Pro Rules. **Pro rules** are created by Semgrep, Inc for security and software engineers who need accurate findings. These rules were previously called Team tier rules. As of this update, these rules are officially called the **[Pro rules](/semgrep-code/pro-rules)** and are available with the [Team or higher tier](https://semgrep.dev/pricing).\\n- DeepSemgrep has been bundled with other functionalities to offer you **Semgrep Pro Engine**. Semgrep Pro Engine is fully available for [Team or higher tier](https://semgrep.dev/pricing) users. See the [DeepSemgrep \u2192 Semgrep Pro Engine](#deepsemgrep--semgrep-pro-engine) update below for more details.\\n\\n## Semgrep CLI \u2192 Semgrep OSS Engine\\n\\nThese release notes include upgrades for versions ranging between 1.8.0 and 1.13.0.\\n\\n- Semgrep CLI is now Semgrep OSS Engine!\\n- Newly added or upgraded [supported languages](/supported-languages):\\n    - Experimental support for Clojure, Lisp, Scheme, XML, Jsonnet.\\n    - Beta support for Rust.\\n\\n- taint-mode: Taint propagators can now specify `by-side-effect`, just like sources and sanitizers. However, the default value of `by-side-effect` for propagators is `true` (unlike for sources or sanitizers). When using rule option `taint_assume_safe_functions: true`, this allows specifying functions that must propagate taint, for example:\\n\\n    Without `by-side-effect: true`, `unsafe_function` itself would be tainted by side-effect, and subsequent invocations of this function, even if the arguments were safe, would be tainted.\\n\\n    ```yaml\\n    pattern-propagators:\\n      - by-side-effect: false\\n        patterns:\\n          - pattern-inside: $F(..., $X, ...)\\n          - focus-metavariable: $F\\n          - pattern-either:\\n              - pattern: unsafe_function\\n        from: $X\\n        to: $F`\\n    ```\\n- Allow metavariable-pattern clauses that use `language: generic` to potentially match any metavariable binding kind. For example, with the pattern `foo($...ARGS)`, it is now possible to use a `metavariable-pattern` on `$...ARGS` with `language: generic`, and match using generic mode against whatever text `$...ARGS` is bound to.\\n\\n## DeepSemgrep \u2192 Semgrep Pro Engine\\n\\n- DeepSemgrep has been bundled with other functionalities to offer you **Semgrep Pro Engine**! Semgrep Pro Engine is fully available for [Team or higher tier](https://semgrep.dev/pricing) users. See [Semgrep Pro](/semgrep-code/semgrep-pro-engine-intro) documentation.\\n- Experimental support for Apex language is now available in Semgrep Pro Engine.\\n- The following already **deprecated** flags have been completely removed and substituted:\\n    - `-deep` has been removed and substituted by `-pro`.\\n    - `-interfile` has been removed and substituted by `-pro`.\\n    - `-interproc` has been removed and substituted by `-pro-intrafile`.\\n- Removed already **deprecated** command:\\n`install-deep-semgrep` has been removed and substituted by `install-semgrep-pro`.\\n\\n## Semgrep App \u2192 Semgrep Cloud Platform\\n\\n- Semgrep App is now Semgrep Cloud Platform!\\n- Group by rule became the default view on the Findings page (now labeled as **Code** page) of Semgrep Cloud Platform. This view enables you to see which rules detected certain findings. You can always switch to the old no grouping view. For more information, see [Grouping by rule](/semgrep-code/findings/#group-findings).\\n    ![Screenshot of the Findings page with findings grouped by rule](/img/app-findings.png)<br />\\n- Taint analysis traces are now displayed on the finding detail page, helping you to track tainted data as they propagate through your code. See [Viewing the path of tainted data](/semgrep-code/findings/#dataflow-traces) to try out this feature.\\n    ![Data flow in Finding details page](/img/cloud-platform-findings-details-data-flow.png)<br />\\n\\n## Semgrep Supply Chain\\n\\n- Semgrep Supply Chain now displays a summary of vulnerabilities and scan data in the **Semgrep Cloud Platform** > **Dashboard** page. This enables users to view a report of findings for both their first-party and third-party code.\\n- Java is now a Generally Available language in Semgrep Supply Chain.\\n- Various fixes and improvements to performance.\\n\\n## Semgrep Registry\\n\\n- When you now click on a hyperlink header with the rule name in [Semgrep Registry](https://semgrep.dev/explore), the link opens a new tab with the rule in either the Semgrep Playground (if you are logged out) or in Semgrep Editor (if you are logged in). This means that you can keep open the Semgrep Registry page and easily check and modify rules.\\n\\n## Documentation\\n\\n- Slight improvements to relevancy in Semgrep Docs\u2019s search bar.\\n- Updates to **Supported Languages** > **Semgrep Supply Chain** and **Semgrep Code** > **Semgrep Pro Engine**.\\n- Updates to **Semgrep Code** > **Alerts and Notifications** to consolidate all methods to send and receive scan data, such as findings.\\n- Updates to **Pricing and Billing** to reflect the differences between Semgrep OSS Engine and Semgrep Code.\\n- Added new documentation category Semgrep Code.\\n- Updates to Semgrep Docs\u2019s navbar.\\n- Added [Grouping by rule](/semgrep-code/findings/#group-findings) section.\\n- Added [Viewing the path of tainted data](/semgrep-code/semgrep-pro-engine-data-flow) section and [Semgrep Pro Engine taint traces](/semgrep-code/semgrep-pro-engine-data-flow) document.\\n- Updated [Viewing details and adding notes to findings](/semgrep-code/findings/#add-notes-to-findings) section.\\n- Updated [Tagging projects](/semgrep-appsec-platform/tags) document.\\n- Iframes with rule examples in [Rule syntax](/writing-rules/rule-syntax) document have been changed to links to specific rules due to a great number of calls generated from this page. Iframes or code snippets may return in future updates.\\n- Many small updates, fixed broken links, typos, night theme logo on our home page, and overall improvements to make your experience of reading our documentation smoother."},{"id":"rule-updates","metadata":{"permalink":"/docs/release-notes/rule-updates","source":"@site/release-notes/rule-updates.mdx","title":"Rule updates","description":"Rule updates document significant rule updates made monthly.","date":"2023-02-28T10:00:00.000Z","tags":[],"readingTime":19.635,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"rule-updates","description":"Rule updates document significant rule updates made monthly.","toc_max_heading_level":3,"date":"2023-02-28T10:00"},"unlisted":false,"prevItem":{"title":"February 2023","permalink":"/docs/release-notes/february-2023"},"nextItem":{"title":"January 2023","permalink":"/docs/release-notes/january-2023"}},"content":"import LinkToRegistryRule from \\"/src/components/LinkToRegistryRule\\"\\n\\n\\n\\nThis document includes selected new rules, removed or reduced number of false positives (FP) and false negatives (FN). These new rules and their updates are made by the Semgrep community and Semgrep, Inc.\\n\\n\x3c!-- truncate --\x3e\\n\\n:::info Maintenance status\\nThis document is no longer updated. For updates, refer to the following sources:\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i> Supply Chain > Advisories](https://semgrep.dev/orgs/-/supply-chain/advisories)\\n- [<i class=\\"fas fa-external-link fa-xs\\"></i> Product updates feed](https://semgrep.dev/products/product-updates/)\\n:::\\n\\n## February 2023\\n\\n### Community rules\\n\\nThanks to [Sjord](https://github.com/Sjord), [@artem-fedorov](https://github.com/artem-fedorov) and [@gabriellesc](https://github.com/gabriellesc) for their contributions!\\n\\n#### New rules from Semgrep community and Semgrep, Inc\\n\\n- Improved coverage for security issues in Terraform: <LinkToRegistryRule ruleId=\\"terraform.aws.security\\" />\\n- Additional rules for weak ciphers in Java: <LinkToRegistryRule ruleId=\\"java.lang.security.audit.crypto\\" />\\n- Additional rules for inline JavaScript and related security issues:\\n    -  <LinkToRegistryRule ruleId=\\"html.security.audit.eval-detected.eval-detected\\" />\\n    -  <LinkToRegistryRule ruleId=\\"html.security.audit.inscure-document-method.insecure-document-method\\" />\\n\\n#### Updated Community rules\\n\\n- Added and improved autofix for many rules\\n- Improved patterns:\\n    -  <LinkToRegistryRule ruleId=\\"java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call\\" />\\n    -  <LinkToRegistryRule ruleId=\\"javascript.express.security.express-insecure-template-usage.express-insecure-template-usage\\" />\\n    -  <LinkToRegistryRule ruleId=\\"java.lang.security.audit.crypto.des-is-deprecated\\" />\\n    -  <LinkToRegistryRule ruleId=\\"java.lang.security.audit.crypto.no-null-cipher\\" />\\n    -  <LinkToRegistryRule ruleId=\\"java.lang.security.audit.crypto.rsa-no-padding\\" />\\n    -  <LinkToRegistryRule ruleId=\\"problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2.disallow-old-tls-versions2\\" />\\n- Improved accuracy:\\n    -  <LinkToRegistryRule ruleId=\\"java.spring.security.injection.tainted-html-string.tainted-html-string\\" />\\n    -  <LinkToRegistryRule ruleId=\\"generic.secrets.gitleaks.generic-api-key.generic-api-key\\" />\\n    -  <LinkToRegistryRule ruleId=\\"contrib.nodejsscan.crypto_node.node_md5\\" />\\n    -  <LinkToRegistryRule ruleId=\\"contrib.nodejsscan.crypto_node.node_sha1\\" />\\n    -  <LinkToRegistryRule ruleId=\\"dockerfile.security.last-user-is-root.last-user-is-root\\" />\\n    -  <LinkToRegistryRule ruleId=\\"generic.dockerfile.security.last-user-is-root.last-user-is-root\\" />\\n    -  <LinkToRegistryRule ruleId=\\"generic.secrets.security.detected-npm-token.detected-npm-token\\" />\\n    -  <LinkToRegistryRule ruleId=\\"php.lang.security.injection.echoed-request.echoed-request\\" />\\n- Improved rule message:\\n    -  <LinkToRegistryRule ruleId=\\"java.security.spring.audit.spring-csrf-disabled.spring-csrf-disabled\\" />\\n    -  <LinkToRegistryRule ruleId=\\"contrib.nodejsscan.crypto_node.node_md5\\" />\\n    -  <LinkToRegistryRule ruleId=\\"contrib.nodejsscan.crypto_node.node_sha1\\" />\\n    -  <LinkToRegistryRule ruleId=\\"ruby.rails.security.brakeman.check-unscoped-find.check-unscoped-find\\" />\\n    -  <LinkToRegistryRule ruleId=\\"terraform.aws.security.aws-cloudwatch-log-group-unencrypted.aws-cloudwatch-log-group-unencrypted\\" />\\n    -  <LinkToRegistryRule ruleId=\\"terraform.aws.security.aws-dynamodb-table-unencrypted.aws-dynamodb-table-unencrypted\\" />\\n    -  <LinkToRegistryRule ruleId=\\"terraform.aws.security.aws-lambda-environment-unencrypted.aws-lambda-environment-unencrypted\\" />\\n    -  <LinkToRegistryRule ruleId=\\"terraform.aws.security.aws-secretsmanager-secret-unencrypted.aws-secretsmanager-secret-unencrypted\\" />\\n- Improved metadata:\\n    -  <LinkToRegistryRule ruleId=\\"ruby.lang.security.no-eval.ruby-eval\\" />\\n    -  <LinkToRegistryRule ruleId=\\"contrib.nodejsscan.crypto_node.node_md5\\" />\\n    -  <LinkToRegistryRule ruleId=\\"contrib.nodejsscan.crypto_node.node_sha1\\" />\\n    -  <LinkToRegistryRule ruleId=\\"ruby.rails.security.brakeman.check-unscoped-find.check-unscoped-find\\" />\\n\\n### Pro rules\\n\\n#### New Pro rules\\n\\n- Improved coverage for:\\n    - Deserialization issues in Java\\n    - Deserialization issues in Python\\n    - Weak hash algorithms in JavaScript\\n    - NoSQL injection in Java\\n    - NoSQL injection in JavaScript\\n    - ReDOS in JavaScript\\n\\n## January 2023\\n\\n### Community rules\\n\\n#### New rules from Semgrep community and Semgrep, Inc\\n\\n- Thanks [johnssimon007](https://github.com/johnssimon007)! New rule for empty encryption key in Python: <LinkToRegistryRule ruleId=\\"python.cryptography.security.empty-aes-key.empty-aes-key\\" />\\n- Thanks [johnssimon007](https://github.com/johnssimon007)! New rule for header injection in Python/Flask: <LinkToRegistryRule ruleId=\\"python.flask.security.audit.host-header-injection-python\\" />\\n- Additional rule for deserialization vulnerabilities in Ruby: <LinkToRegistryRule ruleId=\\"ruby.lang.security.bad-deserialization-env.bad-deserialization-env\\" />\\n- Ported regex-based rules from Gitleaks\\n\\n#### Updated Community rules\\n\\n- Thanks [@ben-elttam](https://github.com/ben-elttam)! FP reduction in Kubernetes rules:\\n    - <LinkToRegistryRule ruleId=\\"yaml.kubernetes.security.run-as-non-root.run-as-non-root\\" />\\n    - <LinkToRegistryRule ruleId=\\"yaml.kubernetes.security.run-as-non-root-unsafe-value.run-as-non-root-unsafe-value\\" />\\n- Thanks [@artem-fedorov](https://github.com/artem-fedorov)! OWASP metadata fixed for too **many** rules to list here!\\n- Thanks [ianmuscat](https://github.com/ianmuscat)! FP reduction with additional patterns: <LinkToRegistryRule ruleId=\\"generic.ci.security.use-frozen-lockfile.use-frozen-lockfile\\" />\\n- Thanks [paisleyrob](https://github.com/paisleyrob)! FP reduction with improved patterns:\\n    - <LinkToRegistryRule ruleId=\\"c.lang.security.use-after-free.use-after-free\\"/>\\n    - <LinkToRegistryRule ruleId=\\"c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn\\"/>\\n- Thanks [rc-JoshuaZepf](https://github.com/rc-JoshuaZepf)! FP reduction with improved patterns: <LinkToRegistryRule ruleId=\\"terraform.lang.security.ec2-imdsv1-optional.ec2-imdsv1-optional\\"/>\\n- Thanks [nightshiba](https://github.com/nightshiba)! FP reduction with improved patterns: <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape\\"/>\\n- Thanks [Sjord](https://github.com/Sjord)! FP reduction with improved patterns: <LinkToRegistryRule ruleId=\\"php.lang.security.audit.assert-use-audit.assert-use-audit\\"/>\\n- FP reduction with improved pattern for taint mode:\\n    - <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-ssrf.express-ssrf\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.injection.tainted-file-path.tainted-file-path\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.injection.tainted-system-command.tainted-system-command\\" />\\n    - <LinkToRegistryRule ruleId=\\"ruby.lang.security.bad-deserialization-yaml.bad-deserialization-yaml\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.xss.direct-response-write.direct-response-write\\" />\\n- FN reduction with improved patterns for taint mode:\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.injection.tainted-file-path.tainted-file-path\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.injection.tainted-html-string.tainted-html-string\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.injection.tainted-sql-string.tainted-sql-string\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.injection.tainted-system-command.tainted-system-command\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.injection.tainted-url-host.tainted-url-host\\" />\\n- Deprecated rules:\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.cve.cve-2022-22965.cve-2022-22965\\" />\\n    - <LinkToRegistryRule ruleId=\\"php.lang.security.preg-replace-eval.preg-replace-eval\\" />\\n    - <LinkToRegistryRule ruleId=\\"html.security.missing-noopener.missing-noopener\\" />\\n    - <LinkToRegistryRule ruleId=\\"html.security.missing-noreferrer.missing-noreferrer\\" />\\n\\n### Pro rules\\n\\nThe **Pro rules** are created by Semgrep, Inc and targeted for security and software engineers who need accurate findings. These rules were previously marked as Team tier rules (see the updates below). As of this update, these rules are called the **[Pro rules](/semgrep-code/pro-rules)** and are available with the [Team or higher tier](https://semgrep.dev/pricing).\\n\\n#### New Pro rules\\n\\n- New rules for hardcoded secrets:\\n    - Database libraries for Java\\n    - Database libraries for Ruby\\n- New rules for JavaScript:\\n    - Weak symmetric cryptography\\n    - RegExp ReDos\\n    - XSS\\n    - Open Redirect\\n- New rules for Java:\\n    - SSRF in Java Servlets and Spring Framework\\n\\n#### Updated Pro rules\\n\\n- FP reduction with improved pattern for taint mode:\\n    - Command Injection in Java Servlets and Spring Framework\\n    - XSS in Java Spring Framework\\n    - XXE in Java\\n\\n## December 2022\\n\\n### Community tier\\n\\n#### New rules from Semgrep community and Semgrep, Inc\\n\\n- Thanks [@aabashkin](https://github.com/aabashkin)! Added rule for MongoDB NoSQL Injection: <LinkToRegistryRule ruleId=\\"java.mongodb.security.injection.audit.mongodb-nosqli\\" />\\n- Thanks [@rc-mattschwager](https://gihub.com/rc-mattschwager)! Added Rust security rules:\\n    - <LinkToRegistryRule ruleId=\\"rust.lang.security.args-os.args-os\\" />\\n    - <LinkToRegistryRule ruleId=\\"rust.lang.security.args.args\\" />\\n    - <LinkToRegistryRule ruleId=\\"rust.lang.security.current-exe.current-exe\\" />\\n    - <LinkToRegistryRule ruleId=\\"rust.lang.security.insecure-hashes.insecure-hashes\\" />\\n    - <LinkToRegistryRule ruleId=\\"rust.lang.security.reqwest-accept-invalid.reqwest-accept-invalid\\" />\\n    - <LinkToRegistryRule ruleId=\\"rust.lang.security.reqwest-set-sensitive.reqwest-set-sensitive\\" />\\n    - <LinkToRegistryRule ruleId=\\"rust.lang.security.rustls-dangerous.rustls-dangerous\\" />\\n    - <LinkToRegistryRule ruleId=\\"rust.lang.security.ssl-verify-none.ssl-verify-none\\" />\\n    - <LinkToRegistryRule ruleId=\\"rust.lang.security.temp-dir.temp-dir\\" />\\n    - <LinkToRegistryRule ruleId=\\"rust.lang.security.unsafe-usage.unsafe-usage\\" />\\n- Thanks [@artem-fedorov](https://github.com/artem-fedorov)! Fixed typos, spurious spaces and other formatting mistakes in many rules!\\n- Thanks [@nightshiba](https://github.com/nightshiba)! Improved SSRF detection in Flask: <LinkToRegistryRule ruleId=\\"python.flask.security.injection.ssrf-requests.ssrf-requests\\" />\\n- New rule for OS Command Injection in Argo workflows: <LinkToRegistryRule ruleId=\\"yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection\\" />\\n\\n#### Updated community tier rules\\n\\n- Thanks [@mpast](https://github.com/mpast)! FP reduction in Terraform rules for AWS and Azure:\\n    - <LinkToRegistryRule ruleId=\\"terraform.aws.best-practice.missing-aws-lb-deletion-protection.missing-aws-lb-deletion-protection\\" />\\n    - <LinkToRegistryRule ruleId=\\"terraform.azure.best-practice.azure-keyvault-recovery-enabled.azure-keyvault-recovery-enabled\\" />\\n    - <LinkToRegistryRule ruleId=\\"terraform.azure.security.azure-automation-encrypted.azure-automation-encrypted\\" />\\n- Thanks [@ItsIgnacioPortal](https://github.com/ItsIgnacioPortal)! Added external references: <LinkToRegistryRule ruleId=\\"yaml.github-actions.security.workflow-run-target-code-checkout.workflow-run-target-code-checkout\\" />\\n- FP reduction with additional sanitizers: <LinkToRegistryRule ruleId=\\"javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection\\" />\\n- FP reduction with improved pattern for taint mode: <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-open-redirect.express-open-redirect\\" />\\n- FP reduction with improved pattern for taint mode: <LinkToRegistryRule ruleId=\\"javascript.express.security.injection.tainted-sql-string.tainted-sql-string\\" />\\n- Reduced severity: <LinkToRegistryRule ruleId=\\"dockerfile.audit.dockerfile-source-not-pinned.dockerfile-source-not-pinned\\" />\\n- Added external references:\\n    - <LinkToRegistryRule ruleId=\\"ocaml.lang.best-practice.ref.ocamllint-ref-incr\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.lang.maintainability.useless-ifelse.useless-if-conditional\\" />\\n    - <LinkToRegistryRule ruleId=\\"terraform.aws.best-practice.missing-aws-lb-deletion-protection.missing-aws-lb-deletion-protection\\" />\\n    - <LinkToRegistryRule ruleId=\\"terraform.azure.best-practice.azure-keyvault-recovery-enabled.azure-keyvault-recovery-enabled\\" />\\n\\n### Team tier\\n\\n#### New and updated team tier rules\\n\\nNew rules for hardcoded secrets:\\n- Network libraries for Python and Java.\\n- Database libraries for Python.\\n- Generic secrets in JavaScript.\\n\\n- New rules for Angular.\\n- New rules for SSRF in JavaScript.\\n- New rules for Open Redirect in JavaScript.\\n- Improve existing rules for React to cover more use cases.\\n- Improve existing rules for hardcoded secrets to cover more use cases.\\n- Improve existing rules for command injection in JavaScript to cover more use cases.\\n- FP reduction for existing rules for SQLi in JavaScript.\\n- FP reduction for existing rules for hardcoded secrets in Python.\\n\\n## November 2022\\n\\n### Community tier\\n\\n#### New rules from Semgrep community and Semgrep, Inc\\n\\n- Thanks [@Sjord](https://github.com/Sjord)! Added rule for links to plaintext URLs: <LinkToRegistryRule ruleId=\\"html.security.plaintext-http-link.plaintext-http-link\\" />\\n\\n#### Updated community tier rules\\n\\n- Thanks [@harmw](https://github.com/harmw)! Match variations of auth token: <LinkToRegistryRule ruleId=\\"detected-npm-registry-auth-token\\" />\\n- Thanks [@keeganparr1](https://github.com/keeganparr1)! Arbitrary send ERC20: <LinkToRegistryRule ruleId=\\"solidity.security.arbitrary-send-erc20.arbitrary-send-erc20\\" />\\n- Thanks [@lnobrega-canarie](https://github.com/lnobrega-canarie)! Allow a template variable in the nonce attribute of a script tag: <LinkToRegistryRule ruleId=\\"python.django.security.audit.xss.var-in-script-tag.var-in-script-tag\\" />\\n- Thanks [@objectified](https://github.com/objectified)! Ignore cookies created by Spring\'s ResponseCookie builder:\\n    - <LinkToRegistryRule ruleId=\\"java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag\\" />\\n- Thanks [@kepten](https://github.com/kepten)! Update missing-integrity rule to handle HTML tags with newlines properly to reduce false positives: <LinkToRegistryRule ruleId=\\"html.security.audit.missing-integrity.missing-integrity\\" />\\n- FP reduction using taint analysis:\\n    - <LinkToRegistryRule ruleId=\\"java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.lang.correctness.use-filepath-join.use-filepath-join\\" />\\n    - Thanks to [@ianmuscat](https://github.com/ianmuscat) for reporting this! <LinkToRegistryRule ruleId=\\"php.lang.security.file-inclusion.file-inclusion\\" />\\n- Improve autofix by leveraging new [AST-based fixes](https://semgrep.dev/blog/2022/autofixing-code-with-semgrep/):\\n    - <LinkToRegistryRule ruleId=\\"javascript.dompurify.harden-dompurify-usage\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.flask.best-practice.use-jsonify.use-jsonify\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.flask.security.xss.audit.template-unquoted-attribute-var.template-unquoted-attribute-var\\" />\\n- FP reduction using typed metavariables: <LinkToRegistryRule ruleId=\\"java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call\\" />\\n- Support shebang contexts for finding dangerous command executions: <LinkToRegistryRule ruleId=\\"go.lang.security.audit.dangerous-exec-command.dangerous-exec-command\\" />\\n- Filter localhost in Python rules for requests:\\n    - <LinkToRegistryRule ruleId=\\"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context\\" />\\n- Added autofix:\\n    - <LinkToRegistryRule ruleId=\\"java.lang.security.audit.crypto.use-of-md5.use-of-md5\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils\\" />\\n- Improved external documentation references: <LinkToRegistryRule ruleId=\\"javascript.lang.security.insecure-object-assign.insecure-object-assign\\" />\\n- FP reduction by adding support for matching tuples in Python subprocess functions: <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-subprocess-use-audit.dangerous-subprocess-use-audit\\" />\\n- Improve dockerfile rule to handle the `--frozen-lockfile` argument. Thanks [@ianmuscat](https://github.com/ianmuscat) for reporting this! <LinkToRegistryRule ruleId=\\"generic.ci.security.use-frozen-lockfile.use-frozen-lockfile-yarn\\" />\\n- FP reduction Java cookie rules. Thanks to [@peter17](https://github.com/peter17) for reporting this! <LinkToRegistryRule ruleId=\\"java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite\\" />\\n- FP reduction with improved patterns for `DocumentBuilderFactory`. Thanks [@coheigea](https://github.com/coheigea) for reporting this! <LinkToRegistryRule ruleId=\\"java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing\\" />\\n\\n:::info Metadata required by security category\\nAll security rules now adopt an improved set of metadata fields. These fields are required when you contribute to Semgrep Registry with rules in security category. For more details, see [Including fields required by security category](/contributing/contributing-to-semgrep-rules-repository/#fields-required-by-the-security-category) section.\\n:::\\n\\n### Team tier\\n\\n#### New and updated team tier rules\\n\\nNew rules for hardcoded secrets:\\n- Database libraries for Python.\\n- Database libraries for JavaScript and TypeScript.\\n\\n- Improve existing rules for hardcoded secrets to cover more use cases.\\n- FP reduction for existing rules for hardcoded secrets.\\n- FP reduction for Go net/http rules.\\n\\n## October 2022\\n\\n### Community tier\\n\\n#### New rules from Semgrep community and Semgrep, Inc\\n\\n- Thanks [@mtausig](https://github.com/mtausig)! <LinkToRegistryRule ruleId=\\"csharp.dotnet.security.use_weak_rsa_encryption_padding\\" />\\n- Thanks [@Sjord](https://github.com/sjord)! <LinkToRegistryRule ruleId=\\"php.lang.security.redirect-to-request-uri\\" />\\n- <LinkToRegistryRule ruleId=\\"yaml.github-actions.security.workflow-run-target-code-checkout\\" />\\n\\n#### Updated community tier rules\\n\\n- Fixed issue where false positives were reported with multiple consecutive `<link>` tags in: <LinkToRegistryRule ruleId=\\"html.security.audit.missing-integrity\\" />\\n- Capture additional case when `ssl._create_unverified_context` is reassigned indirectly: <LinkToRegistryRule ruleId=\\"python.lang.security.unverified-ssl-context\\" />\\n- Filter case when a `dynamic` block is used inside `aws_eks_cluster`: <LinkToRegistryRule ruleId=\\"terraform.lang.security.eks-insufficient-control-plane-logging\\" />\\n- Fixed an issue where the rule was not properly scoped to Azure resources: <LinkToRegistryRule ruleId=\\"terraform.azure.security.appservice.appservice-use-secure-tls-policy\\" />\\n- Filter case when only static strings are used: <LinkToRegistryRule ruleId=\\"javascript.browser.security.raw-html-join\\" />\\n- Filter case when the user input is used as an index to a map: <LinkToRegistryRule ruleId=\\"ruby.rails.security.brakeman.check-render-local-file-include\\" />\\n- FP reduction by removing an unnecessary unanchored pattern: <LinkToRegistryRule ruleId=\\"ruby.rails.security.audit.avoid-tainted-shell-call\\" />\\n- Scope Laravel cookie rules to only scan inside files named `*session.php`:\\n    - <LinkToRegistryRule ruleId=\\"php.laravel.security.laravel-cookie-http-only\\" />\\n    - <LinkToRegistryRule ruleId=\\"php.laravel.security.laravel-cookie-long-timeout\\" />\\n    - <LinkToRegistryRule ruleId=\\"php.laravel.security.laravel-cookie-null-domain\\" />\\n    - <LinkToRegistryRule ruleId=\\"php.laravel.security.laravel-cookie-same-site\\" />\\n    - <LinkToRegistryRule ruleId=\\"php.laravel.security.laravel-cookie-secure-set\\" />\\n- Add additional taint sources: <LinkToRegistryRule ruleId=\\"php.laravel.security.laravel-unsafe-validator\\" />\\n\\n### Team tier\\n\\n#### New team rules\\n\\nNew rules for the Laravel PHP framework covering the following vulnerability classes:\\n- Code injection\\n- Command injection\\n- SQL injection\\n- Path traversal\\n- CSRF\\n- Cookie security\\n- XSS\\n- SSRF\\n\\nNew rules for Go net/http package covering the following vulnerability classes:\\n- SQL injection\\n- Command injection\\n\\n## September 2022\\n\\n### Community tier\\n\\n#### New rules from Semgrep community and Semgrep, Inc\\n\\n- 100+ new Terraform rules for GCP! Thanks @mertcoskuner!\\n- Python crypto operations with HMAC. Thanks @luisfontes19!\\n    - <LinkToRegistryRule ruleId=\\"python.cryptography.security.mode-without-authentication\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pycryptodome.security.mode-without-authentication\\" />\\n- Spring actuator rules. Thanks @malexmave!\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.audit.spring-actuator-fully-enabled-yaml\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.audit.spring-actuator-fully-enabled\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.audit.spring-actuator-non-health-enabled-yaml\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.spring.security.audit.spring-actuator-non-health-enabled\\" />\\n- Rule for persistent secrets in Docker images. Thanks @Sjord!: <LinkToRegistryRule ruleId=\\"dockerfile.security.secret-in-build-arg\\" />\\n- Rule for GitHub Actions script injection: <LinkToRegistryRule ruleId=\\"yaml.github-actions.security.github-script-injection\\" />\\n- PHP XSS rule: <LinkToRegistryRule ruleId=\\"php.lang.security.injection.echoed-request\\" />\\n\\n#### Changed community tier rules\\n\\n##### New metadata keys\\n\\nSemgrep, Inc is adding new metadata fields to better communicate the intent and importance of findings that a rule generates. The following list provides details about new metadata fields:\\n- **Likelihood**: How likely is the impact highlighted by this finding to occur? Examples:\\n    - Web application user input: HIGH\\n    - OS environment: MEDIUM\\n- **Impact**: How much damage can this issue cause? Examples:\\n    - SQL Injection: HIGH\\n    - Information disclosure: LOW\\n- **Confidence**: How confident is the author that this finding is exploitable? Examples:\\n    - User input + formatted SQL string + SQL sink + no intermediate function calls: HIGH\\n    - User input + SQL sink: MEDIUM\\n    - Formatted SQL string: LOW\\n- **Subcategory**: A list of subcategories that allows the author to specify the intent of the rule. Current values are:\\n    - **Audit**: This rule indicates the possible presence of a vulnerability, provided other conditions are present\\n    - **Vuln**: This rule is specifically looking for an exploitable vulnerability\\n- Addtionally, language rulesets (such as `p/javascript`) have been altered to include only rules that match the following conditions:\\n    - Subcategory: Vuln\\n    - Impact: HIGH\\n\\n#### Updated community tier rules\\n\\n- PyYAML rule updated for modern versions of PyYAML. This can lower the occurence of false positive findings. Thanks @shivankar-madaan: python.lang.security.deserialization.avoid-pyyaml-load\\n- Added new case for C use-after-free where freed var is used in conditional. Thanks @zhengsidie. c.lang.security.use-after-free\\n- Additional user input added. Thanks @jbergler! ruby.lang.security.no-eval\\n- Reduced false positives by filtering safe attributes. Thanks @luisfontes19! python.flask.security.open-redirect\\n- Filtered false positive cases from:\\n    - <LinkToRegistryRule ruleId=\\"generic.secrets.security.detected-slack-webhook\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.jax-rs.security.insecure-resteasy\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.xss.direct-response-write\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-open-redirect\\" />\\n    - <LinkToRegistryRule ruleId=\\"ruby.rails.security.injection.tainted-sql-string\\" />\\n    - <LinkToRegistryRule ruleId=\\"ruby.rails.security.brakeman.check-regex-dos\\" />\\n- Autofix added to the following rules:\\n    - <LinkToRegistryRule ruleId=\\"c.lang.correctness.c-string-equality\\" />\\n    - <LinkToRegistryRule ruleId=\\"csharp.lang.correctness.sslcertificatetrust.sslcertificatetrust-handshake-no-trust\\" />\\n    - <LinkToRegistryRule ruleId=\\"dockerfile.best-practice.maintainer-is-deprecated\\" />\\n    - <LinkToRegistryRule ruleId=\\"dockerfile.best-practice.use-shell-instruction\\" />\\n    - <LinkToRegistryRule ruleId=\\"generic.ci.security.use-frozen-lockfile\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.lang.security.audit.net.use-tls\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.lang.security.filepath-clean-misuse\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.lang.security.audit.cbc-padding-oracle\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.lang.security.audit.crypto.des-is-deprecated\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.dompurify\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.distributed.security\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.django.security.audit.unvalidated-password\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.jinja2.security.audit.autoescape-disabled-false\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.jinja2.security.audit.missing-autoescape-disabled\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.lang.correctness.exit\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.lang.correctness.unchecked-returns\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pyramid.audit.authtkt-cookie-httponly-unsafe-value\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pyramid.audit.authtkt-cookie-samesite\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pyramid.audit.authtkt-cookie-secure-unsafe-value\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pyramid.audit.csrf-check-disabled\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pyramid.audit.csrf-origin-check-disabled-globally\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pyramid.audit.csrf-origin-check-disabled\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pyramid.audit.set-cookie-httponly-unsafe-value\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pyramid.audit.set-cookie-samesite-unsafe-value\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pyramid.audit.set-cookie-secure-unsafe-value\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pyramid.security.csrf-check-disabled-globally\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.requests.best-practice.use-response-json-shortcut\\" />\\n    - <LinkToRegistryRule ruleId=\\"ruby.lang.security.bad-deserialization-yaml\\" />\\n    - <LinkToRegistryRule ruleId=\\"ruby.rails.correctness.rails-no-render-after-save\\" />\\n    - <LinkToRegistryRule ruleId=\\"yaml.kubernetes.best-practice.no-fractional-cpu-limits\\" />\\n\\n#### Deprecated community tier rules\\n\\nThese rules no longer produce findings:\\n\\n- <LinkToRegistryRule ruleId=\\"javascript.lang.security.detect-non-literal-require\\" />\\n\\n## August 2022\\n\\n### Community tier\\n\\n#### New rules from Semgrep community and Semgrep, Inc\\n\\n- <LinkToRegistryRule ruleId=\\"csharp.lang.security.ad.jwt-tokenvalidationparameters-no-expiry-validation.jwt-tokenvalidationparameters-no-expiry-validation\\" />\\n- Thanks @securecodeninja! <LinkToRegistryRule ruleId=\\"jwt-securitytoken-no-expiration.jwt-securitytoken-no-expiration\\" />\\n\\n#### Updated community tier rules\\n\\n- Fixed taint source to focus on function argument in <LinkToRegistryRule ruleId=\\"csharp.dotnet.security.audit.mass-assignment.mass-assignment\\" />.\\n- Updated various secrets-related rules:\\n    - Added more patterns for hardcoded secrets in `express-session` <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret\\" />.\\n    - Added more import patterns to catch more cases <LinkToRegistryRule ruleId=\\"javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret\\" />.\\n    - Changed from ERROR to WARNING <LinkToRegistryRule ruleId=\\"javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret\\" />.\\n    - Updated to highlight smaller, relevant ranges of code:\\n        - <LinkToRegistryRule ruleId=\\"java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret\\" />\\n        - <LinkToRegistryRule ruleId=\\"terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials\\" />\\n        - <LinkToRegistryRule ruleId=\\"terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials\\" />\\n    - False positive (FP) reduction, updated in taint mode to provide more context:\\n        - <LinkToRegistryRule ruleId=\\"go.jwt-go.security.jwt.hardcoded-jwt-key\\" />\\n        - <LinkToRegistryRule ruleId=\\"javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret\\" />\\n        - <LinkToRegistryRule ruleId=\\"python.boto3.security.hardcoded-token.hardcoded-token\\" />\\n- Updated to work with multi flags such as `-yqq` in <LinkToRegistryRule ruleId=\\"dockerfile.correctness.missing-assume-yes-switch.missing-assume-yes-switch\\" />.\\n- Updated to taint mode and added more filesystem sources <LinkToRegistryRule ruleId=\\"javascript.lang.security.audit.detect-non-literal-fs-filename.detect-non-literal-fs-filename\\" />.\\n- Restricted sources to remove unlikely user input <LinkToRegistryRule ruleId=\\"ruby.rails.security.audit.avoid-tainted-shell-call.avoid-tainted-shell-call\\" />.\\n- Added a pattern for `escapeHtml={false}` <LinkToRegistryRule ruleId=\\"typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html\\" />.\\n- Added a pattern for detecting manual user-supplied inputs <LinkToRegistryRule ruleId=\\"yaml.github-actions.security.run-shell-injection.run-shell-injection\\" />.\\n- Updated to highlight smaller, relevant ranges of code:\\n    - <LinkToRegistryRule ruleId=\\"ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller\\" />\\n    - <LinkToRegistryRule ruleId=\\"ruby.rails.security.injection.tainted-sql-string.tainted-sql-string\\" />\\n- FP reduction: updated to taint mode to provide more context:\\n    - <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.xss.direct-response-write.direct-response-write\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.lang.security.detect-child-process.detect-child-process\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method\\" />\\n    - <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-unsanitized-property.react-unsanitized-property\\" />\\n\\n#### Deprecated community tier rules\\n\\nSemgrep does no longer match anything with the following rules:\\n\\n- <LinkToRegistryRule ruleId=\\"javascript.jose.security.jwt-exposed-credentials.jwt-exposed-credentials\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.jsonwebtoken.security.jwt-exposed-credentials.jwt-exposed-credentials\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.lang.security.audit.non-constant-sql-query.non-constant-sql-query\\" />\\n- <LinkToRegistryRule ruleId=\\"python.django.security.audit.xss.template-translate-no-escape.template-translate-no-escape\\" />\\n\\n### Team tier\\n\\n#### New Team tier rules\\n\\n- <LinkToRegistryRule ruleId=\\"javascript.express.express-child-process.express-child-process\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.express-fs-filename.express-fs-filename\\" />\\n- <LinkToRegistryRule ruleId=\\"typescript.typescript.node.security.node-rsa-weak-key.node-rsa-weak-key\\" />\\n\\n- New Go rules:\\n    - <LinkToRegistryRule ruleId=\\"go.net.active-debug-code.print-stack-trace.print-stack-trace\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.net.active-debug-code.write-pprof-profile-output.write-pprof-profile-output\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.net.command-injection.net-http-command-injection-taint.net-http-command-injection-taint\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.net.sql.go-vanillasql-format-string-sqli-taint.go-vanillasql-format-string-sqli-taint\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.net.sql.pg-orm-sqli-taint.pg-orm-sqli-taint\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.net.sql.pg-sqli-taint.pg-sqli-taint\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.net.sql.pgx-sqli-taint.pgx-sqli-taint\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.net.ssrf.http-ssrf-taint.http-ssrf-taint\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.net.xss.formatted-template-string-taint.formatted-template-string-taint\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.net.xss.no-direct-write-to-responsewriter-taint.no-direct-write-to-responsewriter-taint\\" />\\n    - <LinkToRegistryRule ruleId=\\"go.net.xxe.libxml2-xxe-taint.libxml2-xxe-taint\\" />\\n\\n- New secrets detection rules which try to resolve cases with hardcoded strings used as a secrets in code:\\n    - <LinkToRegistryRule ruleId=\\"csharp.jwt-dotnet.jwt-dotnet-hardcoded-secret.jwt-dotnet-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"csharp.lang.security.system.directoryentry-hardcoded-secret.directoryentry-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"csharp.lang.security.system.networkcredential-hardcoded-secret.networkcredential-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"csharp.lang.security.system.oracleconnectionstringbuilder-hardcoded-secret.oracleconnectionstringbuilder-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"csharp.lang.security.system.passwordauthenticationmethod-hardcoded-secret.passwordauthenticationmethod-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"csharp.lang.security.system.sqlconnection-hardcoded-secret.sqlconnection-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"csharp.lang.security.system.sqlconnectionstringbuilder-hardcoded-secret.sqlconnectionstringbuilder-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"csharp.mongo.csharp-mongo-hardcoded-secret.csharp-mongo-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"csharp.postgres.npgsqlconnectionstringbuilder-hardcoded-secret.npgsqlconnectionstringbuilder-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.jsch.jsch-hardcoded-secret.jsch-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.lang.security.properties.properties-hardcoded-secret.properties-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.lang.security.sql.drivermanager-hardcoded-secret.drivermanager-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.lang.security.system.system-setproperty-hardcoded-secret.system-setproperty-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.mongo.java-mongo-hardcoded-secret.java-mongo-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"java.mysql.mysql-jdbc-hardcoded-secret.mysql-jdbc-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.knex.node-knex-hardcoded-secret.node-knex-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.mongoose.node-mongoose-hardcoded-secret.node-mongoose-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.mssql.node-mysql-hardcoded-secret.node-mssql-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.mysql.node-mysql-hardcoded-secret.node-mysql-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.pg.node-pg-hardcoded-secret.node-pg-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"javascript.sequelize.node-sequelize-hardcoded-secret.node-sequelize-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.ldap3.python-ldap3-hardcoded-secret.python-ldap3-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.psycopg2.python-psycopg2-hardcoded-secret.python-psycopg2-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pymongo.python-mongo-hardcoded-secret.python-mongo-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pymongo.python-pymongo-hardcoded-secret.python-pymongo-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.pymysql.python-pymysql-hardcoded-secret.python-pymysql-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.sqlalchemy.python-sqlalchemy-hardcoded-secret.python-sqlalchemy-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.tormysql.python-tormysql-hardcoded-secret.python-tormysql-hardcoded-secret\\" />\\n    - <LinkToRegistryRule ruleId=\\"python.webrepl.python-webrepl-hardcoded-secret.python-webrepl-hardcoded-secret\\" />\\n\\n#### Updated Team tier rules\\n\\nAdded more sinks for the following rules:\\n\\n- <LinkToRegistryRule ruleId=\\"paid.paid.typescript.react.react-refs-prop.react-refs-prop\\" />\\n- <LinkToRegistryRule ruleId=\\"paid.paid.typescript.react.react-refs-url.react-refs-url\\" />\\n\\n## July 2022\\n\\n### New rules from Segmrep community and Semgrep, Inc\\n\\nNew rules from Semgrep community:\\n- Thanks to @securecodeninja!\\n  - <LinkToRegistryRule ruleId=\\"csharp.dotnet.security.audit.mass-assignment\\" />\\n  - <LinkToRegistryRule ruleId=\\"csharp.lang.security.cryptography.unsigned-security-token\\" />\\n  - <LinkToRegistryRule ruleId=\\"csharp.lang.security.open-redirect\\" />\\n  - <LinkToRegistryRule ruleId=\\"csharp.lang.security.stacktrace-disclosure\\" />\\n  - <LinkToRegistryRule ruleId=\\"csharp.dotnet.security.audit.missing-or-broken-authorization.missing-or-broken-authorization\\" />\\n  - <LinkToRegistryRule ruleId=\\"csharp.dotnet.security.audit.open-directory-listing.open-directory-listing\\" />\\n  - <LinkToRegistryRule ruleId=\\"csharp.dotnet.security.audit.misconfigured-lockout-option.misconfigured-lockout-option\\" />\\n  - <LinkToRegistryRule ruleId=\\"csharp.dotnet.security.audit.razor-use-of-htmlstring.razor-use-of-htmlstring\\" />\\n  - <LinkToRegistryRule ruleId=\\"csharp.dotnet.security.audit.ldap-injection\\" />\\n  - <LinkToRegistryRule ruleId=\\"csharp.dotnet.security.audit.xpath-injection\\" />\\n\\nNew rules have been added with taint sources:\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-asyncio-create-exec-tainted-env-args\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-code-run-tainted-env-args\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-os-exec-tainted-env-args\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-spawn-process-tainted-env-args\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-subprocess-use-tainted-env-args\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-system-call-tainted-env-args\\" />\\n\\nThere are now 80 [team tier](https://semgrep.dev/pricing) only rules covering Java, PHP, JavaScript, and TypeScript available in the [Semgrep Registry](https://semgrep.dev/explore). These rules are designed to have higher precision and lower false positive rates.\\n\\n### Rule changes and updates\\n\\n- Added additional import scenarios for os.system <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-system-call\\" />\\n\\n- Rewritten with taint mode:\\n  - <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-path-join-resolve-traversal\\" />\\n  - <LinkToRegistryRule ruleId=\\"javascript.lang.security.audit.code-string-concat\\" />\\n  - <LinkToRegistryRule ruleId=\\"javascript.lang.security.audit.path-traversal.path-join-resolve-traversal\\" />\\n- Updated precision of source with `focus-metavariable`:\\n  - <LinkToRegistryRule ruleId=\\"javascript.express.security.injection.tainted-sql-string\\" />\\n  - <LinkToRegistryRule ruleId=\\"javascript.lang.security.audit.sqli.node-mysql-sqli\\" />\\n- Added additional filters for acceptable SSL policies: <LinkToRegistryRule ruleId=\\"terraform.aws.security.insecure-load-balancer-tls-version\\" />\\n- Added sanitizers: <LinkToRegistryRule ruleId=\\"typescript.angular.security.audit.angular-domsanitizer\\" />\\n- Added sanitizers, added constant string filter: <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-dangerouslysetinnerhtml\\" />\\n- Uses taint mode to remove uninteresting sources: <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-href-var\\" />\\n- Remove for loop case due to high false positive (FP) rate: <LinkToRegistryRule ruleId=\\"javascript.lang.security.audit.path-traversal.path-join-resolve-traversal\\" />\\n- FP reduction by removing cases where user input is likely a number type:\\n  - <LinkToRegistryRule ruleId=\\"javascript.lang.security.audit.sqli.node-knex-sqli\\" />\\n  - <LinkToRegistryRule ruleId=\\"javascript.lang.security.audit.sqli.node-mysql-sqli\\" />\\n- Exclude Error and Exception classes from results: <LinkToRegistryRule ruleId=\\"ruby.lang.security.model-attributes-attr-accessible\\" />\\n- FP reduction: more specific sources: <LinkToRegistryRule ruleId=\\"typescript.angular.security.audit.angular-domsanitizer\\" />\\n- FP reduction by limiting to more specific cases: <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-dangerouslysetinnerhtml\\" />\\n- Removed 1 case with high FP likelihood: <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-href-var\\" />\\n- Altered behavior:\\n  - <LinkToRegistryRule ruleId=\\"generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri\\" />\\n  - <LinkToRegistryRule ruleId=\\"python.requests.best-practice.use-timeout (fix autofix)\\" />\\n- Removed FPs:\\n  - <LinkToRegistryRule ruleId=\\"javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression\\" />\\n  - <LinkToRegistryRule ruleId=\\"dockerfile.best-practice.use-workdir.use-workdir (improved message)\\" />\\n- Removed FPs: <LinkToRegistryRule ruleId=\\"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse \\" />\\n- Fixed bug: <LinkToRegistryRule ruleId=\\"python.pyramid.security.sqlalchemy-sql-injection.pyramid-sqlalchemy-sql-injection \\" />\\n- Removed FPs: <LinkToRegistryRule ruleId=\\"terraform.azure.security.appservice.appservice-account-identity-registered.appservice-account-identity-registered \\" />\\n\\nReduced severity to INFO:\\n- <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-jwt-decoded-property\\" />\\n- <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-jwt-in-localstorage\\" />\\n- <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-missing-noopener\\" />\\n- <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-missing-noreferrer\\" />\\n\\nLimit sources to specific properties of Request object rather than all properties:\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-libxml-noent\\" />\\n- <LinkToRegistryRule ruleId=\\"avascript.express.security.audit.express-path-join-resolve-traversal\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.remote-property-injection\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.cors-misconfiguration\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.express-data-exfiltration\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.express-expat-xxe\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.express-insecure-template-usage\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.express-sandbox-injection\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.express-vm-injection\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.express-vm2-injection\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.injection.raw-html-format\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.x-frame-options-misconfiguration\\" />\\n\\nThe `python.lang.security.audit.dangerous` rules have been reworked. All Python -dangerous- rules have had their confidence level changed to LOW. Renamed rules:\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-asyncio-create-exec\\" /> renamed to <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-asyncio-create-exec-audit\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-asyncio-exec\\" /> renamed to <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-asyncio-exec-audit\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-asyncio-shell\\" /> renamed to <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-asyncio-shell-audit\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-code-run\\" /> renamed to <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-code-run-audit\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-os-exec\\" /> renamed to <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-os-exec-audit\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-spawn-process\\" /> renamed to <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-spawn-process-audit\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-subinterpreters-run-string\\" /> renamed to <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-subinterpreters-run-string-audit\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-subprocess-use\\" /> renamed to <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-subprocess-use-audit\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-system-call\\" /> renamed to <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-system-call-audit\\" />\\n- <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-testcapi-run-in-subinterp\\" /> renamed to <LinkToRegistryRule ruleId=\\"python.lang.security.audit.dangerous-testcapi-run-in-subinterp-audit\\" />\\n\\nAdded to `p/default` (`p/default` are rules that run automatically with `semgrep --config p/default`):\\n- <LinkToRegistryRule ruleId=\\"javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-libxml-noent.express-libxml-noent \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-res-sendfile.express-res-sendfile \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-ssrf.express-ssrf \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.remote-property-injection.remote-property-injection \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key \\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection \\" />\\n\\nRemoved from `p/default` in Semgrep Registry:\\n<details>\\n<summary>Expand the list with all removed rules</summary>\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.archive_path_overwrite.admzip_path_overwrite\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.archive_path_overwrite.tar_path_overwrite\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.archive_path_overwrite.zip_path_overwrite\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.archive_path_overwrite.zip_path_overwrite2\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.buffer_noassert.buffer_noassert\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.crypto_node.node_aes_ecb\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.crypto_node.node_aes_noiv\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.crypto_node.node_insecure_random_generator\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.crypto_node.node_md5\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.crypto_node.node_sha1\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.crypto_node.node_weak_crypto\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.error_disclosure.node_error_disclosure\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_deserialize.node_deserialize\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_deserialize.serializetojs_deserialize\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_drpc_deserialize.grpc_insecure_connection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_grpc_deserialize.grpc_insecure_connection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_node.eval_nodejs\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_require.eval_require\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_sandbox.sandbox_code_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_vm2_injection.vm2_code_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_vm2_injection.vm2_context_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_vm_injection.vm_code_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_vm_injection.vm_compilefunction_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_vm_injection.vm_runincontext_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_vm_injection.vm_runinnewcontext_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.eval_yaml_deserialize.yaml_deserialize\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.exec_os_command.generic_os_command_exec\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.exec_os_command.generic_os_command_exec2\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.exec_shelljs.shelljs_os_command_exec\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.express_bodyparser_dos.express_bodyparser\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.express_hbs_lfr.express_lfr\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.express_hbs_lfr.express_lfr_warning\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_anti_csrf.anti_csrf_control\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_check_crossdomain\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_check_csp\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_check_expect_ct\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_dns_prefetch\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_feature_policy\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_frame_guard\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_hsts\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_ienoopen\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_nosniff\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_referrer_policy\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_x_powered_by\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_helmet_checks.helmet_header_xss_filter\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.good_ratelimiting.rate_limit_control\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.hardcoded_passport.hardcoded_passport_secret\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_cookie.cookie_session_default\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_cookie.cookie_session_no_domain\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_cookie.cookie_session_no_httponly\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_cookie.cookie_session_no_maxage\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_cookie.cookie_session_no_path\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_cookie.cookie_session_no_samesite\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_cookie.cookie_session_no_secure\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_cors_star.express_cors\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_cors_star.generic_cors\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_helmet_disabled.helmet_feature_disabled\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_injection.generic_header_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_xss_protection.header_xss_generic\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.header_xss_protection.header_xss_lusca\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.host_header_injection.host_header_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.jwt_exposed_credentials.jwt_exposed_credentials\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.jwt_exposed_data.jwt_exposed_data\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.jwt_express_hardcoded.jwt_express_hardcoded\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.jwt_hardcoded.hardcoded_jwt_secret\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.jwt_none_algorithm.node_jwt_none_algorithm\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.jwt_not_revoked.jwt_not_revoked\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.layer7_object_dos.layer7_object_dos\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.logic_bypass.node_logic_bypass\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.nosql_injection.node_nosqli_js_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.path_traversal.generic_path_traversal\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.regex_dos.regex_dos\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.regex_injection.regex_injection_dos\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.resolve_path_traversal.join_resolve_path_traversal\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electron.electron_allow_http\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electron.electron_blink_integration\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electron.electron_context_isolation\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electron.electron_disable_websecurity\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electron.electron_experimental_features\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electron.electron_nodejs_integration\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electronjs.electron_allow_http\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electronjs.electron_blink_integration\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electronjs.electron_context_isolation\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electronjs.electron_disable_websecurity\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electronjs.electron_experimental_features\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.security_electronjs.electron_nodejs_integration\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.sequelize_tls.sequelize_tls\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.sequelize_tls_validation.sequelize_tls_cert_validation\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.sequelize_weak_tls.sequelize_weak_tls\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.server_side_template_injection.server_side_template_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.sql_injection.node_knex_sqli_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.sql_injection.node_sqli_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.sql_injection_knex.node_knex_sqli_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.ssrf_node.node_ssrf\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.ssrf_phantomjs.phantom_ssrf\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.ssrf_playwright.playwright_ssrf\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.ssrf_puppeteer.puppeteer_ssrf\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.ssrf_wkhtmltoimage.wkhtmltoimage_ssrf\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.ssrf_wkhtmltopdf.wkhtmltopdf_ssrf\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.timing_attack_node.node_timing_attack\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.tls_node.node_curl_ssl_verify_disable\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.tls_node.node_tls_reject\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xml_entity_expansion_dos.node_entity_expansion\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xpathi_node.node_xpath_injection\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xss_mustache_escape.xss_disable_mustache_escape\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xss_node.express_xss\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xss_serialize_js.xss_serialize_javascript\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xss_templates.handlebars_noescape\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xss_templates.handlebars_safestring\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xss_templates.squirrelly_autoescape\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xxe_expat.xxe_expat\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xxe_node.node_xxe\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xxe_sax.xxe_sax\\" />\\n- <LinkToRegistryRule ruleId=\\"ajinabraham.njsscan.xxe_xml2json.xxe_xml2json\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-commands-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-compile-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-cryptography-attribute-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-dl-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-duo-client-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-eval-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-exec-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-gl-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-hashlib-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-itsdangerous-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-marshal-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-onelogin-attribute-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-os-exec-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-os-temp-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-pickle-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-popen2-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-pycrypto-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-requests-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-shelve-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-simplexmlrpcserver-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-ssl-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-subprocess-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-tarfile-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-tempfile-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-urllib3-connections-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-urllib3-warnings-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-xml-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-xmlsec-attribute-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-yaml-use\\" />\\n- <LinkToRegistryRule ruleId=\\"contrib.dlint.dlint-equivalent.insecure-zipfile-use\\" />\\n- <LinkToRegistryRule ruleId=\\"generic.ci.security.use-frozen-lockfile.use-frozen-lockfile\\" />\\n- <LinkToRegistryRule ruleId=\\"generic.ci.security.use-frozen-lockfile.use-frozen-lockfile-npm\\" />\\n- <LinkToRegistryRule ruleId=\\"generic.ci.security.use-frozen-lockfile.use-frozen-lockfile-pip\\" />\\n- <LinkToRegistryRule ruleId=\\"generic.ci.security.use-frozen-lockfile.use-frozen-lockfile-pipenv\\" />\\n- <LinkToRegistryRule ruleId=\\"generic.ci.security.use-frozen-lockfile.use-frozen-lockfile-yarn\\" />\\n- <LinkToRegistryRule ruleId=\\"generic.html-templates.security.var-in-href.var-in-href\\" />\\n- <LinkToRegistryRule ruleId=\\"generic.nginx.security.request-host-used.request-host-used\\" />\\n- <LinkToRegistryRule ruleId=\\"generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.browser.security.raw-html-join.raw-html-join\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.remote-property-injection.remote-property-injection\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.res-render-injection.res-render-injection\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.express.security.audit.xss.mustache.var-in-script-tag.var-in-script-tag\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.lang.correctness.no-replaceall.no-replaceall\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.lang.security.audit.prototype-pollution.prototype-pollution-assignment.prototype-pollution-assignment\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.lang.security.detect-non-literal-require.detect-non-literal-require\\" />\\n- <LinkToRegistryRule ruleId=\\"javascript.sequelize.security.audit.sequelize-raw-query.sequelize-raw-query\\" />\\n- <LinkToRegistryRule ruleId=\\"python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe\\" />\\n- <LinkToRegistryRule ruleId=\\"python.flask.security.xss.audit.template-unquoted-attribute-var.template-unquoted-attribute-var\\" />\\n- <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-missing-noreferrer.react-missing-noreferrer\\" />\\n- <LinkToRegistryRule ruleId=\\"typescript.react.security.audit.react-unsanitized-property.react-unsanitized-property\\" />\\n</details>\\n\\nOther:\\n- Fixed message typo: <LinkToRegistryRule ruleId=\\"javascript.lang.best-practice.leftover_debugging\\" />"},{"id":"january-2023","metadata":{"permalink":"/docs/release-notes/january-2023","source":"@site/release-notes/january-2023.md","title":"January 2023","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2023-01-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.94,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"january-2023","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2023-01-30T10:00","title":"January 2023"},"unlisted":false,"prevItem":{"title":"Rule updates","permalink":"/docs/release-notes/rule-updates"},"nextItem":{"title":"December 2022","permalink":"/docs/release-notes/december-2022"}},"content":"The following updates were made to Semgrep in January 2023.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep Supply Chain\\n\\n### Additions\\n\\n- Added a new **Exposure** category called **Not analyzed** within **Semgrep App > Vulnerabilities** page. Users who have enabled **Historical coverage** rules now see vulnerabilities detected from those rules under **Not analyzed**. This is because Historical coverage rules do not have reachability patterns, therefore it is not known if their findings are reachable or unreachable.\\n- The **Semgrep App** > **Advisories** page displays a new tag, **Reachability: review manually** for rules where the reachability of a finding depends on infrastructure usage patterns, instead of code patterns. Findings that appear from these rules appear under **Exposure > Reachable** within **Semgrep App > Vulnerabilities**, and include a short hint on how to determine if your infrastructure is vulnerable.\\n    ![Semgrep App Advisories, Reachability review manually](/img/release-notes-semgrep-app-reachability-review.png)\\n- You can now give feedback for **Supply Chain** rules. In the **Semgrep App > Advisories** page, click on an advisory to expand on it and click on the **Leave feedback for this rule** button.\\n    ![Give rule feedback menu](/img/release-notes-give-rule-feedback.png)\\n- Added `exposure` property to SARIF output for Semgrep Supply Chain findings.\\n\\n### Changes\\n\\n- The **Semgrep App > Vulnerabilities** now lets you filter by whether a vulnerability is from a direct or a transitive dependency. You can find these options under the **Transitivity** filter in the Semgrep App > Vulnerabilities page. All options are selected by default.\\n- Lockfile parsers have been rewritten to be able to provide with improved error messages upon parse errors. This affects all supported ecosystems except Rust.\\n- Removed support for reading dependencies from `pom.xml` files. Instead, Semgrep Supply Chain reads dependencies from `maven_dep_tree.txt` files, which can be generated using the following command:\\n    `mvn dependency:tree -DoutputFile=maven_dep_tree.txt`\\n    - You must generate a maven_dep_tree.txt for every `pom.xml` in your repository.\\n\\n\\n## Semgrep App\\n\\n### Additions\\n\\n- Display findings grouped together by rules that detected them! Group by rule view helps you to identify patterns in your code and to triage findings easily. Findings grouped by rule are sorted by count from high to low. This enables you to know which rules have fired the most. In comparison, regularly grouped findings are sorted by their recency (most recent findings are at the top of the Findings page).\\n    ![Group by rule option on Findings page](/img/release-notes-group-by-rule.png)\\n- Semgrep API now allows you to add or remove tags to a project. See [Tagging projects](/semgrep-appsec-platform/tags) documentation.\\n\\n### Changes\\n\\n- The findings detail page has received a facelift. This update is preparing the ground for future updates and features. The following list provides an overview of the implemented improvements:\\n    - New read-only rule preview component at the bottom of the page to view the rule and test cases.\\n    - The interface is now standardized with the rest of the Findings page, showing information about the location of the finding under the heading.\\n    - New rule information card component that displays information about the rule. This information includes any references and information about the rule severity and confidence. ![Semgrep App finding details page](/img/cloud-platform-finding-details.png)\\n- Previously, new users who logged into Semgrep App using GitLab landed on a GitLab Groups page. Users then had to enable the GitLab groups they wanted to onboard, then users had to log out of Semgrep App and then log back in to complete the onboarding process. Now, new users are immediately logged in to Semgrep App.\\n  - In order to associate their Semgrep account with their GitLab Groups, users need to use the GitLab \u201cAdd Org\u201d workflow, which brings them to the GitLab Groups page. This change also addresses a bug when enabling a GitLab Group that would cause the app to crash.\\n\\n## Semgrep CLI\\n\\nThese release notes include upgrades for versions ranging between 1.3.0 and 1.6.0.\\n\\n### Additions\\n\\n- Semgrep now provides experimental support for XML, Clojure, Lisp, Scheme, Dart, and Jsonnet languages.\\n- Rust language support is now improved from Experimental to Beta!\\n- Python: Constant propagation now recognizes the idiom `cond and X or Y`,\\nas well as `True and X` and `False or X`. For example, `cond and \\"a\\" or \\"b\\"` is identified as constant string. (Issue [#6079](https://github.com/semgrep/semgrep/issues/6079))\\n\\n### Changes\\n\\n- Tests: Allow `-test` to process entire file trees rather than single files. See more information about the `semgrep --test` in the [Testing rules](/writing-rules/testing-rules) documentation. (Issue [#5487](https://github.com/semgrep/semgrep/issues/5487))\\n- metavariable-pattern: For performance reasons the [generic mode](/writing-rules/generic-pattern-matching) ignores target files that are machine-generated. However, this change prevented the use of the `metavariable-pattern` operator on the text that seemed or was machine-generated, such as an RSA key contained in a file. This issue has been fixed. Now, when the analysis is requested within a `metavariable-pattern` operator, the generic mode always matches any text even if it seems to be machine-generated.\\n\\n## Semgrep Registry\\n\\n### Changes\\n\\n- Semgrep Registry now displays gem icons on Team tier rules, and rulesets that contain Team tier rules.\\n\\n## Documentation updates\\n\\n### Additions\\n\\n- Cheat sheets have been revisited, added, improved, and rewritten:\\n    - Added a new [XML External entity (XXE) prevention for Java](/cheat-sheets/java-xxe) cheat sheet.\\n    - Added new command and code injection cheat sheets:\\n        - [Code injection prevention for Java](/cheat-sheets/java-code-injection).\\n        - [Command injection prevention for Java](/cheat-sheets/java-command-injection).\\n        - [Code injection prevention for JavaScript](/cheat-sheets/javascript-code-injection).\\n        - [Command injection prevention for JavaScript](/cheat-sheets/javascript-command-injection).\\n        - [Code injection prevention for Ruby](/cheat-sheets/ruby-code-injection).\\n        - [Command injection prevention for Ruby](/cheat-sheets/ruby-command-injection).\\n        - Many other cheat sheets (such as [Command injection prevention for Go](/cheat-sheets/go-command-injection)) now have updated examples and were enriched by other improvements.\\n- Added a new document on how to set up [notifications for Semgrep Supply Chain](/semgrep-appsec-platform/notifications) scans.\\n- Added a new section [Transform](/writing-rules/experiments/deprecated-experiments#transform) to the Extract mode documentation.\\n\\n### Changes\\n\\n- Updated Getting started with Semgrep Supply Chain with additional information on scanning [Maven projects](/semgrep-supply-chain/setup-maven).\\n- Updated documentation of Semgrep App [Findings](/semgrep-code/findings) with fresh screenshots.\\n- Updated Supported languages with [additional information on transitivity](/supported-languages#semgrep-supply-chain).\\n- Updated Semgrep App\u2019s [Tagging](/semgrep-appsec-platform/tags) documentation.\\n- Updated [Getting started with Semgrep CLI](/getting-started/quickstart)."},{"id":"december-2022","metadata":{"permalink":"/docs/release-notes/december-2022","source":"@site/release-notes/december-2022.md","title":"December 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-12-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":2.51,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"december-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-12-30T10:00","title":"December 2022"},"unlisted":false,"prevItem":{"title":"January 2023","permalink":"/docs/release-notes/january-2023"},"nextItem":{"title":"November 2022","permalink":"/docs/release-notes/november-2022"}},"content":"The following updates were made to Semgrep in December 2022.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep Supply Chain\\n\\n### Additions\\n\\n- Semgrep Supply chain now supports PR or MR comments within GitHub and GitLab repositories. This feature is enabled by default and sends comments to both GitHub and GitLab users when Semgrep Supply Chain detects **reachable vulnerabilities**.\\n- Improved load time for the Supply Chain > Vulnerabilities page for users with many vulnerabilities.\\n- Vulnerabilities are now automatically marked as fixed if a `semgrep ci` scan detects that the lockfile or reachable usages were fixed.\\n- Vulnerability cards (records that appear in **Supply Chain** > **Vulnerabilities**) now link to the source rule or advisory that detected the vulnerability. To view the source rule from the record, click the `</>` icon:\\n    ![Screenshot of the source rule option](/img/release-notes-see-source-rule.png)\\n\\n### Changes\\n\\n- Fixing a vulnerability\u2019s reachable usages now causes the original vulnerability card to be marked as fixed, and a separate card will appear for unreachable usages which can be triaged separately.\\n- Improved responsiveness of search bars within Supply Chain > Vulnerabilities and Supply Chain > Advisories.\\n\\n## Semgrep App\\n\\n### Additions\\n\\nOn the [Findings](https://semgrep.dev/orgs/-/findings/) page, you can now filter by rule category and rule confidence level.\\n\\n## Semgrep CLI\\n\\nThese release notes include upgrades for versions ranging between 1.0.0 and 1.2.1.\\n\\n### Additions\\n\\n- JSON output: Added a `max_memory_bytes` field to the output of the  `semgrep --json --time` which corresponds to the amount of memory allocated during the OCaml phase of Semgrep. This is useful for telemetry purposes.\\n- DeepSemgrep: If you have a Team tier account in Semgrep App, and you enable the DeepSemgrep setting, then `semgrep ci` automatically runs the DeepSemgrep engine instead of the regular Semgrep CLI engine on full scans (but not in PR scans). See the [DeepSemgrep](/semgrep-code/semgrep-pro-engine-intro) documentation for installation details.\\n\\n### Changes\\n\\n- Semgrep CLI does not print a summary of blocking rules unless it is invoked with `semgrep ci` subcommand. (Issue [#6651](https://github.com/semgrep/semgrep/pull/6651))\\n\\n## Documentation updates\\n\\n### Additions\\n\\n- Added a new section to Semgrep App > Single sign-on (SSO) configuration to configure Semgrep with [Microsoft Entra ID](/kb/semgrep-appsec-platform/saml-microsoft-entra-id).\\n- Added a new document **Learning Semgrep App with a demo project**.\\n- Added section [Disable rules](/semgrep-code/policies/#disable-rules).\\n- Added [Licensing document](/licensing) which provides an overview of licenses used by different Semgrep, Inc products.\\n\\n### Changes\\n\\n- Updated [Getting started with Semgrep App](/deployment/core-deployment) to clarify how permissions are used by Semgrep, such as what files are read and what features are enabled by certain permissions.\\n- Separated referential introductions from [Getting started with Semgrep Supply Chain](/semgrep-supply-chain/getting-started) into a separate document, [Overview of Semgrep Supply Chain](/semgrep-supply-chain/overview).\\n- Updated [Installing DeepSemgrep](/semgrep-code/semgrep-pro-engine-intro) section.\\n- Updated [Filtering findings](/semgrep-code/findings/#filter-findings) section with information about new filtering options.\\n- The following documents have been moved out of the Experiments section as they are now considered GA:\\n    - [Autofix](/writing-rules/autofix)\\n    - [Generic pattern matching](/writing-rules/generic-pattern-matching)\\n    - [Metavariable analysis](/writing-rules/metavariable-analysis)\\n    - Taint propagators - moved to [Taint tracking](/writing-rules/data-flow/taint-mode#propagators-pro) documentation\\n- Updated screenshots in Semgrep App documentation. Many additional improvements and fixes were made."},{"id":"november-2022","metadata":{"permalink":"/docs/release-notes/november-2022","source":"@site/release-notes/november-2022.md","title":"November 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-11-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.305,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"november-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-11-30T10:00","title":"November 2022"},"unlisted":false,"prevItem":{"title":"December 2022","permalink":"/docs/release-notes/december-2022"},"nextItem":{"title":"October 2022","permalink":"/docs/release-notes/october-2022"}},"content":"The following updates were made to Semgrep in November 2022.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep Supply Chain\\n\\n### Additions\\n\\n- Added Supply Chain support for `requirements.txt` lockfiles (requires `requirement.in` manifest files).\\n- Added support for Yarn 2 and Yarn 3 lockfiles.\\n\\n### Changes\\n\\n- Reachable Supply Chain findings no longer block pull requests when using `semgrep ci`. **Note**: Unreachable findings are non-blocking already.\\n- Previously, Semgrep Supply Chain re-scanned projects automatically every week. Now, newly added projects to Semgrep Supply Chain that use GitHub Actions are by default re-scanned every day. This update only affects newly added projects.\\n\\n## Semgrep App\\n\\n### Additions\\n\\n- When you triage a finding, Semgrep App now displays a form that asks whether the finding was a **False positive**, **Acceptable risk**, or you had **No time to fix**. For more information, see [Managing finding status](/semgrep-code/triage-remediation/#triage-statuses). ![Screenshot of Semgrep App triage menu](/img/app-findings-triage.png)\\n- When ignoring an individual finding, you can now ignore similar future findings by selecting one of the following options: **Just this file**, **This directory**, or **Parent directory**. These options specify which files and directories Semgrep App ignores. In addition, you can now remove a rule when you triage a single finding without having to go to the Rule board. To ignore a rule while triaging a finding, enable the **Remove this rule from Rule board** when triaging an individual finding. See [Ignoring individual findings](/semgrep-code/triage-remediation/#ignore-findings).\\n\\n### Changes\\n\\n- The toggle to enable **Autofix** functionality has been moved from the project settings page to the global organization [Settings](https://semgrep.dev/orgs/-/settings) page.\\n- Previously, Semgrep App re-scanned projects automatically every week. Now, newly added projects to Semgrep App that use GitHub Actions are by default re-scanned every day. This update only affects newly added projects.\\n- Many bug fixes and performance improvements were introduced to make your experience with Semgrep App much more pleasant.\\n\\n## Semgrep CLI\\n\\nThese release notes include upgrades for versions ranging between 0.120.0 and 0.123.0. Version 0.119.0 of Semgrep was intentionally skipped. Version 0.120.0 immediately follows version 0.118.0.\\n\\n### Additions\\n\\n- DeepSemgrep: Added installation path for DeepSemgrep on M1 machines.\\n- Fail gracefully and print an error message when running in unsupported Linux aarch64 or arm64 environment.\\n\\n### Changes\\n\\n- taint-mode: Semgrep\u2019s taint analysis now provides basic field sensitivity support. See [Field sensitivity](/writing-rules/data-flow/taint-mode/#field-sensitivity) section for more details.\\n\\n## Semgrep in CI\\n\\n### Changes\\n\\n- Previously, Semgrep overrode user-defined environment variables with values it detected from the CI provider. Now, user-defined environment variables take precedence (override) Semgrep\'s detected values. By enabling you to override CI variables, you are able to troubleshoot issues such as hyperlinks to code in the Findings page and receiving comments in pull requests or merge requests.\\n  - This change affects the following CI providers:\\n    - Buildkite\\n    - CircleCI\\n  - This change affects the following variables:\\n    - SEMGREP_REPO_NAME\\n    - SEMGREP_REPO_URL\\n    - SEMGREP_BRANCH\\n    - SEMGREP_JOB_URL\\n    - SEMGREP_COMMIT\\n\\n  **Note**: Previous month, this update already affected Azure Pipelines, Bitbucket Pipelines, Jenkins, and Travis CI.\\n\\n## Documentation updates\\n\\n### Additions\\n\\n#### General documentation additions\\n\\n- The [Contributing rules](/contributing/contributing-to-semgrep-rules-repository) documentation now provides sections with [General rule requirements](/contributing/contributing-to-semgrep-rules-repository#general-rule-requirements), [Semgrep registry rule requirements](/contributing/contributing-to-semgrep-rules-repository#semgrep-registry-rule-requirements), and [Including fields required by security category](/contributing/contributing-to-semgrep-rules-repository#fields-required-by-the-security-category).\\n- You may now also log in to Semgrep App from the documentation website. The **Login** button is available next to the docs search bar.\\n\\n#### Semgrep App\\n\\n- The [Tagging projects](/semgrep-appsec-platform/tags) document explains how to use tags in projects added to Semgrep App.\\n\\n#### Semgrep CLI\\n\\n- The [Experiments](/writing-rules/experiments/introduction) category now provides an introduction, in addition, the [Deprecated experiments](/writing-rules/experiments/deprecated-experiments) section is now an independent document.\\n- Added [Field sensitivity](/writing-rules/data-flow/taint-mode/#field-sensitivity) section to taint analysis documentation.\\n\\n### Changes\\n\\n- The following CI documents have been updated to reflect the latest environment variable:\\n  - [Running Semgrep in continuous integration (CI) with Semgrep App](/deployment/core-deployment)\\n  - [Running Semgrep in continuous integration (CI) without Semgrep App](/deployment/oss-deployment)\\n  - [Sample continuous integration (CI) configurations](/semgrep-ci/sample-ci-configs)\\n- Updated [Usage and billing](/usage-and-billing) page. [Semgrep Supply Chain supported languages](/supported-languages/#semgrep-supply-chain) are now part of Pricing and billing document.\\n- The `SEMGREP_TIMEOUT ` information has been updated. See [`SEMGREP_TIMEOUT`](/semgrep-ci/ci-environment-variables#semgrep_timeout) documentation for more details.\\n- Collapsible items in the documentation sidebar now take you to overview pages for a given category or lead to introductory pages. Overview pages also provide an updated description for displayed cards that represent individual documents. For example: [Semgrep command-line interface (CLI)](/getting-started/cli), [Semgrep in continuous integration (CI)](/deployment/add-semgrep-to-ci), [Data-flow analysis engine overview](/writing-rules/data-flow/data-flow-overview)\\n- Release notes that you are now reading have been split into one document for each month the Release notes category now has its own dedicated right sidebar. This change makes it easier to find changes that happened over the span of a month.\\n- The [Experiments](/writing-rules/experiments/introduction) category now falls under **Writing custom rules** section on our left navigation.\\n- Updated [Managing findings in Semgrep App](/semgrep-code/findings) document, especially [Managing finding status](/semgrep-code/triage-remediation/#manage-findings) section to inform about the latest triage workflow updates.\\n- Updated information about enabling the autofix feature in various occurrences in our docs. For example: [Enabling autofix in Semgrep App](/writing-rules/testing-rules/#enabling-autofix-in-semgrep-code)\\n- Updated [Defining ignored files and folders in Semgrep App](/writing-rules/testing-rules/#enabling-autofix-in-semgrep-code) to inform about how you can ignore files from the Findings page of Semgrep App.\\n- Many fixed links, typos, and other necessary improvements for great docs experience."},{"id":"october-2022","metadata":{"permalink":"/docs/release-notes/october-2022","source":"@site/release-notes/october-2022.md","title":"October 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-10-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":5.91,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"october-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-10-30T10:00","title":"October 2022"},"unlisted":false,"prevItem":{"title":"November 2022","permalink":"/docs/release-notes/november-2022"},"nextItem":{"title":"September 2022","permalink":"/docs/release-notes/september-2022"}},"content":"The following updates were made to Semgrep in October 2022.\\n\\n\x3c!-- truncate --\x3e\\n## Semgrep Supply Chain\\n\\nSemgrep, Inc now offers a new product: Semgrep Supply Chain. Semgrep Supply Chain is a high-signal dependency scanner that detects reachable vulnerabilities in open source, third-party libraries in your code. Learn more about [Semgrep Supply Chain](https://semgrep.dev/products/semgrep-supply-chain).\\n\\n## Semgrep App\\n\\n### Additions\\n\\n- New demo project allows you to try out Semgrep App workflows. If your organization in Semgrep App does not have any projects assigned in the [Projects](https://semgrep.dev/orgs/-/projects) page, you can add the new demo project by clicking **Explore a demo project**.\\n- You can now triage through PR comments, for more information see [Ignoring findings through comments](/docs/semgrep-code/triage-remediation#triage-findings-through-pr-and-mr-comments) documentation.\\n- Semgrep Playground now displays its version number. To see the exact version that Semgrep Playground uses, click the <i class=\\"fa-regular fa-ellipsis-vertical\\"></i> three-dot button, and then see the version number after the <i class=\\"fa-solid fa-code-commit\\"></i> icon.\\n\\n    ![Semgrep Playground version number.](/img/semgrep-app-latest-version.png \\"Semgrep Playground version number.\\")\\n\\n### Changes\\n\\n- Previously, when you removed a rule you had to rescan the code to remove findings associated with the rule. With this change, findings made by the removed rule are now automatically removed without rescanning. If you add a removed rule back, then you need to rescan your code to get the findings from the previously removed rule again. For more information, see [Triaging findings](/semgrep-code/triage-remediation).\\n- New [Findings](https://semgrep.dev/orgs/-/findings?tab=open) page styling. See [Managing findings in Semgrep App](/semgrep-code/findings) documentation for additional information.\\n- Semgrep App experience is generally improved due to a significant number of fixed bugs.\\n\\n## Semgrep CLI\\n\\nThese release notes include upgrades for versions ranging between 0.116.0 and 0.118.0.\\n\\n### Additions\\n\\n#### Taint mode\\n\\n- Taint mode now tracks taint coming from the default values of function parameters. For example, given `def test(url = \\"http://example.com\\"):`, if `\\"http://example.com\\"` is a taint source (as a consequence of not using TLS protocol), then `url` is marked as tainted. (Issue [#6298](https://github.com/semgrep/semgrep/issues/6298))\\n- Two new rule options that help to minimize false positives:\\n    - The`taint_assume_safe_indexes`, which makes Semgrep assume that an array-access expression is safe even if the index expression is tainted. Otherwise Semgrep assumes that for example: `a[i]` is tainted if `i` is tainted, even if `a` is not. Enabling this option is recommended for high-signal rules, whereas disabling is preferred for audit rules. Currently, it is disabled by default to attain backwards compatibility, but this can change in the near future after some evaluation. To enable this option, include the `taint_assume_safe_indexes: true` under the `options` key. For more information, see [Rule syntax](/writing-rules/rule-syntax/#options) documentation. (PR [#6327](https://github.com/semgrep/semgrep/pull/6327))\\n    - The `taint_assume_safe_functions`, makes Semgrep assume that function calls do **not** propagate taint from their arguments to their output. Otherwise, Semgrep always assumes that functions may propagate taint. This is intended to replace **not-conflicting** sanitizers (added in v0.69.0, for more information, see [Minimizing false positives via sanitizers](/writing-rules/data-flow/taint-mode#sanitizers)) in the future. This option is still experimental and needs to be complemented by other changes in future releases. To enable this option, include the `taint_assume_safe_functions: true` under the `options` key. For more information, see [Rule syntax](/writing-rules/rule-syntax/#options) documentation. (PR [#6327](https://github.com/semgrep/semgrep/pull/6327))\\n- It is now possible to use `pattern-propagators` to propagate taint through higher-order iterators such as `forEach` in Java.\\n    For example:\\n    ```yaml\\n      pattern-propagators:\\n           - pattern: $X.forEach(($Y) -> ...)\\n          from: $X\\n          to: $Y\\n    ```\\n    (Issue [#5971](https://github.com/semgrep/semgrep/issues/5971))\\n- The following update is only relevant for users of DeepSemgrep: Added support for named arguments in taint mode.\\n\\n### Changes\\n\\n- Disabled Bloom filter optimization by default, due to undesired interactions with constant and symbolic propagation, while it appears to not provide a net major performance benefit. If you do notice a significant drop in performance after this change, please let us know.\\n\\n#### Taint mode\\n\\n- Removed basic experimental support for wrapper functions around taint sources. This was an early experiment to make Semgrep inter-procedural, but it was abandoned in favor of DeepSemgrep.\\n    Previously, if Semgrep found a definition such as `wrapper() { return taint_source; }`, it recognized that `wrapper` was propagating taint from `taint_source`. If the code included something as `sink(wrapper())`, Semgrep flagged it. However, for Semgrep to match such code, a `wrapper` had to be defined earlier in the source file before its use. DeepSemgrep is able to handle this case and many more.\\n    If you relied on this feature, it can generally be worked around using for example:\\n   ```yaml\\n   pattern-sources:\\n    - patterns:\\n        - pattern-inside: |\\n            $FUNC(...) {\\n              ...\\n              return tainted_source;\\n            }\\n            ...\\n        - pattern: $FUNC(...)\\n   ```\\n\\n## Semgrep in CI\\n\\n### Changes\\n\\n- Previously, Semgrep overrode user-defined environment variables with values it detected from the CI provider. Now, user-defined environment variables take precedence (override) Semgrep\'s detected values. By enabling you to override CI variables, you are able to troubleshoot issues such as hyperlinks to code in the Findings page and receiving comments in pull requests or merge requests.\\n     - This change affects the following CI providers:\\n        - Azure Pipelines\\n        - BitBucket Pipelines\\n        - Jenkins\\n        - Travis CI\\n     - This change affects the following variables:\\n        - `SEMGREP_REPO_NAME`\\n        - `SEMGREP_REPO_URL`\\n        - `SEMGREP_BRANCH`\\n        - `SEMGREP_JOB_URL`\\n        - `SEMGREP_COMMIT`\\n        - `SEMGREP_PR_ID`\\n\\n- The `--scan-unknown-extensions` option is now set to false by default. This means that from now on `--skip-unknown-extensions` is the default. This is an important change that prevents many errors when using Semgrep in a pre-commit context or in CI.\\n\\n## Documentation updates\\n\\n### Additions\\n\\n#### Semgrep Supply Chain\\n\\nThe following guides are now available for Semgrep Supply Chain:\\n- [Scanning open source dependencies](/semgrep-supply-chain/getting-started) - Walks the user through setting up Semgrep Supply Chain scans and how Semgrep performs reachability analysis.\\n- [Triaging and remediating dependency findings](/semgrep-supply-chain/triage-and-remediation) - Provides workflows for triaging dependency findings.\\n- [Ignoring lockfiles and dependencies](/semgrep-supply-chain/ignoring-dependencies) - Provides commands to fine-tune what files should not be scanned.\\n\\nThe following references are available for Semgrep Supply Chain:\\n- [Supported languages](/docs/supported-languages#semgrep-supply-chain) - All languages supported by Semgrep Supply Chain and their maturity levels.\\n- [Glossary](/semgrep-supply-chain/glossary) - A list of terms related to software composition analysis and how Semgrep Supply Chain relates to those terms\\n\\n#### Semgrep App\\n\\n- [Ignoring findings through comments](/docs/semgrep-code/triage-remediation#triage-findings-through-pr-and-mr-comments) section documents how to triage findings through GitHub comments.\\n\\n#### Semgrep CLI\\n\\n- New section [Connect to Semgrep Registry through a proxy](/cli-reference/#connect-to-semgrep-registry-through-a-proxy).\\n\\n### Changes\\n\\n- [CI configuration reference](/semgrep-ci/ci-environment-variables) now includes all environment variables for CI, their uses, and how to set them.\\n- [Getting started with Semgrep App](/deployment/core-deployment) now includes information about the last 10 supported versions of the Semgrep CLI.\\n- [Running Semgrep in continuous integration (CI) with Semgrep App](/deployment/core-deployment) now includes a new video Scanning code with Semgrep using GitHub Actions.\\n- Updated a document and section that provides information on how to add multiple focus metavariables in:\\n    - [Including multiple focus metavariables using set union semantics](/writing-rules/experiments/multiple-focus-metavariables)\\n    - [Including multiple focus metavariables using set intersection semantics](/writing-rules/rule-syntax/#including-multiple-focus-metavariables-using-set-intersection-semantics)\\n- Removing rules from a rule board now removes all associated findings. This change is reflected in the following documents:\\n    - [Managing findings](/semgrep-ci/findings-ci/#semgrep-code-findings).\\n    - Section [Triaging findings](/semgrep-code/triage-remediation) in [Managing findings in Semgrep App](/semgrep-code/findings).\\n    - [Getting started with Semgrep App](/deployment/core-deployment).\\n- Adjustments to the structure of the documentation in our left sidebar. Many iterative changes, improvements, and fixes to improve your docs reading experience."},{"id":"september-2022","metadata":{"permalink":"/docs/release-notes/september-2022","source":"@site/release-notes/september-2022.md","title":"September 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-09-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":2.9,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"september-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-09-30T10:00","title":"September 2022"},"unlisted":false,"prevItem":{"title":"October 2022","permalink":"/docs/release-notes/october-2022"},"nextItem":{"title":"August 2022","permalink":"/docs/release-notes/august-2022"}},"content":"The following updates were made to Semgrep in September 2022.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep App\\n\\n### Changes\\n\\n- The Findings page has been updated with UX/UI improvements to its filtering and triage functions.\\n- The Dashboard page has been updated with UI improvements.\\n\\n### Bug fixes\\n\\n- Previously, users could not receive merge request (MR) comments within GitLab repositories. This issue has been fixed. Users can now receive MR comments in GitLab from Semgrep App.\\n- Update git URL parser to support optional organization after the hostname. For example `https://some.enterprise.scm/myorg/owner/repo`.\\n- Various fixes and improvements to speed.\\n\\n## Semgrep CLI\\n\\nThese release notes include upgrades for versions ranging between 0.112.0 and 0.115.0.\\n\\n### Additions\\n\\n- Exclude rules by ID using CLI flag `--exclude-rule`. To exclude a specific rule, use for example <code>semgrep --config=auto --exclude <span className=\\"placeholder\\">RULE_ID</span></code>. (Issue [2530](https://github.com/semgrep/semgrep/issues/2530), PR [5974](https://github.com/semgrep/semgrep/pull/5974))\\n\\n- You can now have multiple metavariables under `focus-metavariable`, which allows. Semgrep to highlight the values matched by multiple metavariables more easily in certain circumstances. For more information, see [Using multiple focus metavariables](/writing-rules/experiments/multiple-focus-metavariables) documentation. (Issue [5686](https://github.com/semgrep/semgrep/issues/5686))\\n\\n- You can add tags for specific projects in the Semgrep App on the configuration page of a project. With this update, you can create `.semgrepconfig.yml` file in the root directory of your repository and add tags in this file also. See [Tagging projects](/semgrep-appsec-platform/tags).\\n\\n- The Semgrep CLI output now displays non-blocking and blocking findings separately. CLI output also provides a list of the blocking rules that matched the code.\\n\\n- taint-mode: Experimental support for basic field-sensitive taint tracking. Semgrep can now track `x.a` and `x.b` separately, so that for example: `x.a` can be tainted at the same time as `x.b` is clean, hence `sink(x.a)` can produce a finding but `sink(x.b)` does not. It is also possible for `x` to be tainted while `x.a` is clean. As a result, the number of false positives that Semgrep reports is reduced.\\n\\n### Changes\\n\\n- generic mode: Allow text input up to 500 bytes without human-readable indentation. This value is subject to change. This relaxation is intended to facilitate testing a long line without a trailing newline. Semgrep users should not expect files that are not human-readable to be processed by Semgrep\'s generic mode, or in any mode. (Issues [6071](https://github.com/semgrep/semgrep/issues/6071), [6162](https://github.com/semgrep/semgrep/issues/6162))\\n\\n- Changed behavior for renamed files in diff-aware scans. Semgrep no longer displays old issues to developers when they rename a file. As a result, findings in renamed files are displayed for security engineers but do not block or spam developers. (Issue [6157](https://github.com/semgrep/semgrep/pull/6157))\\n\\n## Additional information\\n\\nMinor bug fixes are not included in the release notes unless they are potentially breaking your workflow. To see the complete change notes for Semgrep CLI and CI that include fixes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/).\\n\\n## Documentation updates\\n\\n- New documentation for experimental [Taint labels](/writing-rules/data-flow/taint-mode#taint-labels-pro-).\\n- New documentation for [Display matched metavariables in rule messages](/writing-rules/pattern-syntax/#display-matched-metavariables-in-rule-messages) and experimental [Displaying propagated value of metavariables](/writing-rules/experiments/display-propagated-metavariable).\\n- New documentation for [Using multiple focus metavariables](/writing-rules/experiments/multiple-focus-metavariables).\\n- Added information about [Ellipsis operator scope](/writing-rules/pattern-syntax/#ellipsis-operator-scope).\\n- Many documents, such as [Getting started with Semgrep App](/deployment/core-deployment) now display minimal Semgrep tier required for a particular feature documented on the page.\\n- Updated [Managing findings in Semgrep App](/semgrep-code/findings).\\n- [Taint mode](/writing-rules/data-flow/taint-mode) documentation has been updated and now includes introductory video.\\n- Updated [Getting started with Semgrep in continuous integration (CI)](/deployment/core-deployment)\\n- Updated [Data-flow analysis engine overview](/writing-rules/data-flow/data-flow-overview).\\n- Updated [Integrating Semgrep into source code management (SCM) tools](/deployment/connect-scm).\\n- Updated [Evaluating your security posture through the Dashboard](/semgrep-appsec-platform/dashboard).\\n- Updated [Notifications](/semgrep-appsec-platform/notifications) documentation."},{"id":"august-2022","metadata":{"permalink":"/docs/release-notes/august-2022","source":"@site/release-notes/august-2022.md","title":"August 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-08-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":3.035,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"august-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-08-30T10:00","title":"August 2022"},"unlisted":false,"prevItem":{"title":"September 2022","permalink":"/docs/release-notes/september-2022"},"nextItem":{"title":"July 2022","permalink":"/docs/release-notes/july-2022"}},"content":"The following updates were made to Semgrep in August 2022.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep App\\n\\n### Additions\\n\\n- Azure Pipelines CI configuration is now available when adding a new repository to Semgrep App for scanning. Users can select **Azure Pipelines** from within the App, and Semgrep generates a code snippet that users can copy and commit to their configuration file to set up their CI job.\\n- Users can now delete projects in bulk (also known as batch delete) from Semgrep App\'s interface. To do this, sign in to **Semgrep App** > **Projects**, and click **Edit Projects**.\\n- Users can now see usage limits in **Semgrep App** > **Settings**.\\n\\n## Semgrep CLI\\n\\nThese release notes include upgrades for versions ranging between 0.108.0 and 0.111.0.\\n\\n### Additions\\n\\n- Semgrep now provides experimental support for the **Swift** language. See all languages that Semgrep supports in [Supported languages](/supported-languages).\\n- Add configuration options for using the tree-sitter library installed anywhere on the system.\\n- Metrics now include language-aggregated parse rates (files, bytes). The purpose of this is to continue with parsing improvements. See [Semgrep privacy policy](/metrics) for more details.\\n- Semgrep CI now accepts more formats of Git URLs for metadata that are sent to semgrep.dev. This work in progress functionality enables working links from the Semgrep App Findings page. The user provides a fallback for repository name (`SEMGREP_REPO_NAME`) and repository URL (`SEMGREP_REPO_URL`) if these values are undefined by the CI job. We appreciate any bug reports or suggestions as this feature is still in development.\\n\\n### Changes\\n\\n- Previously, the following error message appeared when metrics have not been uploaded within the set timeout timeframe:\\n  ```\\n  Error in send: HTTPSConnectionPool(host=\'metrics.semgrep.dev\', port=443): Read timed out. (read timeout=3)\\n  ```\\n  As this caused confusion when running the CLI, this message is now displayed for development and debugging purposes only. Note that metrics are still successfully uploaded, but the success status is not sent in time for the current timeout set.\\n\\n- `semgrep ci` now defaults to fail open on internal errors and always exits with exit code 0, which is equivalent to passing `--suppress-errors`. To disable this behavior, you can pass `--no-suppress-errors`, surfacing all exit codes to the CI provider. See [Configuring blocking findings and errors](/semgrep-ci/configuring-blocking-and-errors-in-ci) for more information.\\n\\n#### Additional information\\n\\nMinor bug fixes are not included in the release notes unless they are potentially breaking your workflow. To see the complete change notes for Semgrep CLI and CI that include fixes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/).\\n\\n## Documentation updates\\n\\n- Consistent and exhaustive documentation about continuous integration (CI) both with and without Semgrep App:\\n  - [Running Semgrep in continuous integration (CI) with Semgrep App](/deployment/core-deployment)\\n  - [Running Semgrep in continuous integration (CI) without Semgrep App](/deployment/oss-deployment)\\n- Experimental taint propagators allow you to specify additional structures through which taint propagates. See how to use them in the [Propagators](/writing-rules/data-flow/taint-mode#propagators-pro) section.\\n- Updated [Generic pattern matching](/writing-rules/generic-pattern-matching) documentation, rewritten examples, and added new sections, including a new [Handling line-based input](/writing-rules/generic-pattern-matching/#handling-line-based-input) section.\\n- Introduced interface and color changes to fit new [semgrep.dev](https://semgrep.dev/) website design.\\n- Report vulnerabilities that Semgrep should have found, but did not. You can report these false negatives directly from your command-line using a built-in Semgrep flag. See [Reporting false negatives with shouldafound](/reporting-false-negatives) article.\\n- Contribution documentation now provides [Adding python packages to `semgrep`](/contributing/semgrep-contributing/#adding-python-packages-to-semgrep) section.\\n- Updated and rewritten [Diff-aware scanning (SEMGREP_BASELINE_REF)](/semgrep-ci/ci-environment-variables#semgrep_baseline_ref) section.\\n- Updated fail open CI documentation in [Configuring blocking findings and errors](/semgrep-ci/configuring-blocking-and-errors-in-ci) section.\\n- Added section about [`patterns` operator evaluation strategy](/writing-rules/rule-syntax/#patterns-operator-evaluation-strategy).\\n- Updated adding [Slack notifications section in Notifications](/semgrep-appsec-platform/slack-notifications) article, and updated **Integrating Semgrep App with third-party tools**\\n- Many other updates and fixes have been introduced to the documentation website."},{"id":"july-2022","metadata":{"permalink":"/docs/release-notes/july-2022","source":"@site/release-notes/july-2022.md","title":"July 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-07-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":6.22,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"july-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-07-30T10:00","title":"July 2022"},"unlisted":false,"prevItem":{"title":"August 2022","permalink":"/docs/release-notes/august-2022"},"nextItem":{"title":"June 2022","permalink":"/docs/release-notes/june-2022"}},"content":"The following updates were made to Semgrep in July 2022.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep App\\n\\n### Additions\\n\\n- Semgrep App now integrates with Slack through a Slack app. To create a new integration, go to **Settings** > **Integrations** > **Add Integration** > **Slack**. Previously, Semgrep App used Slack webhooks.\\n- Enable autofix for all of your Projects (repositories connected to Semgrep App) by clicking on **Settings** > **Deployment** > **Autofix**.\\n\\n### Changes\\n\\n- Clicking on the Project Name in the Projects page now takes you to that project\'s Findings page. Click the <i class=\\"fa-solid fa-gear\\"></i> **gear** icon at the end of the Project\'s row to go to the project\'s Settings page.\\n- Semgrep App detects additional environment variables depending on your provider. This simplifies the creation and committing of the configuration file when adding a new Project (repository) in Semgrep App.\\n- UI and UX improvements to **Scan new project** workflow.\\n\\n## Semgrep CLI\\n\\nThese release notes include upgrades for all versions ranging between 0.102.0 and 0.107.0.\\n\\n### Additions\\n\\n- Semgrep in CI:\\n  - Fail-open support: Added `--suppress-errors` and `--no-suppress-errors` (the default is `--suppress-errors`). See [Configuring blocking findings and errors](/semgrep-ci/configuring-blocking-and-errors-in-ci) for more information.\\n  - Semgrep in CI does not block builds on triage ignored issues.\\n  - The timeout for Git commands Semgrep runs is now configurable. To configure the timeout, set the `SEMGREP_GIT_COMMAND_TIMEOUT` environment variable. The time unit used as a value for this key is in seconds. The default value is `300` which represents 5 minutes.\\n  - The `SEMGREP_GHA_MIN_FETCH_DEPTH` environment variable lets you set how many commits `semgrep ci` fetches from the remote at the minimum when calculating the merge-base in GitHub Actions. Having more commits available helps Semgrep determine what changes came from the current pull request, fixing issues where Semgrep would otherwise report findings that were not touched in a given pull request. This value is set to 0 by default. (Issue [#5664](https://github.com/semgrep/semgrep/pull/5664))\\n  - The `cli/scripts/compare.py` to compare rules for different versions of Semgrep is now supported on Podman environments. For more information, see [Contributing rules](/contributing/contributing-to-semgrep-rules-repository) documentation.\\n\\n- Extract mode:\\n  - New Semgrep CLI experimental extract mode. This mode runs a Semgrep rule on a codebase and extracts code from matches, treating it as a different language. This allows you to supplement an existing set of rules, for example, by writing additional rules to find JavaScript in files of a different language than JavaScript. Among many possible use cases, this enables you to write rules for HTML code in JavaScript code or in template files. While this is somewhat possible with `metavariable-pattern`, this reduces the work from an M \\\\* N problem to an M \\\\+ N. To know more about extract mode, see [Extract mode](/writing-rules/experiments/deprecated-experiments#extract-mode) documentation.\\n  - Extract mode now has a concatenation reduction (`concat`). Disjoint snippets within a file can be treated as one unified file. \\n  - You can use extract mode to scan for generic languages (use value `generic` in `dest-language`).\\n\\n- Taint mode:\\n  - Add experimental support for _taint labels_, which is the ability to attach labels to different kinds of taint. Both sources and sinks can restrict what labels are present in the data that passes through them in order to apply. This allows you to write more complex taint rules that previously required unappealing workarounds. Taint labels are also helpful for writing certain classes of typestate analyses (for example, check that a file descriptor is not used after being closed).\\n  - Introduced the `--dataflow-traces` flag, which directs the Semgrep CLI to explain how non-local values lead to a finding. Currently, this only applies to taint mode findings and it traces the path from the taint source to the taint sink.\\n  - Added taint traces as part of Semgrep JSON output. This helps explain how the sink became tainted.\\n\\n- General and language support additions:\\n  - Semgrep has an experimental support for **Elixir** language!\\n  - Scala: Ellipsis are now allowed in for loop function headers, allowing you to write patterns such as `for (...; $X <- $Y if $COND; ...) { ... }` to match nested for loops. (Issue [#5650](https://github.com/semgrep/semgrep/issues/5650))\\n  - Kotlin: Support for ellipsis in field access (for example, `obj. ... .bar()`).\\n  - For users logged-in under `semgrep login` while using Semgrep App. Semgrep now reports file extensions from App-connected scans that do **not** match the language of any enabled rule. This addition can make the development of new rules more effective by improving language prioritization.\\n  - Previously, expression statement patterns (for example `foo();`) were always matching when the expression statement was a bit deeper in the expression (for example, `x = foo();`). This default behavior can now be disabled through rule `options:` with `implicit_deep_exprstmt: false` in rules YAML file. (Issue [#5472](https://github.com/semgrep/semgrep/issues/5472))\\n  - LSP support: Improving **experimental** Language Server Protocol (LSP) support for metavariable inlay hints, hot reloading, App integration, scan commands, and much more!\\n\\n### Changes\\n\\n- Breaking changes in the `dataflow_trace` JSON output to make it more easily consumable by Semgrep App. Added content for `taint_source` and `intermediate_vars`, and collapsed the multiple `taint_source` locations into one.\\n\\n- General performance improvements:\\n  - Semgrep significantly reduced its memory consumption in large repositories!\\n\\n- metavariable-comparison:\\n  - The `metavariable-comparison` allows you to strip `\'`, `\\"`, and `` ` `` from the metavariable content, enabling you to scan for strings containing integer or float data. See [metavariable-comparison](/writing-rules/rule-syntax#metavariable-comparison) documentation to get more information. With this update, the `metavariable` field is now only required for `strip: true`. You are no longer required to include the `metavariable` field for the default `strip: false`.\\n  - The `metavariable-comparison` now also works on metavariables that cannot be evaluated as simple literals. In such cases, Semgrep takes the string representation of the code bound by the metavariable. Use this string representation through `str($MVAR)`. For example:\\n\\n    ```yaml\\n    - metavariable-comparison:\\n        metavariable: $X\\n        comparison: str($X) == str($Y)\\n    ```\\n\\n    In this example, `$X` and `$Y` can bind to two different code variables and Semgrep checks whether these two code variables have the same name (for example two different variables but both named `x`).\\n\\n- metavariable-pattern:\\n  - Metavariable-pattern now uses the same metavariable context as its parent. This can cause breaking changes for rules that reuse metavariables in the pattern. For example, consider the following formula:\\n\\n    ```yaml\\n    - patterns:\\n       - pattern-either:\\n           - pattern-inside: $OBJ.output($RESP)\\n       - pattern: $RESP\\n       - metavariable-pattern:\\n           metavariable: $RESP\\n           pattern: `...{ $OBJ }...`\\n    ```\\n\\n    Previously, the `$OBJ` in the metavariable-pattern was a new metavariable. The formula behaved the same if that `$OBJ` was `$A` instead. Now, `$OBJ` unifies with the value bound by `$OBJ` in the pattern-inside.\\n\\n- Using the ellipses operator in XML or HTML elements is now more permissive of whitespace. Previously, in order to have an element with an ellipsis no leading or trailing whitespace was permitted in the element contents, for example `<tag>...</tag>` was the only permitted form. Now, leading or trailing whitespace is ignored when the substantive content of the element is only an ellipsis.\\n- `--verbose` no longer displays timing information, use `--verbose --time` to display the timing.\\n- The `semgrep --test` output produced expected lines and reported lines that were difficult to read and interpret. This change introduces missed and incorrect lines making it easier to see the differences in output. See more information about the `semgrep --test` in the [Testing rules](/writing-rules/testing-rules) documentation.\\n\\n#### Additional information\\n\\nBug fixes are not included in the release notes unless they are potentially breaking your workflow. To see the complete change notes for Semgrep CLI and CI that include fixes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/)."},{"id":"june-2022","metadata":{"permalink":"/docs/release-notes/june-2022","source":"@site/release-notes/june-2022.md","title":"June 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-06-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":7.175,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"june-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-06-30T10:00","title":"June 2022"},"unlisted":false,"prevItem":{"title":"July 2022","permalink":"/docs/release-notes/july-2022"},"nextItem":{"title":"May 2022","permalink":"/docs/release-notes/may-2022"}},"content":"The following updates were made to Semgrep in June 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep App\\n\\n### Additions\\n\\n- Effective August 1, 2022, Semgrep App Community tier will be limited to 20 developers each month. Please see our [Usage Limits FAQ](https://semgrep.dev/faq-usage-limits) for more information.\\n- You can now see the number of developers committing to private repositories scanned by Semgrep App in the **Settings page**.\\n- New accounts can now try out Semgrep with the default inclusion of `juice-shop`, an intentionally vulnerable codebase. This enables new users to explore Semgrep\'s scanning capability, dashboard, and features.\\n- Additional scan status messages have been added in the Projects page, under the **Last scan** row to better assist users in troubleshooting and understanding scan behavior.\\n- [Team or Enterprise Tier] You can now **tag** repositories within Semgrep App with up to 10 tags. Tagging enables teams to group together related repositories. Tags are implemented in [Semgrep\'s API](https://semgrep.dev/api/v1/docs/#section/Introduction), enabling you to filter and group repository findings through tags.\\n\\n### Changes\\n\\n- **Semgrep App Findings page**: The **Closed** tab is now labeled as Fixed. This change prevents confusion between findings that were fixed and findings that were removed.\\n- Findings that Semgrep App found in a previous scan but no longer found them in the latest scan are called **Fixed findings**. To mark findings as fixed, the rule that matched the code and the file that was scanned must still be present during the latest scan. Under these conditions, Semgrep App concludes that the finding is fixed.\\n- Removed findings are not included in the count in the Fixed findings tab. **Removed findings** are findings in the code that were previously found by a rule, but either the rule or the file containing the code has been removed in the most recent scan. Thus, the code cannot be considered \\"fixed\\", but is instead \\"removed.\\" See [Semgrep App Findings](/semgrep-code/findings) documentation for more information.\\n- Both fixed findings and removed findings were previously counted together in the Closed tab, causing confusion as to the actual count of fixed findings. Now only findings that were purposefully fixed or addressed are counted.\\n- PR Fix Rate has been renamed to **Comment Fix Rate**. The use of a more general term, \\"comment\\", captures both GitLab merge requests (MRs) and GitHub pull requests (PRs).\\n- The **Comment Fix Rate** is the percentage of PR or MR comments fixed by developers. These PR or MR comments are findings detected by Semgrep from rules in the Comment column of your Rule Board.\\n\\n### Fixes\\n\\n- When adding GitHub projects, Semgrep App previously redirected the user to GitHub and then back into Semgrep App\'s Dashboard page while adding a project. Because of this, users would have to manually return to the Projects page to finish adding a project. Semgrep App now correctly redirects users to the Project page.\\n\\n## Semgrep CLI and Semgrep in CI\\n\\nThese release notes include upgrades for all versions ranging between **0.95.0** and **0.101.0**.\\n\\n### Additions\\n\\n- Semgrep installation through PyPi is now supported on Apple M1 processors!\\n- Semgrep now supports the R language as an experimental language. Thanks to Zythosec for contributions! ([Issue #2360](https://github.com/semgrep/semgrep/issues/2360))\\n- Bash: Semgrep now supports subshell syntax. This can be used, for example, in commands in parentheses. ([Issue #5629](https://github.com/semgrep/semgrep/issues/5629))\\n- Java: You can now use a metavariable in a package directive, for example, `package $X`, which is useful to bind the package name and use it in the error message. ([Issue #5420](https://github.com/semgrep/semgrep/issues/5420))\\n- Building the foundation for an improved Visual Studio Code user experience, Semgrep now has an experimental Language Server Protocol (LSP) daemon mode. A client program (such as Visual Studio Code) would typically run the  LSP daemon. If you feel like an adventurer, all you need to do to start it is to run `semgrep lsp --config p/r2c`. Stay tuned for more LSP goodness!\\n- Semgrep in CI:\\n  - Starting to run Semgrep CI in your pipelines was easier in GitHub and GitLab than for any other CI provider. With this release, the process has been simplified for many other CI providers! Previously, for any provider except for GitHub and GitLab, you would have to commit a lengthy configuration file to enable Semgrep in CI to start working in your pipeline. Now, the autodetection of the CI environment supports Azure Pipelines, Bitbucket, Buildkite, CircleCI, Jenkins, and Travis CI in addition to GitHub and GitLab. Now you do not need to commit big configuration files again for these providers!\\n  - You can now disable version checks with an environment variable by setting `SEMGREP_ENABLE_VERSION_CHECK=0`.\\n  - Accept `SEMGREP_BASELINE_REF` as an alias for `SEMGREP_BASELINE_COMMIT`.\\n  - The `ci` CLI command now includes ignored findings in output formats according to their configuration.\\n- taint-mode:\\n  - Taint tracking now analyzes lambdas in their surrounding context. Previously, if a variable became tainted outside a lambda, and this variable was used inside the lambda causing the taint to reach a sink, this was not detected because any nested lambdas were \\"opaque\\" to the analysis. Taint tracking looked at lambdas but as isolated functions. With this update, lambdas are simply analyzed as if they were statement blocks. However, taint tracking still does not follow the flow of taint through the lambda\'s arguments!\\n  - New experimental `pattern-propagators` feature that allows you to specify arbitrary patterns for the propagation of taint by side-effect. In particular, this allows specifying how taint propagates through side-effectful function calls. For example, you can specify when tainted data is added to an array then the array itself becomes tainted. ([Issue #4509](https://github.com/semgrep/semgrep/issues/4509))\\n- Dataflow:\\n  - Spread operators in record expressions (for example `{...foo}`) are now translated into the Dataflow Intermediate Language (IL).\\n  - XML elements (for example JSX elements) have now a basic translation to the Dataflow IL, meaning that dataflow analysis (constant propagation, taint tracking) can now operate inside these elements. ([Issue #5115](https://github.com/semgrep/semgrep/issues/5115))\\n- Generic mode:\\n  - New option `generic_ellipsis_max_span` for controlling how many lines an ellipsis can match. ([Issue #5211](https://github.com/semgrep/semgrep/issues/5211))\\n  - New option `generic_comment_style` for ignoring comments that follow the specified syntax (C style, C++ style, or Shell style). ([Issue #3428](https://github.com/semgrep/semgrep/issues/3428))\\n- Metrics:\\n  - A list of features used during execution is now included among metrics. Examples of such features are: languages scanned, CLI options passed, keys used in rules, or certain code paths reached, such as using an `:include` instruction in a `.semgrepignore` file. These strings will **not** include user data or specific settings. As an example, with `semgrep scan --output=secret.txt` we send `\\"option/output\\"` but will **not** send `\\"option/output=secret.txt\\"`.\\n  - An anonymous Event ID has been included among metrics. This is an ID generated at send-time and will be used to de-duplicate events that potentially get duplicated during transmission.\\n  - Metrics now include an anonymous User ID. This ID is stored in the `~/.semgrep/settings.yml` file. If the ID disappears, the next run will generate a new ID randomly. See the <a target=\\"_self\\" href=\\"/metrics/#anonymous-user-id\\" >Anonymous User ID in PRIVACY.md</a> for more details.\\n\\n### Changes\\n\\n- PHP: Semgrep PHP support now reached GA General Availability (GA) maturity! Thanks a lot to Sjoerd Langkemper for most of the heavy work!\\n- Gitlab SAST output is now v14.1.2 compliant.\\n- The following deprecated `semgrep scan` options are now removed:\\n  `--json-stats`, `--json-time`, `--debugging-json`, `--save-test-output-tar`, `--synthesize-patterns`,\\n  `--generate-config/-g`, `--dangerously-allow-arbitrary-code-execution-from-rules`,\\n  and `--apply` (which was an easter egg for job applications, not the same as `--autofix`).\\n- Rules are now downloaded from the Semgrep Registry in JSON format instead of YAML. This speeds up rule parsing in the Semgrep CLI, making a `semgrep --config auto` run on the semgrep Python package in 14s instead of 16s.\\n- The output summarizing scan results has been simplified.\\n- Previously, you could use `$X` in a message to interpolate the variable captured by a metavariable named `$X`, but there was no way to access the underlying value. However, sometimes that value is more important than the captured variable. Now you can use the syntax `value($X)` to interpolate the underlying propagated value if it exists (if not, it will just use the variable name).\\n\\n  **Example**: Take a target file such as the following:\\n\\n  ```py\\n  x = 42\\n  log(x)\\n  ```\\n\\n  Now take a rule to find that log command:\\n  ```yaml\\n  - id: example_log\\n    message: Logged $SECRET: value($SECRET)\\n    pattern: log(42)\\n    languages: [python]\\n  ```\\n\\n  Before this update, the same rule applied to our test example would give you the message `Logged x: value(x)`. Now, it gives the message `Logged x: 42`.\\n\\n#### Additional information\\n\\nBug fixes are not included in these release notes unless they are potentially breaking your workflow. To see the complete change notes for Semgrep CLI and CI that include fixes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/)."},{"id":"may-2022","metadata":{"permalink":"/docs/release-notes/may-2022","source":"@site/release-notes/may-2022.md","title":"May 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-05-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.35,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"may-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-05-30T10:00","title":"May 2022"},"unlisted":false,"prevItem":{"title":"June 2022","permalink":"/docs/release-notes/june-2022"},"nextItem":{"title":"April 2022","permalink":"/docs/release-notes/april-2022"}},"content":"The following updates were made to Semgrep in May 2024.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Semgrep App\\n\\n### Additions\\n\\n- Team and Enterprise tier users can now integrate Semgrep into their GitHub Enterprise (GHE) and GitLab Self-Managed (GLSM) repositories. See [Integrating Semgrep into source code management (SCM) tools](/deployment/connect-scm).\\n- You can now scan locally through Semgrep CLI and then upload findings to Semgrep App.\\n- Semgrep App now has a project setup page for integrating Semgrep with Jenkins. To create a new project with Jenkins, log in to Semgrep App and click **[Projects](https://semgrep.dev/orgs/-/projects)** > **Scan new project** > **Run scan in CI** > **Jenkins**.\\n\\n### Changes\\n\\n- The Playground UI is now similar to Semgrep App\'s Editor UI for a consistent experience.\\n\\n## Semgrep CLI and Semgrep in CI\\n\\nThese release notes include upgrades for all versions ranging between **0.91.0** and **0.94.0**.\\n\\n### Changes\\n\\n- taint-mode: Let\'s say that the `taint(x)` function makes `x` argument tainted by side-effect. Previously, Semgrep had to rely on a workaround that declared that any occurrence of `x` inside `taint(x); ...` was a taint source. If `x` was overwritten with safe data, this was not recognized by the taint engine. Also, if `taint(x)` occurred inside of, for example, an `if` block, any occurrence of `x` outside that block was not considered tainted. Now, if you specify that the code variable itself is a taint source (using `focus-metavariable`), the taint engine will handle this as expected, and it will not suffer from the aforementioned limitations. We believe that this change should not break existing taint rules, but please report any regressions that you may find.\\n\\n- taint-mode: Let\'s say that the `sanitize(x)` function sanitizes `x` argument by side-effect. Previously, Semgrep had to rely on a workaround that declared that any occurrence of `x` inside `sanitize(x); ...` was sanitized. If `x` is later overwritten with tainted data, the taint engine would still consider `x` parameter as safe. Now, if you specify that the code variable itself is sanitized (using `focus-metavariable`), the taint engine handles this as expected and it will not suffer from such limitation. We believe that this change should not break existing taint rules, but please report any regressions that you may find.\\n\\n- The dot access ellipsis now matches field accesses in addition to method calls. See the following example in [Semgrep Playground](https://semgrep.dev/playground/s/9010).\\n    <iframe title=\\"Semgrep example no prints\\"src=\\"https://semgrep.dev/embed/editor?snippet=j4x2\\" width=\\"100%\\" height=\\"432\\" frameborder=\\"0\\"></iframe>\\n\\n- In this version, we have made several performance improvements to the code that surrounds our source parsing and matching core. This includes file targeting, rule fetching, and similar parts of the codebase. When we tested `semgrep scan --config auto` on the Semgrep repository itself, the performance improved from 50-54 seconds to 28-30 seconds.\\n    - As part of these changes, we removed `:include .gitignore` and `.git/` from the default `.semgrepignore` patterns. This should not cause any difference in which files are targeted as other parts of Semgrep ignore these files already.\\n    - A full breakdown of our performance updates, including some upcoming ones, can be found in this [GitHub comment that gives an overview of these changes](https://github.com/semgrep/semgrep/issues/5257#issuecomment-1133395694).\\n\\n- If a metrics event request times out, Semgrep no longer retries the request. This avoids Semgrep waiting 10-20 seconds before exiting if these requests are slow.\\n\\n- The metrics collection timeout has been raised from 2 seconds to 3 seconds.\\n\\n- Files, where only a part of the code was skipped due to a parse failure, are now listed as `partially scanned` in the end-of-scan skip report.\\n\\n- The `isAuthenticated` was added to metrics sent to Semgrep backend. This is a boolean flag that is true if you are logged in.\\n\\n- Semgrep in CI prints out all findings instead of hiding nonblocking findings. ([#5116](https://github.com/semgrep/semgrep/issues/5116))\\n\\n### Additions\\n\\n- `metavariable-regex` now supports an optional `constant-propagation` key. When this is set to `true`, information learned from constant propagation is used when matching the metavariable against the regex. By default, it is set to `false`.\\n\\n- Dockerfile: Constant propagation now works on variables declared with `ENV`.\\n\\n- Added `shouldafound`. For more information, see [Reporting false negatives](/reporting-false-negatives).\\n\\n- dataflow: The [data-flow analysis engine](/writing-rules/data-flow/data-flow-overview) now handles `if-then-else` **expressions** as in OCaml, Ruby, etc. Previously it only handled `if-then-else` **statements**. ([#4965](https://github.com/semgrep/semgrep/issues/4965))\\n\\n- taint-mode: Previously, to declare a function parameter as a taint source, Semgrep relied on a workaround that declared that any occurrence of the parameter was a taint source. If the parameter was overwritten with safe data, this was not recognized by the taint engine. Now, `focus-metavariable` can be used to specify that a function parameter is a source of taint, and the taint engine handles this as expected.\\n\\n- taint-mode: Add basic support for object destructuring in languages such as JavaScript. For example, given `let {x} = E`, Semgrep now infers that `x` is tainted if `E` is tainted.\\n\\n- The JSON output of the Semgrep scan is now fully specified using [ATD](https://atd.readthedocs.io/) and JSON Schema (https://json-schema.org/). See the semgrep-interfaces submodule under interfaces/ (for example, `interfaces/semgrep-interfaces/Semgrep_output_v0.atd` for the ATD specifications).\\n\\n- The JSON output of `semgrep scan` now contains a `version`: field with the version of Semgrep used to generate the match results.\\n\\n### Additional information\\n\\nTo see the complete change notes which include fixed issues, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/)."},{"id":"april-2022","metadata":{"permalink":"/docs/release-notes/april-2022","source":"@site/release-notes/april-2022.md","title":"April 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-04-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":2.91,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"april-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-04-30T10:00","title":"April 2022"},"unlisted":false,"prevItem":{"title":"May 2022","permalink":"/docs/release-notes/may-2022"},"nextItem":{"title":"March 2022","permalink":"/docs/release-notes/march-2022"}},"content":"The following updates were made to Semgrep in April 2022.\\n\\n\x3c!-- truncate --\x3e\\n\\nThese release notes now include edited important and breaking changes. To see the complete change notes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases).\\n\\n## Semgrep App\\n\\n### Additions\\n\\n- You can now search for a rule within your Rule Board.\\n- A `Comment` column within the Rule Board enables Semgrep App to create suggestions and messages within Pull Requests (PRs) or Merge Requests (MR) based on the rule\'s `autofix` and `message` values.\\n\\n### Changes\\n\\n- Unlisted rule visibility has been renamed to Public within the Editor.\\n- The `Audit` column within the Rule Board has been renamed to `Monitor`. Findings generated by rules within this column are displayed only on Semgrep App.\\n![New rule board.](/img/rule-board.png \\"New rule board.\\")\\n\\n## Semgrep CLI and Semgrep in CI\\n\\nThese release notes encompass upgrades for all versions ranging between **0.87.0** and **0.90.0**.\\n\\n### Changes\\n\\n- For GitHub Enterprise users: Semgrep CI uses `GITHUB_SERVER_URL` to generate URLs if it is available.\\n- When running a baseline scan on a shallow-cloned Git repository, Semgrep still needs enough Git history available to reach the branch-off point between the baseline and current branch. Previously, Semgrep tried to gradually fetch more and more commits up to a thousand commits of history, and then fetch all commits from the remote Git server. Now, Semgrep keeps trying smaller batches until up to a million commits. This change reduces runtimes on large baseline scans on very large repositories.\\n- You can now set `NO_COLOR=1` to force-disable colored output.\\n\\n### Breaking changes\\n\\n- taint-mode: Unification of metavariables between sources and sinks is no longer enforced by default. It was not clear that this is the most natural behavior as it was confusing even for experienced Semgrep users. Instead, each set of metavariables is now considered independent by Semgrep. The metavariables available to the rule message are all metavariables bound by `pattern-sinks`, and the subset of metavariables bound by `pattern-sources` that do not collide with the ones bound by `pattern-sinks`. We do not expect this change to break many taint rules because source-sink metavariable unification had a bug (see [#4464](https://github.com/semgrep/semgrep/issues/4453)) that prevented metavariables bound by a `pattern-inside` to be unified, thus limiting the usefulness of the feature. Nonetheless, it is still possible to enforce metavariable unification by setting `taint_unify_mvars: true` in the rule options. For more information, see section [Metavariables, rule message, and unification](/writing-rules/data-flow/taint-mode/#metavariables-rule-message-and-unification).\\n- The `semgrep/semgrep` Docker image no longer sets `semgrep` as the entry point. This means that Semgrep is no longer prepended automatically to any command you run in the image. This makes it possible to use the image in CI executors that run provisioning commands within the image. Affected users may receive a deprecation notice. Adjust scripts accordingly.\\n\\n### Additions\\n\\n- A new `focus-metavariable` operator that enables you to focus (or zoom in) the match on the code region delimited by a metavariable. This operator is useful for narrowing down the code matched by a rule, to focus on what matters. For more information, see [focus-metavariable documentation](/writing-rules/rule-syntax/#focus-metavariable). ([#4453](https://github.com/semgrep/semgrep/issues/4453))\\n- Join mode now supports inline rules through the `rules` key underneath the `join` key. For more information, see [Inline rule example](/writing-rules/experiments/join-mode/overview/#inline-rule-example).\\n\\nLanguage support improvements:\\n- Scala support is now officially fully GA.\\n    - Ellipsis method chaining supported.\\n    - Type `metavariables` are now supported.\\n- Ruby support improvement:\\n    - Add basic support for lambdas in patterns. You can now write patterns of the form `-> (P) {Q}` where `P` and `Q` are sub-patterns. ([#4950](https://github.com/semgrep/semgrep/issues/4950))"},{"id":"march-2022","metadata":{"permalink":"/docs/release-notes/march-2022","source":"@site/release-notes/march-2022.md","title":"March 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-03-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.485,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"march-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-03-30T10:00","title":"March 2022"},"unlisted":false,"prevItem":{"title":"April 2022","permalink":"/docs/release-notes/april-2022"},"nextItem":{"title":"February 2022","permalink":"/docs/release-notes/february-2022"}},"content":"The following updates were made to Semgrep in March 2022.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.86.5\\n\\n### Additions\\n\\n#### Semgrep findings available in two GitLab formats\\n\\nSemgrep can now output findings in the following formats:\\n\\n- GitLab SAST report format with `--gitlab-sast`.\\n- GitLab secret detection report format with `--gitlab-secrets`.\\n\\n#### JSON output fingerprint of each finding\\n\\nJSON output now includes a fingerprint of each finding. This fingerprint remains consistent when scanned code is just moved or reindented.\\n\\n#### Go improvement\\n\\nUse latest `tree-sitter-go` with support for Go 1.18 generics. ([#4823](https://github.com/semgrep/semgrep/issues/4823))\\n\\n#### Terraform support\\n\\nBasic support for constant propagation of locals and variables. ([#1147](https://github.com/semgrep/semgrep/issues/1147), [#4816](https://github.com/semgrep/semgrep/issues/4816))\\n\\n#### Ellipsis metavariable in HTML\\n\\nYou can now use metavariable ellipsis inside a `<script>` tag. For example `<script>$...JS<\/script>`. ([#4841](https://github.com/semgrep/semgrep/issues/4841)) \\n\\n#### Semgrep CI is now a part of Semgrep CLI\\n\\nYou can now run Semgrep CI with `semgrep ci` subcommand that auto-detects settings from your CI environment and can upload findings to Semgrep App when logged in.\\n\\n### Changes\\n\\n#### SARIF output\\n\\nSARIF output includes matching code snippet ([#4812](https://github.com/semgrep/semgrep/issues/4812))\\n\\n#### Python wheel\\n\\nRemoved tests from published Python wheel.\\n\\n#### Findings comparison changes\\n\\nFindings are now considered identical between baseline and current scans, meaning that:\\n\\n- Two findings are now identical after whitespace changes such as re-indentation.\\n- Two findings are now identical after a nosemgrep comment is added.\\n- Findings are now different if the same code triggered them on different lines.\\n\\n#### Semgrep docker image running as root\\n\\nDocker image now runs as root to allow the docker image to be used in CI/CD pipelines.\\n\\n#### XDG Base Directory\\n\\nSemgrep now supports XDG Base Directory specification format. ([#4818](https://github.com/semgrep/semgrep/issues/4818))\\n\\n### Additional information\\n\\nTo see the complete change notes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/).\\n\\n## Version 0.85.0\\n\\n### Additions\\n\\n#### C improvement\\n\\nSemgrep uses the latest tree-sitter-c-sharp with support for most C 10.0 features.\\n\\n#### HTML improvement\\n\\nSupport for metavariables on tags (for example: `<$TAG>...</$TAG>`). ([#4078](https://github.com/semgrep/semgrep/issues/4078))\\n\\n#### Scala improvement\\n\\nThe data-flow engine now handles expression blocks. Previously, Semgrep did not report some false negatives when run with taint analysis on expression blocks, which are now reported.\\n\\n#### Dockerfile improvement\\n\\nAllow for example `CMD \u2026` to match both `CMD ls` and `CMD [\\"ls\\"]`. ([#4770](https://github.com/semgrep/semgrep/issues/4770))\\n\\n#### Semgrep informs about used rules for multiple languages\\n\\nWhen scanning multiple languages, Semgrep now prints a table of how many rules and files are used for each language.\\n\\n### Changes\\n\\n#### File targeting logic\\n\\nThe following inconsistencies were fixed: ([#4776](https://github.com/semgrep/semgrep/pull/4776))\\n\\n#### Explicitly targeted files are now unaffected by global filters\\n\\nPreviously, explicitly targeted files (files that are directly passed to the command line) were unaffected by most global filters: global include or exclude patterns, and the file size limit. Now, the `.semgrepignore` patterns do not affect explicitly targeted files as well.\\n\\n#### Semgrep scans with `--skip-unknown-extensions` flag now use shebang\\n\\nPreviously, `--skip-unknown-extensions` skipped files based only on file extension, even though extensionless shell scripts expose their language through the shebang of the first line. As a result, when you set `--skip-unknown-extensions` flag, Semgrep always skipped explicitly targeted shell files with no extension. Now, Semgrep with said flag decides if a file is a correct language using both extensions and shebangs.\\n\\n#### Faster scans with `--baseline-commit` flag\\n\\nThese optimizations were added:\\n\\n- When `--baseline-commit` is set, Semgrep runs the **current scan**, then switches to the `\u2013baseline-commit`, and runs the **baseline scan**. The current scan now excludes files that are unchanged between the baseline and the current commit according to the output of `git status`.\\n\\n- The **baseline scan** now excludes rules and files that had no matches in the **current scan**.\\n\\n- When `git ls-files` is unavailable or `--disable-git-ignore` is set, Semgrep walks the file system to find all target files. Semgrep now walks the file system 30% faster compared to previous versions.\\n\\n#### Improved Semgrep output format\\n\\nThe output format is updated to visually separate lines with headings and indentation.\\n\\n### Fixes\\n\\n#### Deep expression matching and metavariable interaction\\n\\nSemgrep does not stop at the first match and enumerates all possible matches if a metavariable is used in a deep expression pattern (for example: `<... $X ...>`). This fix can introduce performance regressions.\\n\\n### Additional information\\n\\nTo see the complete change notes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/tag/v0.85.0).\\n\\n## Version 0.84.0\\n\\n### Additions\\n\\n#### Semgrep CLI lists supported languages\\n\\nSemgrep CLI now includes `--show-supported-languages` flag to display the list of languages supported by Semgrep. Thanks to John Wu for this contribution! ([#4754](https://github.com/semgrep/semgrep/pull/4754))\\n\\n#### JSX (JavaScript) improvement\\n\\nSemgrep CLI now provides the following improvements for JSX (JavaScript extension) scans:\\n\\n- Semgrep scans for JSX self closing tags (XML elements) such as `<foo />` can result in a match of explicitly closed tags, for example: `<foo >some child</foo>`. You can now disable this behavior by rule options: `xml_singleton_loose_matching: false` (#4730)\\n- New rule option `xml_attrs_implicit_ellipsis` that allows you to disable the implicit ellipsis `...` that was added to JSX attributes patterns.\\n\\n#### Updated validation of rules\\n\\nThe `semgrep --config [file] --validate` now checks for invalid metavariables.\\n\\n#### The `project-depends-on` now supports more languages\\n\\nYou can now use `r2c-internal-project-depends-on` with lockfiles for Java, Go, Ruby, and Rust. ([#4699](https://github.com/semgrep/semgrep/pull/4699))\\n\\n#### Improved PHP support\\n\\nSemgrep now treats TPL files as PHP files. ([#4763](https://github.com/semgrep/semgrep/pull/4763))\\n\\n#### Improved Scala support\\n\\nSemgrep CLI now provides the following improvements for Scala language scans:\\n\\n- Custom string interpolators. ([#4655](https://github.com/semgrep/semgrep/issues/4655))\\n- Support for parsing scripts that contain plain definitions outside of an object or class."},{"id":"february-2022","metadata":{"permalink":"/docs/release-notes/february-2022","source":"@site/release-notes/february-2022.md","title":"February 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-02-28T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":3.265,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"february-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-02-28T10:00","title":"February 2022"},"unlisted":false,"prevItem":{"title":"March 2022","permalink":"/docs/release-notes/march-2022"},"nextItem":{"title":"January 2022","permalink":"/docs/release-notes/january-2022"}},"content":"The following updates were made to Semgrep in February 2022.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.83.0\\n\\n### Additions\\n\\n#### Semgrep logs\\n\\nSemgrep now saves logs of its last run to `~/.semgrep/last.log`.\\n\\n#### New recursive operator in join mode\\n\\nJoin mode enables you to cross file boundaries, allowing you to write rules for whole code bases instead of individual files. With this update, you can now use a new recursive operator `--\x3e` to recursively chain Semgrep rules based on metavariable contents. ([#4684](https://github.com/semgrep/semgrep/pull/4684))\\n\\n#### Scanned paths under `paths.scanned` key\\n\\nSemgrep now lists the scanned paths in its JSON output under the `paths.scanned` key.\\n\\n#### The `--verbose` option lists skipped paths\\n\\nWith the `--verbose` option, the skipped paths are listed under the `paths.skipped` key.\\n\\n#### C improvement\\n\\nSemgrep now supports typed metavariables in C#. ([#4657](https://github.com/semgrep/semgrep/issues/4657))\\n\\n#### The `metavariable-analysis`\\n\\nExperimental `metavariable-analysis` feature that supports two kinds of analyses rules: \\n- Prediction of regular expression denial-of-service vulnerabilities (Regular expression Denial of Service (ReDoS) analyzer). ([#4700](https://github.com/semgrep/semgrep/pull/4700))\\n- High-entropy string detection (`entropy`). ([#4672](https://github.com/semgrep/semgrep/pull/4672))\\n\\n#### The `semgrep publish`\\n\\nA new subcommand `semgrep publish` allows users to upload private, unlisted, or public rules to the Semgrep Registry.\\n\\n### Changes\\n\\n#### Constant propagation\\n\\nImproved constant propagation for global constants.\\n\\n#### PHP improvement\\n\\nConstant propagation is now aware of `escapeshellarg` and `htmlspecialchars_decode`. If you give these functions constant arguments, Semgrep assumes that their output is also a constant.\\n\\n#### Use different environment variable\\n\\nThe environment variable used by Semgrep login changed from `SEMGREP_LOGIN_TOKEN` to `SEMGREP_APP_TOKEN`.\\n\\n### Fixes\\n\\nThe fixes section includes only important or breaking fixes. To see the full list of fixes, see [Semgrep changelog](https://github.com/semgrep/semgrep/releases/tag/v0.83.0).\\n\\n#### Limit for Perl Compatible Regular Expressions (PCRE) engine retries\\n\\nWith this update, the Perl Compatible Regular Expressions (PCRE) engine is now configured to limit hanging scans. As a consequence, the hanging scans which took a long time to process are now stopped after a specific limit is reached. However, some scan results may not be reported as their processing was above this limit.\\n\\n### Additional information\\n\\nTo see the complete change notes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/tag/v0.83.0).\\n\\n## Version 0.82.0\\n\\n### Additions\\n\\n#### Support of semgrep --baseline-commit\\n\\nWith this update, you can use experimental baseline scanning by issuing the following command:\\n\\n```\\nsemgrep --baseline-commit GIT_COMMIT_HASH\\n```\\n\\nUse this option with a commit hash or a branch name. The `--baseline-commit` option limits the scan results to those introduced after the commit you specify.\\nFor example, you have a repository with 10 commits, use the commit hash of the 8th commit, and Semgrep returns scan results introduced by changes in commits 9 and 10. ([#4571](https://github.com/semgrep/semgrep/pull/4571))\\n\\n### Changes\\n\\n#### Scans indicate skipped target paths\\n\\nSemgrep scans now indicate a breakdown of skipped target paths with the reason for the scan skip. In addition, using the `--verbose` mode lists all skipped paths.\\n\\n#### Performance improvement of semgrep-core\\n\\nAll rules are now sent directly to semgrep-core, resulting in a significant performance increase for small-to-medium-sized code repositories. This improvement led to the following changes:\\n- Static Analysis Results Interchange Format (SARIF) output includes all used rules.\\n- Error messages use the full path of rules.\\n- Progress bar reports by file instead of by rule.\\n\\n#### Python 3.7 is the minimum version to use Semgrep\\n\\nThe required minimum version of Python for Semgrep is now 3.7 instead of EOL 3.6.\\n\\n#### Bloom filter\\n\\nBloom filter optimization now considers `import` module file names. As a consequence, Semgrep matches patterns such as `import { $X } from \'foo\'` with increased performance. ([#4605](https://github.com/semgrep/semgrep/pull/4605))\\n\\n#### Indentation removed to provide additional space\\n\\nIndentation is now removed from matches to provide more space.\\n\\n### Additional information\\n\\nTo see the complete change notes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/tag/v0.82.0).\\n\\n## Version 0.81.0\\n\\n### Additions\\n\\n#### Dockerfile\\n\\nComplete support for metavariables and anonymous ellipses except in ENV instructions. ([#4556](https://github.com/semgrep/semgrep/pull/4556), [#4577](https://github.com/semgrep/semgrep/pull/4577))\\n\\n### Fixes\\n\\n#### Java\\n\\nMatch resources in Java try-with-resources statements. ([#4228](https://github.com/semgrep/semgrep/issues/4228))\\n\\n### Additional information\\n\\nTo see the complete change notes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/tag/v0.81.0)."},{"id":"january-2022","metadata":{"permalink":"/docs/release-notes/january-2022","source":"@site/release-notes/january-2022.md","title":"January 2022","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2022-01-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":1.47,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"january-2022","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2022-01-30T10:00","title":"January 2022"},"unlisted":false,"prevItem":{"title":"February 2022","permalink":"/docs/release-notes/february-2022"},"nextItem":{"title":"December 2021","permalink":"/docs/release-notes/december-2021"}},"content":"The following updates were made to Semgrep in January 2022.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.80.0\\n\\n### Additions\\n\\n#### Autocomplete\\n\\nAutocomplete is now available for CLI options.\\n\\n#### Dockerfile\\n\\nSupport for Semgrep\'s metavariables where argument expansion is already supported. ([#4556](https://github.com/semgrep/semgrep/pull/4556))\\n\\n### Changes\\n\\n#### Ruby\\n\\nYou can now use an atom to match an identifier of the same name. ([#4550](https://github.com/semgrep/semgrep/issues/4550))\\n\\n### Fixes\\n\\n#### Missing target file does not lead to Semgrep crash\\n\\nBefore this update, handling a missing target file could crash Semgrep. This issue has been fixed. ([#4462](https://github.com/semgrep/semgrep/issues/4462))\\n\\n### Additional information\\n\\nTo see the complete change notes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/tag/v0.80.0).\\n\\n## Version 0.79.0\\n\\n### Additions\\n\\n#### Ignoring code\\n\\nSupport for placing nosemgrep comments on the line before a match, causing such match to be ignored ([#3521](https://github.com/semgrep/semgrep/issues/3521)).\\n\\n### Changes\\n\\n#### Verbose output\\n\\nParse errors (reported with `--verbose`) appear once per file, not once per rule/file.\\n## Version 0.78.0\\n\\n### Additions\\n\\n#### Symbolic propagation\\n\\nSemgrep can now symbolically propagate simple definitions. For example, given\\nan assignment `x = foo.bar()` followed by a call `x.baz()`, Semgrep will keep track of `x`\'s definition, and it will successfully match `x.baz()` with a pattern like `foo.bar().baz()`. This feature should help writing simple yet powerful rules, by letting the dataflow engine take care of any intermediate assignments. Symbolic propagation is still experimental and is disabled by default. It must be enabled on a per-rule basis using `options:` and setting `symbolic_propagation: true`. ([#2783](https://github.com/semgrep/semgrep/issues/2783), [#2859](https://github.com/semgrep/semgrep/issues/2859), [#3207](https://github.com/semgrep/semgrep/issues/3207))\\n\\n#### Verbose output\\n\\n`--verbose` now outputs a timing and file breakdown summary at the end.\\n\\n#### Metavariables\\n\\n`metavariable-comparison` now handles metavariables that bind to arbitrary constant expressions (instead of just code variables).\\n\\n#### Dockerfile\\n\\nPre-alpha support for Dockerfile as a new target language.\\n\\n### Additional information\\n\\nTo see the complete change notes, visit the [Semgrep changelog](https://github.com/semgrep/semgrep/releases/tag/v0.78.0)."},{"id":"december-2021","metadata":{"permalink":"/docs/release-notes/december-2021","source":"@site/release-notes/december-2021.md","title":"December 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-12-31T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":3.775,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"december-2021","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-12-31T10:00","title":"December 2021"},"unlisted":false,"prevItem":{"title":"January 2022","permalink":"/docs/release-notes/january-2022"},"nextItem":{"title":"November 2021","permalink":"/docs/release-notes/november-2021"}},"content":"The following updates were made to Semgrep in December 2021.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.77.0\\n\\n### Highlights\\n\\n#### Semgrep CLI and Semgrep CI now ignore the same patterns\\n\\nWith this update, Semgrep CLI now ignores the same patterns as the Semgrep CI by default. Find [the default .semgrepignore on GitHub](https://github.com/semgrep/semgrep/blob/develop/cli/src/semgrep/templates/.semgrepignore). If you want to return to Semgrep\u2019s previous behavior, create an empty `.semgrepignore` file. However, creating a new `.semgrepignore` overrides the default setup.\\n\\n#### Autofix improvement\\n\\nAn autofix improvement from [https://github.com/chair6](https://github.com/chair6) from Hashicorp! Big shoutout to them. Fixes several issues (auto fixing multiple things in the same set of lines). This change addresses several issues related to autofix by adding per-file line and column offset tracking, and uses those offsets when making edits to files. The improvement addresses several edge cases in the existing autofix implementation that Semgrep did not handle correctly previously. The addressed issues are the following: [#4428](https://github.com/semgrep/semgrep/issues/4428), [#3577](https://github.com/semgrep/semgrep/issues/3577), [#3388](https://github.com/semgrep/semgrep/issues/3388).\\n\\n### Additions\\n\\n#### Scala\\n\\nSemgrep now correctly matches patterns as `List(...)`.\\n\\n#### `.semgrepignore`\\n\\nDefault set of `.semgrepignore` patterns (in `semgrep/templates/.semgrepignore`) is now used by default. You can override the default behavior by creating your own `.semgrepignore` file.\\n\\n#### Java\\n\\nYou can now use ellipsis metavariables for parameters. ([#4420](https://github.com/semgrep/semgrep/issues/4420))\\n\\n### Fixes\\n\\nThe fixed section now remains only as changelog notes. To see the changelog notes, visit [Semgrep changelog](https://github.com/semgrep/semgrep/releases/tag/v0.77.0).\\n\\n### Changes\\n\\n#### Constant propagation\\n\\nConstant propagation is now fully a must analysis, if a variable is undefined in some path then it is considered as a non-constant.\\n\\n#### Dataflow\\n\\nDataflow now considers only reachable nodes, which prevents some false-positive or false-negative findings.\\n\\n#### The `--time` option now includes time spent on processing\\n\\nWith this update, Semgrep\'s `--time` option output includes the time spent on getting the configs, running the matching engine, and processing of ignores.\\n\\n#### semgrep-core improvement\\n\\nThe semgrep-core logs a warning when a worker process is consuming above 400 MiB of memory or reaches 80% of the specified memory limit. This change is made to help diagnose out of memory (OOM) related crashes.\\n\\n#### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.77.0).\\n\\n## Version 0.76.2\\n\\n### Additions\\n\\n#### Support for Solidity\\n\\nSemgrep now provides experimental support for the Solidity programming language.\\n\\n### Fixes\\n\\n#### Python\\n\\nComprehension variables now have the correct scope, which means that a pattern like `[$X for $X in $ITERATOR]` now correctly matches `[v for v in foo()]`. ([#4260](https://github.com/semgrep/semgrep/issues/4260))\\n\\n#### Semgrep reports relative file paths with `.semgrepignore`\\n\\nPreviously, when you used Semgrep with `.semgrepignore` file, Semgrep reported targets with absolute instead of relative file paths. This issue has now been fixed. ([#4402](https://github.com/semgrep/semgrep/pull/4402))\\n\\n#### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.76.2).\\n\\n## Version 0.76.1\\n\\n### Fixes\\n\\n#### `.semgrepignore`\\n\\nPreviously, when you used Semgrep with a `.semgrepignore` file, Semgrep failed to run on files that were not subpaths of the directory where Semgrep was used.\\n\\n## Version 0.76.0\\n\\n### Additions\\n\\n#### Improved filtering of rules\\n\\nSemgrep now has improved filtering of rules based on file content, resulting in notable speedup for NodeJsScan rules.\\n\\n#### Semgrep CLI\\n\\nSemgrep CLI now respects `.semgrepignore` files. For more information about ignoring files, see [Semgrep documentation](/cli-reference/#ignore-files).\\n\\n#### Java support improvement\\n\\nSemgrep now supports ellipsis in generics, for example: `class Foo<...>` ([#4335](https://github.com/semgrep/semgrep/issues/4335))\\n\\n### Fixes\\n\\n#### Java\\n\\nWhen you use Semgrep to search for patterns that do not specify generics, Semgrep now also matches classes that are using generics. For example: `class $X {...}` which is not specifying generics, now matches `class Foo<T> { }`. ([#4335](https://github.com/semgrep/semgrep/issues/4335))\\n\\n#### TypeScript\\n\\nSemgrep now correctly parses TypeScript type definitions. ([#4330](https://github.com/semgrep/semgrep/issues/4330))\\n\\n#### taint-mode\\n\\nSemgrep taint-mode now reports findings when the Left Hand Side (LHS) operand of an access operator is a sink (for example as in `$SINK->method`), and the LHS operand is a tainted variable. ([#4320](https://github.com/semgrep/semgrep/issues/4320))\\n\\n#### metavariable-comparison\\n\\nSemgrep metavariable-comparison does not return a `NotHandled` error anymore. ([#4328](https://github.com/semgrep/semgrep/issues/4328))\\n\\n#### semgrep-core\\n\\nFix a segmentation fault on Apple M1 processors when using `-filter_irrelevant_rules` on rules with very large pattern-either fields. ([#4305](https://github.com/semgrep/semgrep/issues/4305))\\n\\n#### Python\\n\\nGenerate correct lexical exn for unbalanced braces. ([#4310](https://github.com/semgrep/semgrep/issues/4310))\\n\\n#### YAML\\n\\nFix off-by-one error in location of arrays.\\n\\n### Changes\\n\\n#### semgrep-core\\n\\nLog messages are now tagged with the process id.\\n\\n#### Given `--output` Semgrep no longer prints search results to stdout\\n\\nWhen using `--output` parameter, Semgrep no longer prints findings to standard output (stdout), but it only saves or posts those findings to the specified file or URL.\\n\\n#### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.76.0)."},{"id":"november-2021","metadata":{"permalink":"/docs/release-notes/november-2021","source":"@site/release-notes/november-2021.md","title":"November 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-11-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":6.575,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"november-2021","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-11-30T10:00","title":"November 2021"},"unlisted":false,"prevItem":{"title":"December 2021","permalink":"/docs/release-notes/december-2021"},"nextItem":{"title":"October 2021","permalink":"/docs/release-notes/octobers-2021"}},"content":"The following updates were made to Semgrep in November 2021.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.75.0\\n\\n### Fixes\\n\\n#### Semgrep CI\\n\\nIn Semgrep CI, the option `--disable-nosem` now tags findings with the `is_ignored` option correctly. Previously, an optimization from version 0.74.0 left the field `None` when the described option has been used. The optimization has been reverted.\\n\\n## Version v0.74.0\\n\\n### Additions\\n\\n#### Method chaining\\n\\nSemgrep now supports method chaining patterns in Python, Go, Ruby, and C#. ([#4300](https://github.com/semgrep/semgrep/issues/4300))\\n\\n#### Scala\\n\\nSemgrep now translates infix operations as regular method calls, enabling patterns similar to: `$X.map($F)` to also match code written as `xs map f`. ([#4290](https://github.com/semgrep/semgrep/pull/4290))\\n\\n#### PHP\\n\\nSemgrep now supports parsing method patterns. ([#4262](https://github.com/semgrep/semgrep/issues/4262))\\n\\n### **Changed**\\n\\n#### Semgrep profiling improved\\n\\nSemgrep is now more efficiently measuring its performance. The new `profiling_times` object in `--time --json` output enables better visibility of slowly performing Semgrep code.\\n\\n#### Constant propagation\\n\\nIn constant propagation, Python strings are now evaluated as string literals. You can now match any kind of Python string (raw, byte, or unicode) by the `\\"...\\"` operator. ([#3881](https://github.com/semgrep/semgrep/issues/3881))\\n\\n### Fixes\\n\\n#### Ruby\\n\\nRuby blocks are now represented with an extra function call in Semgrep\'s generic abstract syntax tree (AST) so that both `f(...)` and `f($X)` correctly match `f(x)` in `f(x) { |n| puts n }`. ([#3880](https://github.com/semgrep/semgrep/issues/3880))\\n\\n#### Generic filters exclude large and binary files\\n\\nGeneric filters exclude large files and binary files to \'generic\' and \'regex\' targets as it was already done for the other languages.\\n\\n#### PHP\\n\\nAn issue with stack overflow when using `-filter_irrelevant_rules` has been fixed. ([#4305](https://github.com/semgrep/semgrep/issues/4305))\\n\\n#### Dataflow no longer returns false positive results for switch statements\\n\\nWhen a `switch` was not followed by another statement, and the last statement of the default case of the `switch` was a statement, such as `throw`, that could exit the execution of the current function. This caused unresolved `break` statements in the `switch` during the construction of the control flow graph (CFG). One of the possible consequences could be that constant propagation incorrectly flagged variables as constants. This issue has now been fixed. ([#4265](https://github.com/semgrep/semgrep/issues/4265))\\n\\n### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.72.0).\\n\\n## Version 0.73.0\\n\\n### Additions\\n\\n#### C++ support improved\\n\\nWith this release, Semgrep has improved the C++ parsing rate from 72.9% to 94.6%. Parsing rate is calculated as the number of lines Semgrep successfully parses in a corpus of popular GitHub repos.\\n\\n### Fixes\\n\\n#### Semgrep CI no longer fails scan with binary files\\n\\nBefore this update, Semgrep sometimes reported `Pcre.Error(BadUTF8) error` when it tried to analyze PNG, TTF, EOT or WOFF, zip, tar, and other binary files. As a consequence, scans failed when binary files were present. With this update, the underlying issue has been fixed, and Semgrep skips binary files. ([#4258](https://github.com/semgrep/semgrep/issues/4258))\\n\\n#### Constant propagation improvements\\n\\nPreviously, Semgrep\'s constant propagation handled specific corner cases by raising an \\"impossible\\" error. Constant propagation now handles corner cases more gracefully instead of raising errors.\\n\\n### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.73.0).\\n\\n## Version 0.72.0\\n\\n### Additions\\n\\n#### Dataflow support enhancements\\n\\nSemgrep\'s Dataflow engine now tracks data flow through the following constructs:\\n\\n- `synchronize` (Java) and `lock` (C#) blocks. ([#4150](https://github.com/semgrep/semgrep/issues/4150))\\n- `await` and `yield` expressions (for example JavaScript and Python).\\n- `&amp;` expression (for example C, C++, and Go).\\n- Other language constructs are represented by `OtherExpr` in the Generic Abstract Syntax Tree (AST).\\n\\n#### JavaScript enhancements\\n\\n- Field-definition-as-assignment equivalence allows matching expression patterns against field definitions. This functionality is disabled by default. Enable it with the following rule option: `flddef_assign: true` ([#4187](https://github.com/semgrep/semgrep/issues/4187))\\n- Arrows (short lambdas) patterns used to match also regular function definitions. This can now be disabled with rule options: `arrow_is_function: false` ([#4187](https://github.com/semgrep/semgrep/issues/4187))\\n- When a pattern contains the `var` keyword to match variable declarations, Semgrep also matches variables declared with `let` or `const`. With this update, you can disable the described functionality by the rule options: `let_is_var: false`. This rule allows you to scan for `var` keywords while not matching `let` or `const`.\\n\\n### Fixes\\n\\n#### Constant propagation improvement\\n\\nConstant propagation now allows to recognize patterns such as the following for a method call:\\n\\n```\\nx.f(y)\\n```\\n\\nIf `x` is a constant, it is correctly recognized.\\n\\n#### Go improvements\\n\\nThis update includes various enhancements for the Go language. Semgrep is now able to:\\n\\n- Correctly replace braces in composite literals for autofix.\\n- Correctly replace parenthesis in cast for autofix.\\n- Parse ellipsis in return type parameters.\\n\\n#### Scala improvements\\n\\nParsing of Scala is improved with this update, because Semgrep is now able to parse:\\n\\n- Case object within blocks.\\n- Typed patterns with variables that begin with an underscore: `case _x : Int => \u2026`\\n- Unicode identifiers.\\n- Nullary constructors with no arguments in more positions.\\n- The `infix` type operators with tuple arguments.\\n- Nested comments.\\n- Case class within blocks.\\n\\n#### Semgrep\'s pattern-regex now accepts unicode\\n\\nSemgrep\'s pattern-regex now supports hexadecimal notation of Unicode code points and assumes UTF-8. For more information, see [Semgrep documentation](/writing-rules/rule-syntax/#pattern-regex). ([#4240](https://github.com/semgrep/semgrep/pull/4240))\\n\\n#### Additional fixes and improvements in this version\\n\\nSome of the new fixes with this version include the following:\\n\\n- The semgrep-core accepts `sh` as an alias for Bash.\\n- Semgrep\'s metavariable-comparison is now able to detect when a metavariable binds to a code variable that is a constant, and use the constant value in the comparison. ([#3727](https://github.com/semgrep/semgrep/issues/3727))\\n- Expand `~` when resolving config paths.\\n\\n### Changes\\n\\n#### C support\\n\\nC support is now generally available.\\n\\n#### Command line interface (CLI) changes\\n\\nWhen the semgrep-core results in a segmentation fault, Semgrep now only suggests increasing stack size.\\n\\nSemgrep\'s CLI output no longer displays severity levels.\\n\\n#### Scanning for executable scripts with shebang\\n\\nPreviously, Semgrep only scanned files that matched a file extension for the language that was scanned. Scripting languages are often written extensionless with the script interpreter in a shebang. Now, Semgrep scans executable scripts in which shebang interpreter directives match the language of the rule. ([#3986](https://github.com/semgrep/semgrep/pull/3986))\\n\\n### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.72.0).\\n\\n## Version 0.71.0\\n\\n### Additions\\n\\n- In taint mode, you can now write rules that use the same metavariable in sources, sanitizers, and sinks. In addition, these metavariables correctly appear in matched messages. ([#4073](https://github.com/semgrep/semgrep/pull/4073))\\n- Experimental support for Bash as a new target language.\\n- Experimental support for C++ as a new target language.\\n- Increase soft stack limit when running semgrep-core. ([#4120](https://github.com/semgrep/semgrep/pull/4120))\\n- Semgrep `--validate` runs metachecks on the rule. ([#4170](https://github.com/semgrep/semgrep/pull/4170))\\n\\n### Fixes\\n\\n- The `text_wrapping` defaults to `MAX_TEXT_WIDTH` if `get_terminal_size` reports width smaller than 1. ([#4110](https://github.com/semgrep/semgrep/pull/4110))\\n- Metrics report the error type of semgrep core errors (for example Timeout, and MaxMemory). ([#4156](https://github.com/semgrep/semgrep/pull/4156))\\n- Missing or misformatted global settings files are no longer crashing Semgrep. ([#4164](https://github.com/semgrep/semgrep/pull/4164))\\n- Constant propagation: Previously an assignment as `[x,y] = f()` was not counted as an assignment to `x` or `y` by constant propagation. Now these types of assignments are recognized by both basic and dataflow based constant propagations. As a result, tuple, or array destructuring assignments now correctly prevent constant propagation. ([#4109](https://github.com/semgrep/semgrep/pull/4109))\\n- JS: Semgrep now correctly parses metavariables in template strings. ([#4139](https://github.com/semgrep/semgrep/pull/4139))\\n- Scala: Semgrep now parses underscore separators in number literals. In addition, Semgrep now parses long suffixes (`l` and `L`) on number literals. ([#4155](https://github.com/semgrep/semgrep/pull/4155))\\n- Scala: Semgrep parses name arguments in arbitrary function types, for example `(=> Int) => Int`. ([#4178](https://github.com/semgrep/semgrep/pull/4178))\\n- Bash: Various fixes and improvements.\\n- Kotlin: Ellipsis operator in class and body parameters are now supported. ([#4141](https://github.com/semgrep/semgrep/issues/4141))\\n- Go: Method interface pattern is now supported. ([#4172](https://github.com/semgrep/semgrep/issues/4172))\\n\\n### Changes\\n\\n- Report CI environment variable in metrics for better environment determination. ([#4108](https://github.com/semgrep/semgrep/pull/4108))\\n- Bash: A simple expression pattern can now match any command argument rather than having to match the whole command.\\n\\n### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.71.0)."},{"id":"octobers-2021","metadata":{"permalink":"/docs/release-notes/octobers-2021","source":"@site/release-notes/october-2021.md","title":"October 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-10-31T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.635,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"octobers-2021","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-10-31T10:00","title":"October 2021"},"unlisted":false,"prevItem":{"title":"November 2021","permalink":"/docs/release-notes/november-2021"},"nextItem":{"title":"September 2021","permalink":"/docs/release-notes/september-2021"}},"content":"The following updates were made to Semgrep in October 2021.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.70.0\\n\\n### Additions\\n\\nExperimental Bash support. ([#4081](https://github.com/semgrep/semgrep/pull/4081))\\n\\n### Fixes\\n\\n- Go: Ellipsis operator `(...)` is now supported in the import list. For example, import `(...\\"error\\"...)`. ([#4067](https://github.com/semgrep/semgrep/issues/4067))\\n- Java: Ellipsis operator in method chain calls can now match 0 elements. For example: o. ... .foo() now also matches o.foo(). ([#4082](https://github.com/semgrep/semgrep/issues/4082))\\n- Previously, Semgrep crashed when used with a YAML rule file that contained only comments. This bug is now fixed. As a result, Semgrep gracefully handles YAML rule files that contain only comments. ([#3773](https://github.com/semgrep/semgrep/issues/3773))\\n\\n### Changes\\n\\n- Resolution of rulesets uses the legacy registry instead of the cdn registry.\\n- The Benchmark suite is easier to modify.\\n\\n### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.70.0).\\n\\n## Version 0.69.1\\n\\n### Fixes\\n\\n- The --enable-metrics flag is now always a flag and does not optionally take an argument.\\n\\n### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.69.1).\\n\\n## Version 0.69.0\\n\\n### Additions\\n\\n- C: Semgrep now recognizes the sizeof() operator as valid C code. ([#4037](https://github.com/semgrep/semgrep/issues/4037))\\n- C: Semgrep recognizes declaration and function patterns in C code..\\n- Java: As of this update, Semgrep supports the @interface annotation type pattern. ([#4030](https://github.com/semgrep/semgrep/issues/4030))\\n\\n### Fixes\\n\\n- Previously, minified files have been excluded from Semgrep scans (see[the changelog for version 0.66.0](https://github.com/semgrep/semgrep/blob/develop/CHANGELOG.md#0660---09-22-2021)). As of this update, this change has been reverted and minified files are included in Semgrep scans.\\n- Java: Before this update, Semgrep returned incorrect findings for classes with import. With this update, the equality of metavariables bounded to imported classes was fixed and the problem no longer occurs. ([#3748](https://github.com/semgrep/semgrep/issues/3748))\\n- Python: The issue with matching tuples and parenthesized expressions has been fixed. ([#3832](https://github.com/semgrep/semgrep/issues/3832))\\n- C: With this update, the issue with the typedef reserved keyword inference has been fixed. ([#4054](https://github.com/semgrep/semgrep/pull/4054))\\n- Ruby: In Semgrep version 0.66.0, you could scan for both the hash rocket and regular hash in function calls with expressions similar to Oj.load(..., mode: :object, ...). The change implemented in Semgrep version 0.67.0 has changed this behavior. As a consequence, to scan for function calls with both the hash rocket and hash, the rule needed to be defined for both syntax patterns separately. With this update, the issue has been fixed and you can use the older syntax to search for both syntax patterns simultaneously. ([#3981](https://github.com/semgrep/semgrep/issues/3981))\\n- OCaml: Added body of functor in Abstract Syntax Tree (AST). ([#3821](https://github.com/semgrep/semgrep/issues/3821))\\n\\n### Changes\\n\\n- taint-mode: In version 0.68.0, sanitizers matching a source or a sink were automatically filtered out. This allowed a pattern sanitizer such as $F(...) to sanitize every other function without conflicting with neither sources nor sinks. As a consequence, other idioms used to specify sanitizers were broken. To resolve this issue, there are now two types of sanitizers:\\n\\n- The default semantics of sanitizers is reverted to the state before version 0.68.0. By default, if a sanitizer matches a source or a sink, that source or sink becomes sanitized.\\n- A new type of sanitizer is now available. To prevent the sanitizer from overriding a source or a sink annotation when they match exactly, specify this sanitizer with a not_conflicting: true flag in the sanitizer declaration. This allows using sanitizer patterns such as $F(...) without the need to explicitly filter for sources and sinks from sanitization. ([#4033](https://github.com/semgrep/semgrep/pull/4033))\\n\\n### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.69.0).\\n\\n## Version 0.68.2\\n\\n### Fixes\\n\\n- The --skip-unknown-extensions option now treats files with no extension as files with an unknown extension.\\n\\n### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.68.2).\\n\\n## Version 0.68.1\\n\\n### Additions\\n\\n- Added support for raise and throw statements in the dataflow engine and improved current support for the try and catch statements. ([#4006](https://github.com/semgrep/semgrep/pull/4006))\\n\\n### Fixes\\n\\n- Respect path filtering at the rule level.\\n\\n### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.68.1).\\n\\n## Version 0.68.0\\n\\n### Additions\\n\\n- Semgrep now enables you to scan input code from subshells. See the following example: `semgrep -e \'a\' --lang js <(echo \'a\')` ([#3966](https://github.com/semgrep/semgrep/pull/3966))\\n\\n### Fixes\\n\\n- Previously, Semgrep could not find empty try and catch statements with a wildcard matching in Java code. This issue has been fixed, and as a consequence, finding the empty try and catch statements works correctly. ([#4002](https://github.com/semgrep/semgrep/issues/4002))\\n- taint-mode: Previously, Semgrep did not report a tainted sink included in a specific argument of a function call. This issue has been fixed.\\n- PHP: You can now use more keywords as valid field names. ([#3954](https://github.com/semgrep/semgrep/issues/3954))\\n\\n### Changes\\n\\n- taint-mode: Sanitizers matching a source or a sink are filtered out. You can now use the following pattern: $F(...) As a result, it is possible to find other functions which are sanitizers.\\n- taint-mode: Previously, built-in source(...) and built-in sanitizer sanitize(...) could cause unexpected behavior in code, such as functions called source. In this update, both functions have been removed and the described issue no longer occurs.\\n- Improved Kotlin parsing from 77% to 90%.\\n- Resolution of Semgrep Registry rulesets (for example p/ci) uses a new rule content delivery network ( **CDN** ) and does client-side hydration.\\n- Set the Perl Compatible Regular Expressions (PCRE) recursion limit so it does not vary with different installations of the PCRE. Improved PCRE error handling in the Semgrep core.\\n\\n### Additional information\\n\\nTo view the original release information, see [the changelog of this release on GitHub](https://github.com/semgrep/semgrep/releases/tag/v0.68.0)."},{"id":"september-2021","metadata":{"permalink":"/docs/release-notes/september-2021","source":"@site/release-notes/september-2021.md","title":"September 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-09-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":2.075,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"september-2021","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-09-30T10:00","title":"September 2021"},"unlisted":false,"prevItem":{"title":"October 2021","permalink":"/docs/release-notes/octobers-2021"},"nextItem":{"title":"August 2021","permalink":"/docs/release-notes/august-2021"}},"content":"The following updates were made to Semgrep in September 2021.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.67.0\\n\\n### Additions\\n\\n- Support for break and continue in the dataflow engine\\n- Support for switch statements in the dataflow engine\\n\\n### Fixes\\n\\n- Fix CFG dummy nodes to always connect to exit node\\n- Deep ellipsis &lt;... x ...&gt; now matches sub-expressions of statements\\n- Ruby: treat \'foo\' as a function call when alone on its line ([#3811](https://github.com/semgrep/semgrep/issues/3811))\\n- Fixed bug in semgrep-core\'s -filter_irrelevant_rules causing Semgrep to incorrectly skip a file ([#3755](https://github.com/semgrep/semgrep/issues/3755))\\n- PHP: allows more keywords as valid field names ([#3954](https://github.com/semgrep/semgrep/issues/3954))\\n\\n### Changes\\n\\n- Taint no longer analyzes dead/unreachable code\\n- Improve error message for segmentation faults/stack overflows\\n- Attribute-expression equivalence that allows matching expression patterns against attributes, it is enabled by default but can be disabled via rule options: with attr_expr: false ([#3489](https://github.com/semgrep/semgrep/issues/3489))\\n- Improved Kotlin parsing from 35% to 77% on our Kotlin corpus\\n\\n## Version 0.66.0\\n\\n### Additions\\n\\n- HCL (a.k.a Terraform) experimental support (see[this Terraform ruleset](https://semgrep.dev/p/terraform))\\n\\n### Fixes\\n\\n- Dataflow: Recognize \\"concat\\" method and interpret it in a language-dependent manner ([#3316](https://github.com/semgrep/semgrep/issues/3316))\\n- PHP: allows certain keywords as valid field names ([#3907](https://github.com/semgrep/semgrep/issues/3907))\\n\\n### Changes\\n\\n- Constant propagation now assumes that void methods may update the callee ([#3316](https://github.com/semgrep/semgrep/issues/3316))\\n- Add rule message to emacs output ([#3851](https://github.com/semgrep/semgrep/pull/3851))\\n- Show stack trace on fatal errors ([#3876](https://github.com/semgrep/semgrep/pull/3876))\\n- Various changes to error messages ([#3827](https://github.com/semgrep/semgrep/pull/3827))\\n\\n## Version 0.65.0\\n\\n### Additions\\n\\n- Allow autofix using the command line rather than only with the fix: YAML key\\n\\n### Fixes\\n\\n- Taint detection with ternary ifs ([#3778](https://github.com/semgrep/semgrep/issues/3778))\\n- Fixed corner-case crash affecting the pattern: $X optimization (\\"empty And; no positive terms in And\\")\\n- PHP: Added support for parsing labels and goto ([#3592](https://github.com/semgrep/semgrep/issues/3592))\\n- PHP: Parse correctly constants named PUBLIC or DEFAULT ([#3589](https://github.com/semgrep/semgrep/issues/3589))\\n- Go: Added type inference for struct literals ([#3622](https://github.com/semgrep/semgrep/issues/3622))\\n- Fix semgrep-core crash when a cache file exceeds the file size limit\\n- Sped up Semgrep interface with tree-sitter parsing\\n\\n### Changes\\n\\n- Grouped semgrep CLI options and added constraints when useful (e.g., cannot use --vim and --emacs at the same time)\\n\\n## Version 0.64.0\\n\\n### Additions\\n\\n- Enable associative matching for string concatenation ([#3741](https://github.com/semgrep/semgrep/issues/3741))\\n\\n### Fixes\\n\\n- Java: separate import static from regular imports during matching ([#3772](https://github.com/semgrep/semgrep/issues/3772))\\n- Taint mode will now benefit from semgrep-core\'s -filter_irrelevant_rules\\n- Taint mode should no longer report duplicate matches ([#3742](https://github.com/semgrep/semgrep/issues/3742))\\n- Only change source directory when running in docker context ([#3732](https://github.com/semgrep/semgrep/pull/3732))\\n\\n### Changes\\n\\n- Add logging on failure to git ls-files ([#3777](https://github.com/semgrep/semgrep/pull/3777))"},{"id":"august-2021","metadata":{"permalink":"/docs/release-notes/august-2021","source":"@site/release-notes/august-2021.md","title":"August 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-08-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":1.26,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"august-2021","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-08-30T10:00","title":"August 2021"},"unlisted":false,"prevItem":{"title":"September 2021","permalink":"/docs/release-notes/september-2021"},"nextItem":{"title":"July 2021","permalink":"/docs/release-notes/july-2021"}},"content":"The following updates were made to Semgrep in August 2021.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.63.0\\n\\n### Additions\\n\\n- C#: support ellipsis in declarations ([#3720](https://github.com/semgrep/semgrep/pull/3720))\\n\\n### Fixes\\n\\n- Hack: improved support for metavariables ([#3716](https://github.com/semgrep/semgrep/pull/3716))\\n- Dataflow: Disregard type arguments but not the entire instruction\\n\\n### Changes\\n\\n- Optimize ending ... in pattern-insides to simply match anything left\\n\\n## Version 0.62.0\\n\\n### Additions\\n\\n- OCaml: support module aliasing, so looking for List.map will also find code that renamed List as L via module L = List.\\n- Add help text to sarif formatter output if defined in metadata field.\\n- Update shortDescription in SARIF formatter output if defined in metadata field.\\n- Add tags as defined in metadata field in addition to the existing tags.\\n\\n### Fixes\\n\\n- core: fix parsing of numeric literals in rule files\\n- Java: fix the range and autofix of Cast expressions ([#3669](https://github.com/semgrep/semgrep/issues/3669))\\n- Generic mode scanner no longer tries to open submodule folders as files ([#3701](https://github.com/semgrep/semgrep/pull/3701))\\n- pattern-regex with completely empty files ([#3705](https://github.com/semgrep/semgrep/issues/3705))\\n- --sarif exit code with suppressed findings ([#3680](https://github.com/semgrep/semgrep/issues/3680))\\n- Fixed fatal errors when a pattern results in a large number of matches\\n- Better error message when rule contains empty pattern\\n\\n### Changes\\n\\n- Add backtrace to fatal errors reported by semgrep-core\\n- Report errors during rule evaluation to the user\\n- When and-ed with other patterns, pattern: $X will not be evaluated on its own, but will look at the context and find $X within the metavariables bound, which should be significantly faster"},{"id":"july-2021","metadata":{"permalink":"/docs/release-notes/july-2021","source":"@site/release-notes/july-2021.md","title":"July 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-07-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":2.425,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"july-2021","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-07-30T10:00","title":"July 2021"},"unlisted":false,"prevItem":{"title":"August 2021","permalink":"/docs/release-notes/august-2021"},"nextItem":{"title":"June 2021","permalink":"/docs/release-notes/june-2021"}},"content":"The following updates were made to Semgrep in July 2021.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.60.0\\n\\n### Additions\\n\\n- Detect duplicate keys in YAML dictionaries in Semgrep rules when parsing a rule (for example detect multiple metavariable inside one metavariable-regex).\\n\\n### Fixes\\n\\nC/C++: Fixed stack overflows (segmentation faults) when processing very large files ([#3538](https://github.com/semgrep/semgrep/issues/3538))\\n\\n- JavaScript: Fixed stack overflows (segmentation faults) when processing very large files ([#3538](https://github.com/semgrep/semgrep/issues/3538))\\n- JavaScript: Detect numeric object keys 1 and 0x1 as equal ([#3579](https://github.com/semgrep/semgrep/issues/3579))\\n- OCaml: improved parsing stats by using tree-sitter-ocaml (from 25% to 88%)\\n- taint-mode: Check nested functions\\n- taint-mode: foo.x is now detected as tainted if foo is a source of taint\\n- taint-mode: Do not crash when it is not possible to compute range info\\n- Rust: recognize ellipsis in macro calls patterns ([#3600](https://github.com/semgrep/semgrep/issues/3600))\\n- Ruby: correctly represent a.(b) in the AST ([#3603](https://github.com/semgrep/semgrep/issues/3603))\\n\\n### Changes\\n\\n- Added precise error location for the Semgrep metachecker, for example to detect duplicate patterns in a rule.\\n\\n## Version 0.58.2\\n\\n### Additions\\n\\n- New iteration of taint-mode that allows to specify sources/sanitizers/sinks using arbitrary pattern formulas. This provides plenty of flexibility. Note that we breaks compatibility with the previous taint-mode format, e.g., - source(...) must now be written as - pattern: source(...).\\n- Experimental support for HTML. This does not rely on the generic mode but instead parses the HTML using tree-sitter-html. This allows some semantic matching (e.g., matching attributes in any order).\\n- js alpha support ([#1751](https://github.com/semgrep/semgrep/issues/1751))\\n- New matching option implicit_ellipsis that allows disabling the implicit ... that are added to record patterns, plus allow matching \\"spread fields\\" (JS ...x) at any position ([#3120](https://github.com/semgrep/semgrep/issues/3120))\\n- Support globstar (**) syntax in path include/exclude ([#3173](https://github.com/semgrep/semgrep/pull/3173))\\n\\n### Fixes\\n\\n- Apple M1: Semgrep installed from Homebrew no longer hangs ([#2432](https://github.com/semgrep/semgrep/issues/2432))\\n- Ruby command shells are distinguished from strings ([#3343](https://github.com/semgrep/semgrep/issues/3343))\\n- Java varargs are now correctly matched ([#3455](https://github.com/semgrep/semgrep/issues/3455))\\n- Support for partial statements (e.g., try \\\\{ ... \\\\}) for Java ([#3417](https://github.com/semgrep/semgrep/issues/3417))\\n- Java generics are now correctly stored in the AST ([#3505](https://github.com/semgrep/semgrep/pull/3505))\\n- Constant propagation now works inside Python with statements ([#3402](https://github.com/semgrep/semgrep/issues/3402))\\n- Metavariable value replacement in message/autofix no longer mixes up short and long names like $X vs $X2 ([#3458](https://github.com/semgrep/semgrep/issues/3458))\\n- Fixed metavariable name collision during interpolation of message / autofix ([#3483](https://github.com/semgrep/semgrep/pull/3483)) Thanks to[@Justin Timmons](https://r2c-community.slack.com/team/U026SUZKJ8Z) for the fix!\\n- Revert pattern: $X optimization ([#3476](https://github.com/semgrep/semgrep/issues/3476))\\n- metavariable-pattern: Allow filtering using a single pattern or pattern-regex\\n- Dataflow: Translate call chains into IL\\n\\n### Changes\\n\\n- Significant speed improvements (noted above)\\n- The size of the semgrep-core the binary is now 95 MB (was 170 MB in v0.58.0) and a smaller Docker image (from 95 MB to 40 MB)\\n- The --debug option now displays which files are currently processed incrementally; it will not wait until semgrep-core completely finishes.\\n- Switch from OCaml 4.10.0 to OCaml 4.12.0\\n- Faster matching times for generic mode\\n\\n- Better error message when rule contains empty pattern"},{"id":"june-2021","metadata":{"permalink":"/docs/release-notes/june-2021","source":"@site/release-notes/june-2021.md","title":"June 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-06-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":4.215,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"June 2021","slug":"june-2021","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-06-30T10:00"},"unlisted":false,"prevItem":{"title":"July 2021","permalink":"/docs/release-notes/july-2021"},"nextItem":{"title":"May 2021","permalink":"/docs/release-notes/may-2021"}},"content":"The following updates were made to Semgrep in June 2021.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.57.0\\n\\n### Additions\\n\\n- New options: field in a YAML rule to enable/disable certain features (for example constant propagation) (For the list of available features you can enable/disable see [https://github.com/semgrep/semgrep/blob/develop/interfaces/Rule_options.atd](https://github.com/semgrep/semgrep/blob/develop/interfaces/Rule_options.atd)).\\n- Capture groups in pattern-regex: in $1, $2, etc. ([#3356](https://github.com/semgrep/semgrep/issues/3356))\\n- Support metavariables inside atoms (e.g., foo(:$ATOM))\\n- Support metavariables and ellipsis inside regexp literals (for example `foo(/.../)`)\\n- Associative-commutative matching for bitwise OR, AND, and XOR operations\\n- Add support for $...MVAR in generic patterns\\n- Add support for $...MVAR in generic patterns\\n- metavariable-pattern: Add support for nested Spacegrep/regex/Comby patterns\\n- C#: support ellipsis in method parameters ([#3289](https://github.com/semgrep/semgrep/issues/3289))\\n\\n### Fixes\\n\\n- C#: parse __makeref, __reftype, __refvalue ([#3364](https://github.com/semgrep/semgrep/pull/3364))\\n- Java: parsing of dots inside function annotations with brackets ([#3389](https://github.com/semgrep/semgrep/pull/3389))\\n- Do not pretend that short-circuit Boolean AND and OR operators are commutative ([#3399](https://github.com/semgrep/semgrep/issues/3399))\\n- metavariable-pattern: Fix crash when nesting a non-generic pattern within a generic rule\\n- metavariable-pattern: Fix parse info when matching content of a metavariable under a different language\\n- generic mode on Markdown files with very long lines will now work ([#2987](https://github.com/semgrep/semgrep/issues/2987))\\n\\n### Changes\\n\\n- generic mode: files that don\'t look like nicely-indented programs are no longer ignored, which may cause accidental slowdowns in setups where excessively large files are not excluded explicitly ([#3418](https://github.com/semgrep/semgrep/pull/3418))\\n- metavariable-comparison: Fix crash when comparing integers and floats\\n- Do not filter findings with the same range but different metavariable bindings ([#3310](https://github.com/semgrep/semgrep/pull/3310))\\n- Set parsing_state.have_timeout when a timeout occurs ([#3438](https://github.com/semgrep/semgrep/pull/3438))\\n- Set a timeout of 10s per file ([#3434](https://github.com/semgrep/semgrep/pull/3434))\\n- Improvements to contributing documentation ([#3353](https://github.com/semgrep/semgrep/pull/3353))\\n- Memoize getting ranges to speed up rules with large ranges\\n- When and-ed with other patterns, pattern: $X will not be evaluated on its own, but will look at the context and find $X within the metavariables bound, which should be significantly faster\\n\\n## Version 0.56.0\\n\\n### Additions\\n\\n- Associative-commutative matching for Boolean AND and OR operations ([#3198](https://github.com/semgrep/semgrep/issues/3198))\\n- Support metavariables inside strings (e.g., foo(\\"$VAR\\"))\\n- Support metavariables inside atoms (e.g., foo(:$ATOM))\\n- metavariable-pattern: allow matching the content of a metavariable under a different language\\n\\n### Fixes\\n\\n- C#: Parse attributes for local functions ([#3348](https://github.com/semgrep/semgrep/issues/3348))\\n- Go: Recognize other common package naming conventions ([#2424](https://github.com/semgrep/semgrep/issues/2424))\\n\\n### Changes\\n\\n- Upgraded TypeScript parser ([#3102](https://github.com/semgrep/semgrep/issues/3102))\\n\\n## Version 0.55.1\\n\\n### Additions\\n\\n- Added new metavariable-pattern operator (available only via --optimizations), thanks to Kai Zhong for the feature request ([#3257](https://github.com/semgrep/semgrep/issues/3257))\\n- Add helpUri to SARIF output if rule source metadata is defined\\n\\n### Fixes\\n\\n- C#: Support unsafe block syntax ([#3283](https://github.com/semgrep/semgrep/pull/3283))\\n- Generic mode: fixed wrong line numbers for multi-lines match ([#3315](https://github.com/semgrep/semgrep/issues/3315))\\n- JavaScript: support partial field definitions pattern, like in JSON\\n- JSON: handle correctly metavariables as field ([#3279](https://github.com/semgrep/semgrep/issues/3279))\\n- PHP: Support ellipsis in include/require and echo ([#3191](https://github.com/semgrep/semgrep/issues/3191),[#3245](https://github.com/semgrep/semgrep/issues/3245))\\n- PHP: Prefer expression patterns over statement patterns ([#3191](https://github.com/semgrep/semgrep/issues/3191))\\n- Python: support ellipsis in try-except ([#3233](https://github.com/semgrep/semgrep/pull/3233))\\n- Scala: correctly parse symbol literals and interpolated strings containing double dollars ([#3271](https://github.com/semgrep/semgrep/pull/3271))\\n- Taint mode: Allow statement-patterns when these are represented as statement-expressions in the Generic AST ([#3191](https://github.com/semgrep/semgrep/issues/3191))\\n- Dataflow: Analyze foreach body even if we do not handle the pattern yet (#3155)\\n- Correctly handle ellipsis inside function types ([#3119](https://github.com/semgrep/semgrep/issues/3119))\\n- Fall back to no optimizations when using unsupported features: pattern-where-python, taint rules, and --debugging-json ([#3265](https://github.com/semgrep/semgrep/pull/3265))\\n- Handle regexp parse errors gracefully when using optimizations ([#3266](https://github.com/semgrep/semgrep/pull/3266))\\n- Support equivalences when using optimizations ([#3259](https://github.com/semgrep/semgrep/pull/3259))\\n\\n### Changes\\n\\n- Run rules in semgrep-core (rather than patterns) by default (these are the optimizations described above)\\n\\n## Version 0.54.0\\n\\nThis version includes release notes for Semgrep version 0.53.0 as well.\\n\\n### Additions\\n\\n- Alpha support for Scala\\n- Metrics collection of project_hash in cases where git is not available\\n- Taint mode now also analyzes top-level statements\\n- Per rule parse times and per rule-file parse and match times added to opt-in metrics\\n- $...MVAR can now match a list of statements (not just a list of arguments) ([#3170](https://github.com/semgrep/semgrep/issues/3170))\\n\\n### Fixes\\n\\n- JavaScript parsing: Support decorators on properties\\n- JavaScript parsing: Allow default export for any declaration\\n- Metavariables in messages are filled in when using --optimizations all\\n- Respect --timeout-threshold option in --optimizations all mode\\n- Python: class variables are matched in any order ([#3212](https://github.com/semgrep/semgrep/issues/3212))\\n- Running with --strict will now return results if there are nosem mismatches. Semgrep will report a nonzero exit code if --strict is set and there are nosem mismatches ([#3099](https://github.com/semgrep/semgrep/issues/3099))\\n- PHP: parsing correctly ... and metavariables in parameters\\n- PHP: parsing correctly functions with a single statement in their body\\n- Evaluate interpolated strings during constant propagation ([#3127](https://github.com/semgrep/semgrep/issues/3127))\\n- Semgrep will report an InvalidRuleSchemaError for dictionaries with duplicate key names ([#3084](https://github.com/semgrep/semgrep/issues/3084))\\n- Basic type inference also for implicit variable declarations (Python, Ruby, PHP, and JavaScript)\\n- JavaScript/TypeScript: differentiating tagged template literals in the AST ([#3187](https://github.com/semgrep/semgrep/issues/3187))\\n- Ruby: storing parenthesis in function calls in the AST ([#3178](https://github.com/semgrep/semgrep/issues/3178))\\n\\n### Changes\\n\\n- Moved some debug logging to verbose logging\\n- $...ARGS can now match an empty list of arguments, just like ... ([#3177](https://github.com/semgrep/semgrep/issues/3177))\\n- JSON and SARIF outputs sort keys for predictable results"},{"id":"may-2021","metadata":{"permalink":"/docs/release-notes/may-2021","source":"@site/release-notes/may-2021.md","title":"May 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-05-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":1.965,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"May 2021","slug":"may-2021","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-05-30T10:00"},"unlisted":false,"prevItem":{"title":"June 2021","permalink":"/docs/release-notes/june-2021"},"nextItem":{"title":"April 2021","permalink":"/docs/release-notes/april-2021"}},"content":"The following updates were made to Semgrep in May 2021.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.52.0\\n\\nThis version also includes release notes for Semgrep version 0.53.0.\\n\\n### Additions\\n\\n- Alpha support for C#\\n- Metavariables match both a constant variable occurrence and that same constant value ([#3058](https://github.com/semgrep/semgrep/pull/3058))\\n\\n### Fixes\\n\\n- OCaml: fix useless-else false positives by generating appropriate AST for if without an else.\\n- JavaScript/TypeScript: Propagate constant definitions without declaration\\n\\n## Version 0.51.0\\n\\n### Additions\\n\\n- Keep track of and report rule parse time in addition to file parse time\\n- v0 of opt-in, anonymous aggregate metrics\\n\\n### Fixes\\n\\n- JavaScript/TypeScript: allow the deep expression operator `<... ...>` in expression statement position, for example:\\n\\n```\\n\\nARG = [$V];\\n\\n...\\n\\n<... $O[$ARG] ...>; // this works now\\n\\n```\\n\\n- PHP arrays with dots inside parse\\n- Propagate constants in nested lvalues such as y in x[y]\\n- Experimental support for C#\\n\\n### Changes\\n\\n- Show log messages from semgrep-core when running semgrep with --debug\\n- By default, targets larger than 1 MB are now excluded from Semgrep scans. The new option --max-target-bytes 0 restores the previous behavior.\\n- Report relative path instead of absolute when using --time\\n\\n## Version 0.50.1\\n\\n### Additions\\n\\n- JS/TS: Infer global constants even if the const qualifier is missing ([#2978](https://github.com/semgrep/semgrep/pull/2978))\\n- PHP: Resolve names and infer global constants in the same way as for Python\\n\\n### Fixes\\n\\n- Empty yaml files do not crash\\n- Autofix does not insert newline characters for patterns from semgrep.live ([#3045](https://github.com/semgrep/semgrep/pull/3045))\\n- Autofix printout is grouped with its own finding rather than the one below it ([#3046](https://github.com/semgrep/semgrep/pull/3046))\\n- Do not assign constant values to assigned variables ([#2805](https://github.com/semgrep/semgrep/issues/2805))\\n- A --time flag instead of --json-time which shows a summary of the timing information when invoked with normal output and adds a time field to the json output when --json is also present\\n\\n### Changes\\n\\n- Moved some debug logging to verbose logging\\n- $...ARGS can now match an empty list of arguments, just like ... ([#3177](https://github.com/semgrep/semgrep/issues/3177))\\n- JSON and SARIF outputs sort keys for predictable results\\n- .git/ directories are ignored when scanning\\n- External Python API (semgrep_main.invoke_semgrep) now takes an optional OutputSettings argument for controlling output\\n- json_time has moved to OutputSettings.output_time, this and many other OutputSettings arguments have been made optional\\n\\n### Removed\\n\\n- `--json-time` flag in favor of `--json` + `--time`"},{"id":"april-2021","metadata":{"permalink":"/docs/release-notes/april-2021","source":"@site/release-notes/april-2021.md","title":"April 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-04-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":2.415,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"April 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","slug":"april-2021","append_help_link":true,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-04-30T10:00"},"unlisted":false,"prevItem":{"title":"May 2021","permalink":"/docs/release-notes/may-2021"},"nextItem":{"title":"Older updates","permalink":"/docs/release-notes/all-release-notes"}},"content":"The following updates were made to Semgrep in April 2021.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version 0.49.0\\n\\n### Additions\\n\\n- Support for matching multiple arguments with a metavariable ([#3009](https://github.com/semgrep/semgrep/issues/3009)). This is done with a \\"spread metavariable\\" operator that looks like $...ARGS. This used to be available only for JavaScript and TypeScript, and is now available for the other languages (Python, Java, Go, C, Ruby, PHP, and OCaml).\\n- A new --optimizations [STR] command-line flag to turn on or off some optimizations. Use \\"none\\" to turn off everything and \\"all\\" to turn on everything. Just using `--optimizations` is equivalent to `--optimizations` all, and not using `--optimizations` is equivalent to `--optimizations` none.\\n- JavaScript/TypeScript: Support `...` inside JSX text to match any text, as in `<a href=\\"foo\\">...</a>`. ([#2963](https://github.com/semgrep/semgrep/issues/2963))\\n- JavaScript/TypeScript: Support metavariables for JSX attribute values, as in `<a href=$X>some text</a>`. ([#2964](https://github.com/semgrep/semgrep/issues/2964))\\n\\n### Fixes\\n\\n- Python: correctly parsing fstring with multiple colons\\n- Ruby: better matching for interpolated strings ([#2826](https://github.com/semgrep/semgrep/issues/2826) and[#2949](https://github.com/semgrep/semgrep/issues/2949))\\n- Ruby: correctly matching numbers\\n\\n### Changes\\n\\n- Add required executionSuccessful attribute to SARIF output ([#2983](https://github.com/semgrep/semgrep/pull/2983)). Thanks to[Simon Engledew](https://github.com/simon-engledew)!\\n- Remove jsx and tsx from languages, instead just use javascript or typescript ([#3000](https://github.com/semgrep/semgrep/pull/3000))\\n- Add limit max characters in the output line (#2958) and add a flag to control maximum characters (defaults to 160). Thanks to[Ankush Menat](https://github.com/ankush)!\\n\\n## Version 0.48.0\\n\\n### Additions\\n\\n- Taint mode: Basic cross-function analysis ([#2913](https://github.com/semgrep/semgrep/pull/2913))\\n- Support for the new Java record extension and Java symbols with accented characters ([#2704](https://github.com/semgrep/semgrep/issues/2704))\\n\\n### Fixes\\n\\n- Capturing functions when used as both expressions and statements in JavaScript ([#1007](https://github.com/semgrep/semgrep/issues/1007))\\n- Literal for ocaml tree sitter ([#2885](https://github.com/semgrep/semgrep/issues/2885))\\n\\n### Changes\\n\\n- The extra lines data is now consistent across scan types (e.g., semgrep-core, spacegrep, pattern-regex)\\n\\n## Version 0.47.0\\n\\n### Additions\\n\\n- Java: support of for(...)\\n- Rust: Semgrep patterns now support top-level statements ([#2910](https://github.com/semgrep/semgrep/pull/2910))\\n- Support for UTF-8 code with non-ASCII chars ([#2944](https://github.com/semgrep/semgrep/pull/2944))\\n\\n### Fixes\\n\\n- Single field pattern in JSON, allowing $FLD: \\\\{ ... \\\\} pattern\\n- Config detection in files with many suffix delimiters, like this.that.check.yaml. More concretely: configs end with .yaml, YAML language tests end with .test.yaml, and everything else is handled by its respective language extension (e.g., .py).\\n- Single array field in YAML in a pattern is parsed as a field, not a one element array\\n\\n## Version 0.46.0\\n\\n### Additions\\n\\n- YAML language support to --test\\n\\n### Fixes\\n\\n- SARIF output now nests invocations inside runs\\n- Go backslashed carets in regexes can be parsed\\n\\n### Changes\\n\\n- Deep expression matches (&lt;... foo ...&gt;) now match within the bodies of anonymous functions (a.k.a. lambda-expressions) and arbitrary language-specific statements (e.g., the Golang go statement)\\n\\n## Version 0.45.0\\n\\n### Additions\\n\\n- --experimental flag for passing rules directly to semgrep-core ([#2836](https://github.com/semgrep/semgrep/pull/2836))\\n\\n### Fixes\\n\\n- Ellipses in template strings don\'t match string literals ([#2780](https://github.com/semgrep/semgrep/issues/2780))\\n- Go: correctly parse select/switch clauses like in tree-sitter ([#2847](https://github.com/semgrep/semgrep/issues/2847))\\n- Go: parse correctly \'for ...\' header in Go patterns ([#2838](https://github.com/semgrep/semgrep/issues/2838))"},{"id":"/all-release-notes","metadata":{"permalink":"/docs/release-notes/all-release-notes","source":"@site/release-notes/all-release-notes.md","title":"Older updates","description":"Release notes only include updates made since April 2021. To find information about older updates, see the Semgrep GitHub changelog.","date":"2021-04-01T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":0.1,"hasTruncateMarker":false,"authors":[],"frontMatter":{"hide_title":true,"title":"Older updates","tags":["Release notes"],"date":"2021-04-01T10:00"},"unlisted":false,"prevItem":{"title":"April 2021","permalink":"/docs/release-notes/april-2021"}},"content":"Release notes only include updates made since April 2021. To find information about older updates, see the [Semgrep GitHub changelog](https://github.com/semgrep/semgrep/releases)."}]}}')}}]);