"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[37378],{28291:e=>{e.exports=JSON.parse('{"tag":{"label":"Rule writing","permalink":"/docs/tags/rule-writing","allTagsPath":"/docs/tags","count":20,"items":[{"id":"writing-rules/autofix","title":"Autofix","description":"Autofix is a Semgrep feature where rules contain suggested fixes to resolve findings.","permalink":"/docs/writing-rules/autofix"},{"id":"writing-rules/data-flow/constant-propagation","title":"Constant propagation","description":"Semgrep performs flow-sensitive constant folding and this information is used by the matching engine.","permalink":"/docs/writing-rules/data-flow/constant-propagation"},{"id":"writing-rules/rule-ideas","title":"Custom rule examples","description":"Not sure what to write a rule for? Below are some common questions, ideas, and topics to spur your imagination. Happy hacking! \ud83d\udca1","permalink":"/docs/writing-rules/rule-ideas"},{"id":"semgrep-secrets/rules","title":"Custom rules","description":"Learn about Semgrep Secrets rules.","permalink":"/docs/semgrep-secrets/rules"},{"id":"semgrep-secrets/validators","title":"Custom validators","description":"Learn about validators used in Semgrep Secrets rules.","permalink":"/docs/semgrep-secrets/validators"},{"id":"writing-rules/data-flow/data-flow-overview","title":"Data-flow analysis engine overview","description":"Semgrep can run data-flow analyses on your code, this is used for constant propagation and for taint tracking.","permalink":"/docs/writing-rules/data-flow/data-flow-overview"},{"id":"writing-rules/data-flow/status","title":"Data-flow status","description":"The status of the data-flow analysis.","permalink":"/docs/writing-rules/data-flow/status"},{"id":"writing-rules/generic-pattern-matching","title":"Generic pattern matching","description":"Semgrep can match generic patterns in languages that it doesn\u2019t support yet. You can use generic pattern matching for languages that do **not** have a parser, configuration files, or other structured data such as XML.","permalink":"/docs/writing-rules/generic-pattern-matching"},{"id":"writing-rules/metavariable-analysis","title":"Metavariable analysis","description":"metavariable-analysis allows Semgrep users to check metavariables for common problematic properties, such as RegEx denial of service (ReDoS) and high-entropy values.","permalink":"/docs/writing-rules/metavariable-analysis"},{"id":"writing-rules/overview","title":"Overview","description":"Learn how to use Semgrep\u2019s intuitive syntax to write rules specific to your codebase. You can write and share rules directly from your browser using the Semgrep Playground, or write rules in your terminal and run them on the command line.","permalink":"/docs/writing-rules/overview"},{"id":"writing-rules/pattern-examples","title":"Pattern examples","description":"This section is automatically generated from the unit test suite inside Semgrep. Per-language references are also available within the Playground.","permalink":"/docs/writing-rules/pattern-examples"},{"id":"writing-rules/pattern-syntax","title":"Pattern syntax","description":"Learn Semgrep\'s pattern syntax to search code for a given code pattern. If you\'re just getting started writing Semgrep rules, check out the Semgrep Tutorial at https://semgrep.dev/learn","permalink":"/docs/writing-rules/pattern-syntax"},{"id":"writing-rules/private-rules","title":"Private rules","description":"Semgrep Code users can publish rules to the Semgrep Registry that are not visible to others outside their organization. This can be useful for organizations where rules may contain code-sensitive information or legal requirements prevent using a public registry.","permalink":"/docs/writing-rules/private-rules"},{"id":"writing-rules/rule-syntax","title":"Rule syntax","description":"This document describes the YAML rule syntax of Semgrep including required and optional fields. Just getting started with Semgrep rule writing? Check out the Semgrep Tutorial at https://semgrep.dev/learn","permalink":"/docs/writing-rules/rule-syntax"},{"id":"writing-rules/glossary","title":"SAST and rule-writing glossary","description":"Definitions of static analysis and Semgrep rule-writing terms.","permalink":"/docs/writing-rules/glossary"},{"id":"semgrep-code/java","title":"Semantic detection in Java","description":"Proprietary Semgrep features for the Java language that can increase true positives and reduce false positives.","permalink":"/docs/semgrep-code/java"},{"id":"trophy-case","title":"Semgrep trophy case","description":"This is a list of vulnerabilities found and security fixes made with Semgrep.","permalink":"/docs/trophy-case"},{"id":"writing-rules/data-flow/taint-mode","title":"Taint analysis","description":"Taint mode allows you to write simple rules that catch complex injection bugs thanks to taint analysis.","permalink":"/docs/writing-rules/data-flow/taint-mode"},{"id":"writing-rules/testing-rules","title":"Testing rules","description":"Semgrep provides a convenient testing mechanism for your rules. You can simply write code and provide a few annotations to let Semgrep know where you are or aren\'t expecting findings.","permalink":"/docs/writing-rules/testing-rules"},{"id":"troubleshooting/rules","title":"Troubleshooting rules","description":"Follow these troubleshooting steps when your pattern fails to parse, your rule doesn\'t match its intended code, and other rule writing pitfalls.","permalink":"/docs/troubleshooting/rules"}],"unlisted":false}}')}}]);