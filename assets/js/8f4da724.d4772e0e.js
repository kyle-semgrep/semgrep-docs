"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[61263],{14345:(e,n,i)=>{i.d(n,{A:()=>o});i(96540);var s=i(34164);const r={tabItem:"tabItem_Ymn6"};var t=i(74848);function o(e){let{children:n,hidden:i,className:o}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,o),hidden:i,children:n})}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(96540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}},54313:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/buildkite-branch-settings-b03d0212f25dbf9cf98358c182f51c7f.png"},62464:(e,n,i)=>{i.d(n,{A:()=>E});var s=i(96540),r=i(34164),t=i(80052),o=i(56347),a=i(35793),c=i(99025),l=i(4430),d=i(44148);function p(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:i}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:i,attributes:s,default:r}}=e;return{value:n,label:i,attributes:s,default:r}}))}(i);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function h(e){let{value:n,tabValues:i}=e;return i.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:i}=e;const r=(0,o.W6)(),t=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:n,groupId:i});return[(0,c.aZ)(t),(0,s.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(r.location.search);n.set(t,e),r.replace({...r.location,search:n.toString()})}),[t,r])]}function m(e){const{defaultValue:n,queryString:i=!1,groupId:r}=e,t=u(e),[o,c]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=i.find((e=>e.default))??i[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:t}))),[l,p]=g({queryString:i,groupId:r}),[m,f]=function(e){let{groupId:n}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,t]=(0,d.Dv)(i);return[r,(0,s.useCallback)((e=>{i&&t.set(e)}),[i,t])]}({groupId:r}),j=(()=>{const e=l??m;return h({value:e,tabValues:t})?e:null})();(0,a.A)((()=>{j&&c(j)}),[j]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);c(e),p(e),f(e)}),[p,f,t]),tabValues:t}}var f=i(75251);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=i(74848);function b(e){let{className:n,block:i,selectedValue:s,selectValue:o,tabValues:a}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,t.a_)(),d=e=>{const n=e.currentTarget,i=c.indexOf(n),r=a[i].value;r!==s&&(l(n),o(r))},p=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const i=c.indexOf(e.currentTarget)+1;n=c[i]??c[0];break}case"ArrowLeft":{const i=c.indexOf(e.currentTarget)-1;n=c[i]??c[c.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":i},n),children:a.map((e=>{let{value:n,label:i,attributes:t}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{c.push(e)},onKeyDown:p,onClick:d,...t,className:(0,r.A)("tabs__item",j.tabItem,t?.className,{"tabs__item--active":s===n}),children:i??n},n)}))})}function S(e){let{lazy:n,children:i,selectedValue:t}=e;const o=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===t));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function y(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,x.jsx)(b,{...n,...e}),(0,x.jsx)(S,{...n,...e})]})}function E(e){const n=(0,f.A)();return(0,x.jsx)(y,{...e,children:p(e.children)},String(n))}},65051:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/buildkite-pipeline-settings-678706ef74ddc551113835a9b23776a7.png"},71766:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>Y,contentTitle:()=>V,default:()=>W,frontMatter:()=>K,metadata:()=>s,toc:()=>J});const s=JSON.parse('{"id":"semgrep-ci/sample-ci-configs","title":"Sample CI configurations","description":"View sample configuration files to run Semgrep with various CI/CD providers such as GitHub, GitLab, Jenkins, Buildkite, CircleCI, and more.","source":"@site/docs/semgrep-ci/sample-ci-configs.md","sourceDirName":"semgrep-ci","slug":"/semgrep-ci/sample-ci-configs","permalink":"/semgrep-docs/semgrep-ci/sample-ci-configs","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/semgrep-ci/sample-ci-configs.md","tags":[{"inline":true,"label":"Deployment","permalink":"/semgrep-docs/tags/deployment"}],"version":"current","lastUpdatedAt":1752260268000,"frontMatter":{"slug":"sample-ci-configs","append_help_link":true,"description":"View sample configuration files to run Semgrep with various CI/CD providers such as GitHub, GitLab, Jenkins, Buildkite, CircleCI, and more.","title":"Sample CI configurations","hide_title":true,"tags":["Deployment"]},"sidebar":"scanSidebar","previous":{"title":"CI environment variables","permalink":"/semgrep-docs/semgrep-ci/ci-environment-variables"},"next":{"title":"Findings in CI","permalink":"/semgrep-docs/semgrep-ci/findings-ci"}}');var r=i(74848),t=i(28453),o=i(62464),a=i(14345),c=i(73724);function l(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# Name of this GitHub Actions workflow.\nname: Semgrep\n\non:\n  # Scan changed files in PRs (diff-aware scanning):\n  pull_request: {}\n  # Scan on-demand through GitHub Actions interface:\n  workflow_dispatch: {}\n  # Scan mainline branches and report all findings:\n  push:\n    branches: ["master", "main"]\n  # Schedule the CI job (this method uses cron syntax):\n  schedule:\n    - cron: \'20 17 * * *\' # Sets Semgrep to scan every day at 17:20 UTC.\n    # It is recommended to change the schedule to a random time.\n\npermissions:\n  contents: read\n\njobs:\n  semgrep:\n    # User definable name of this GitHub Actions job.\n    name: semgrep/ci\n    # If you are self-hosting, change the following `runs-on` value:\n    runs-on: ubuntu-latest\n\n    container:\n      # A Docker image with Semgrep installed. Do not change this.\n      image: semgrep/semgrep\n\n    # Skip any PR created by dependabot to avoid permission issues:\n    if: (github.actor != \'dependabot[bot]\')\n\n    steps:\n      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.\n      - uses: actions/checkout@v4\n      # Run the "semgrep ci" command on the command line of the docker image.\n      - run: semgrep ci --sarif > semgrep.sarif\n        env:\n          # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.\n          # Generate a token from Semgrep AppSec Platform > Settings\n          # and add it to your GitHub secrets.\n          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}\n\n      - name: Upload SARIF file for GitHub Advanced Security Dashboard\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: semgrep.sarif\n        if: always()\n'})})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}function p(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# Name of this GitHub Actions workflow.\nname: Semgrep CE scan\n\non:\n  # Scan in PRs:\n  pull_request: {}\n  # Scan on-demand through GitHub Actions interface:\n  workflow_dispatch: {}\n  # Scan mainline branches and report all findings:\n  push:\n    branches: ["master", "main"]\n  # Schedule the CI job (this method uses cron syntax):\n  schedule:\n    - cron: \'20 17 * * *\' # Sets Semgrep to scan every day at 17:20 UTC.\n    # It is recommended to change the schedule to a random time.\n\npermissions:\n  contents: read\n\njobs:\n  semgrep:\n    # User definable name of this GitHub Actions job.\n    name: semgrep-oss/scan\n    # If you are self-hosting, change the following `runs-on` value: \n    runs-on: ubuntu-latest\n\n    container:\n      # A Docker image with Semgrep installed. Do not change this.\n      image: semgrep/semgrep\n\n    # Skip any PR created by dependabot to avoid permission issues:\n    if: (github.actor != \'dependabot[bot]\')\n\n    steps:\n      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.\n      - uses: actions/checkout@v4\n      # Run the "semgrep scan" command on the command line of the docker image.\n      - run: semgrep scan --config auto\n'})})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}function h(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'semgrep:\n  # A Docker image with Semgrep installed.\n  image: semgrep/semgrep\n  # Run the "semgrep ci" command on the command line of the docker image.\n  script: semgrep ci\n\n  rules:\n    # Allow triggering a scan manually from the GitLab UI\n    - if: $CI_PIPELINE_SOURCE == "web"\n    # Scan changed files in MRs, (diff-aware scanning):\n    - if: $CI_MERGE_REQUEST_IID\n    # Scan mainline (default) branches and report all findings.\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n\n  variables:\n    # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.\n    # Generate a token from Semgrep AppSec Platform > Settings\n    # and add it as a variable in your GitLab CI/CD project settings.\n    SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN\n'})})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}function m(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'semgrep:\n  # A Docker image with Semgrep installed.\n  image: semgrep/semgrep\n\n  rules:\n    # Scan changed files in MRs, (diff-aware scanning):\n    - if: $CI_MERGE_REQUEST_IID\n\n    # Scan mainline (default) branches and report all findings.\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n\n  variables:\n    # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.\n    # Generate a token from Semgrep AppSec Platform > Settings\n    # and add it as a variable in your GitLab CI/CD project settings.\n    SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN\n\n    # Upload findings to GitLab SAST Dashboard:\n    SEMGREP_GITLAB_JSON: "1"\n\n  # Run the "semgrep ci" command on the command line of the docker image and send findings\n  # to GitLab SAST.\n  script: semgrep ci --gitlab-sast > gl-sast-report.json || true\n  artifacts:\n    reports:\n      sast: gl-sast-report.json\n'})})}function f(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}function j(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'semgrep:\n  # A Docker image with Semgrep installed.\n  image: semgrep/semgrep\n  # Run the "semgrep scan" command on the command line of the docker image.\n  script: semgrep scan --config auto .\n\n  rules:\n  # Scan in MRs.\n  - if: $CI_MERGE_REQUEST_IID\n\n  # Scan mainline (default) branches and report all findings.\n  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n\n\n'})})}function x(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(j,{...e})}):j(e)}function b(e){const n={code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This code snippet uses Jenkins declarative syntax."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"pipeline {\n  agent any\n    environment {\n      // The following variable is required for a Semgrep AppSec Platform-connected scan:\n      SEMGREP_APP_TOKEN = credentials('SEMGREP_APP_TOKEN')\n\n      // Uncomment the following line to scan changed\n      // files in PRs or MRs (diff-aware scanning):\n      // SEMGREP_BASELINE_REF = \"main\"\n\n      // Troubleshooting:\n\n      // Uncomment the following lines if Semgrep AppSec Platform > Findings Page does not create links\n      // to the code that generated a finding or if you are not receiving PR or MR comments.\n      // SEMGREP_JOB_URL = \"${BUILD_URL}\"\n      // SEMGREP_COMMIT = \"${GIT_COMMIT}\"\n      // SEMGREP_BRANCH = \"${GIT_BRANCH}\"\n      // SEMGREP_REPO_NAME = env.GIT_URL.replaceFirst(/^https:\\/\\/github.com\\/(.*).git$/, '$1')\n      // SEMGREP_REPO_URL = env.GIT_URL.replaceFirst(/^(.*).git$/,'$1')\n      // SEMGREP_PR_ID = \"${env.CHANGE_ID}\"\n    }\n    stages {\n      stage('Semgrep-Scan') {\n        steps {\n          sh 'pip3 install semgrep'\n          sh 'semgrep ci'\n      }\n    }\n  }\n}\n"})})]})}function S(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(b,{...e})}):b(e)}function y(e){const n={code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This code snippet uses Jenkins declarative syntax."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"pipeline {\n  agent any\n    stages {\n      stage('Semgrep-Scan') {\n        steps {\n          sh 'pip3 install semgrep'\n          sh 'semgrep scan --config auto'\n      }\n    }\n  }\n}\n"})})]})}function E(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(y,{...e})}):y(e)}function v(e){const n={code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This code snippet uses Jenkins declarative syntax."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"pipeline {\n  agent any\n    environment {\n      // The following variable is required for a Semgrep AppSec Platform-connected scan:\n      SEMGREP_APP_TOKEN = credentials('SEMGREP_APP_TOKEN')\n\n      // Uncomment the following line to scan changed\n      // files in PRs or MRs (diff-aware scanning):\n      // SEMGREP_BASELINE_REF = \"main\"\n\n      // Troubleshooting:\n\n      // Uncomment the following lines if Semgrep AppSec Platform > Findings Page does not create links\n      // to the code that generated a finding or if you are not receiving PR or MR comments.\n      // SEMGREP_JOB_URL = \"${BUILD_URL}\"\n      // SEMGREP_COMMIT = \"${GIT_COMMIT}\"\n      // SEMGREP_BRANCH = \"${GIT_BRANCH}\"\n      // SEMGREP_REPO_NAME = env.GIT_URL.replaceFirst(/^https:\\/\\/github.com\\/(.*).git$/, '$1')\n      // SEMGREP_REPO_URL = env.GIT_URL.replaceFirst(/^(.*).git$/,'$1')\n      // SEMGREP_PR_ID = \"${env.CHANGE_ID}\"\n    }\n    stages {\n      stage('Semgrep-Scan') {\n        steps {\n            sh '''docker pull semgrep/semgrep && \\\n            docker run \\\n            -e SEMGREP_APP_TOKEN=$SEMGREP_APP_TOKEN \\\n            -e SEMGREP_REPO_URL=$SEMGREP_REPO_URL \\\n            -e SEMGREP_REPO_NAME=$SEMGREP_REPO_NAME \\\n            -e SEMGREP_BRANCH=$SEMGREP_BRANCH \\\n            -e SEMGREP_COMMIT=$SEMGREP_COMMIT \\\n            -e SEMGREP_PR_ID=$SEMGREP_PR_ID \\\n            -v \"$(pwd):$(pwd)\" --workdir $(pwd) \\\n            semgrep/semgrep semgrep ci '''\n      }\n    }\n  }\n}\n"})})]})}function R(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(v,{...e})}):v(e)}function P(e){const n={code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs scans depending on what products you have enabled in Semgrep AppSec Platform. It is for use with code hosted in Bitbucket Data Center."}),"\n",(0,r.jsx)(n.p,{children:"This code snippet uses Jenkins declarative syntax."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"pipeline {\n  agent any\n    environment {\n      // The following variable is required for a Semgrep AppSec Platform-connected scan:\n      SEMGREP_APP_TOKEN = credentials('SEMGREP_APP_TOKEN')\n      BITBUCKET_TOKEN = credentials('FS_BITBUCKET_TOKEN')\n\n      // Uncomment the following line to scan changed\n      // files in PRs or MRs (diff-aware scanning):\n      // SEMGREP_BASELINE_REF = \"${env.CHANGE_ID != null ? 'main' : ''}\"\n\n      // Troubleshooting:\n\n      // Uncomment the following lines if Semgrep AppSec Platform > Findings Page does not create links\n      // to the code that generated a finding or if you are not receiving PR or MR comments.\n      // SEMGREP_JOB_URL = \"${BUILD_URL}\"\n      // SEMGREP_COMMIT = \"${GIT_COMMIT}\"\n      // SEMGREP_BRANCH = \"${GIT_BRANCH}\"\n      // SEMGREP_REPO_NAME = env.GIT_URL.replaceFirst(/^https:\\/\\/YOUR_BITBUCKET_DATA_CENTER_URL\\/scm\\/(.*).git$/, '$1')\n      // SEMGREP_REPO_URL = env.GIT_URL.replaceFirst(/^(https:\\/\\/.*?)\\/scm\\/(.*)\\/(.*)\\.git$/, '$1/projects/$2/repos/$3')\n      // SEMGREP_PR_ID = \"${env.CHANGE_ID != null ? env.CHANGE_ID : ''}\"\n      SEMGREP_APP_URL = \"https://semgrep.dev\"\n    }\n    stages {\n      stage('Semgrep-Scan') {\n        steps {\n            sh 'pip3 install semgrep'\n            sh 'semgrep ci'\n        }\n    }\n  }\n}\n"})})]})}function _(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(P,{...e})}):P(e)}function w(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'image: semgrep/semgrep:latest\n\npipelines:\n  branches:\n    # Change to your default branch if different from main\n    main:\n    - step:\n        name: Semgrep scan on push\n        script:\n          - export SEMGREP_APP_TOKEN=$SEMGREP_APP_TOKEN\n          - semgrep ci\n\n  pull-requests:\n    \'**\': # This applies to pull requests for all branches\n      - step:\n          name: Semgrep scan on PR\n          script:\n            - export SEMGREP_APP_TOKEN=$SEMGREP_APP_TOKEN\n            - export BITBUCKET_TOKEN=$PAT # Necessary for PR comments\n            # Change to your default branch if different from main\n            - export SEMGREP_BASELINE_REF="origin/main"\n            - git fetch origin "+refs/heads/*:refs/remotes/origin/*"\n            - semgrep ci\n\n  custom:\n  # Trigger job manually. For cron in Bitbucket, see: https://support.atlassian.com/bitbucket-cloud/docs/pipeline-triggers/#On-schedule\n    semgrep-manual:\n      - step:\n          name: Semgrep manual scan\n          script:\n            - export SEMGREP_APP_TOKEN=$SEMGREP_APP_TOKEN\n            - semgrep ci\n'})})}function C(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(w,{...e})}):w(e)}function I(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"image: semgrep/semgrep:latest\n\npipelines:\n  default:\n    - parallel:\n      - step:\n          name: 'Run Semgrep scan with current branch'\n          deployment: dev # https://support.atlassian.com/bitbucket-cloud/docs/set-up-and-monitor-deployments/\n          script:\n            - semgrep scan --config auto\n"})})}function A(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(I,{...e})}):I(e)}function k(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'- label: ":semgrep: Semgrep Full Scan"\n  commands:\n    - if [[ $BUILDKITE_COMMIT =~ ^[a-fA-F0-9]{40}$ ]]; then export SEMGREP_COMMIT=${BUILDKITE_COMMIT}; fi\n    - export SEMGREP_BRANCH=${BUILDKITE_BRANCH}\n    - export SEMGREP_REPO_URL=${BUILDKITE_REPO}\n    - export SEMGREP_REPO_NAME="$(echo "$BUILDKITE_REPO" | sed -e \'s#git@github.com:##\' | sed -e \'s#.git##\')"\n    - semgrep ci\n  if: |\n    build.pull_request.id == null\n\n- label: ":semgrep: Semgrep Diff Scan"\n  commands:\n    - if [[ $BUILDKITE_COMMIT =~ ^[a-fA-F0-9]{40}$ ]]; then export SEMGREP_COMMIT=${BUILDKITE_COMMIT}; fi\n    - export SEMGREP_PR_ID=${BUILDKITE_PULL_REQUEST}\n    - export SEMGREP_BRANCH=${BUILDKITE_BRANCH}\n    - export SEMGREP_REPO_URL=${BUILDKITE_REPO}\n    - export SEMGREP_REPO_NAME="$(echo "$BUILDKITE_REPO" | sed -e \'s#git@github.com:##\' | sed -e \'s#.git##\')"\n    - SEMGREP_BASELINE_REF=${BUILDKITE_PULL_REQUEST_BASE_BRANCH} semgrep ci\n  if: |\n    build.pull_request.id != null\n\n  plugins:\n    - docker#v5.11.0:\n        image: semgrep/semgrep:latest\n        environment:\n          # The following variable is required to set up a scan connected to Semgrep AppSec Platform:\n          - "SEMGREP_APP_TOKEN"\n'})})}function T(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(k,{...e})}):k(e)}function G(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'- label: ":semgrep: Semgrep CE"\n  commands:\n    - semgrep scan --config auto\n  plugins:\n    - docker#v5.11.0:\n        image: semgrep/semgrep\n'})})}function M(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(G,{...e})}):G(e)}function N(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'version: 2.1\nworkflows:\n  semgrep:\n    jobs:\n      - semgrep-full-scan:\n          filters:\n            branches:\n              only: main\n          context:\n            - semgrep\n      - semgrep-diff-scan:\n          filters:\n            branches:\n              ignore: main\n          context:\n            - semgrep\njobs:\n  semgrep-full-scan:\n    docker:\n      - image: semgrep/semgrep\n    steps:\n      - checkout\n      - run:\n          name: "Semgrep full scan"\n          command: semgrep ci     \n  semgrep-diff-scan:\n    parameters:\n      default_branch:\n        type: string\n        default: main\n    docker:\n      - image: semgrep/semgrep\n    steps:\n      - checkout\n      - run: \n          name: Semgrep diff scan\n          environment: \n            SEMGREP_BASELINE_REF: << parameters.default_branch >>\n          command: semgrep ci\n'})})}function B(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(N,{...e})}):N(e)}function D(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'version: 2.1\nworkflows:\n  semgrep:\n    jobs:\n      - semgrep-full-scan:\n          filters:\n            branches:\n              only: main\n          context:\n            - semgrep\njobs:\n  semgrep-full-scan:\n    docker:\n      - image: semgrep/semgrep\n    steps:\n      - checkout\n      - run:\n          name: "Semgrep CE full scan"\n          command: semgrep scan --config auto\n'})})}function O(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(D,{...e})}):D(e)}function L(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'variables:\n- group: Semgrep_Variables\n\nsteps:\n- checkout: self\n  clean: true\n  fetchDepth: 20\n  persistCredentials: true\n- script: |\n    python -m pip install --upgrade pip\n    pip install semgrep\n    if [ $(Build.SourceBranchName) = "master" ]; then\n        echo "Semgrep full scan"\n        semgrep ci\n    elif [ $(System.PullRequest.PullRequestId) -ge 0 ]; then\n        echo "Semgrep diff scan"\n        export SEMGREP_PR_ID=$(System.PullRequest.PullRequestId)\n        export SEMGREP_BASELINE_REF=\'origin/master\'\n        git fetch origin master:origin/master\n        semgrep ci\n    fi\n  env:\n    SEMGREP_APP_TOKEN: $(SEMGREP_APP_TOKEN)\n'})})}function U(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(L,{...e})}):L(e)}function $(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'\nsteps:\n- checkout: self\n  clean: true\n  fetchDepth: 20\n  persistCredentials: true\n- script: |\n    python -m pip install --upgrade pip\n    pip install semgrep\n    echo "Semgrep CE full scan"\n    semgrep scan --config auto\n'})})}function H(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)($,{...e})}):$(e)}var z=i(93138);function F(e){const n={p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Integrations with source code providers, dependent on CI provider:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"GitHub with GitHub Actions"}),(0,r.jsx)(n.th,{children:"GitLab with GL CI/CD"}),(0,r.jsx)(n.th,{children:"GitHub, GitLab, or BitBucket with other CI providers"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Diff-aware scanning"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705  (May need additional set up)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Hyperlinks"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705  (May need additional set up)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"PR or MR comments"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705  (May need additional set up)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"SCM security dashboard"})}),(0,r.jsx)(n.td,{children:"\u2705 GitHub Advanced Security Dashboard"}),(0,r.jsx)(n.td,{children:"\u2705 GitLab Security Dashboard"}),(0,r.jsx)(n.td,{children:"\u274c No"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"For example, if you use CircleCI as your CI provider on a GitHub repository, Semgrep AppSec Platform does not have any support for GitHub Advanced Security Dashboard."}),"\n",(0,r.jsx)(n.p,{children:"The following list defines the above features."}),"\n",(0,r.jsxs)("dl",{children:[(0,r.jsx)("dt",{children:"Diff-aware scanning"}),(0,r.jsx)("dd",{children:"Semgrep AppSec Platform can scan only changes in files when running on a pull request or merge request (PR or MR). This keeps the scan fast and reduces finding duplication."}),(0,r.jsx)("dt",{children:"Hyperlinks to code"}),(0,r.jsx)("dd",{children:"Semgrep AppSec Platform collects findings in a Findings page. In this page, you can click on a finding to return to your SCM (Github, GitLab, or Bitbucket) to view the lines of code in your repository that generated the finding."}),(0,r.jsx)("dt",{children:"Receiving results (findings) as PR or MR comments"}),(0,r.jsxs)("dd",{children:["This feature enables you to receive ",(0,r.jsx)("a",{href:"/docs/semgrep-code/notifications/#github-pull-request-comments",children:"PR or MR comments"})," from Semgrep AppSec Platform on the lines of code that generated a finding."]}),(0,r.jsx)("dt",{children:"SCM security dashboard"}),(0,r.jsx)("dd",{children:"Send Semgrep findings to your SCM's security dashboard."})]})]})}function q(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(F,{...e})}):F(e)}const K={slug:"sample-ci-configs",append_help_link:!0,description:"View sample configuration files to run Semgrep with various CI/CD providers such as GitHub, GitLab, Jenkins, Buildkite, CircleCI, and more.",title:"Sample CI configurations",hide_title:!0,tags:["Deployment"]},V="Sample continuous integration (CI) configurations",Y={},J=[{value:"Feature support",id:"feature-support",level:2},{value:"GitHub Actions",id:"github-actions",level:2},{value:"Sample GitHub Actions configuration file",id:"sample-github-actions-configuration-file",level:3},...c.RM,{value:"Upload findings to GitHub Advanced Security Dashboard",id:"upload-findings-to-github-advanced-security-dashboard",level:4},{value:"GitLab CI/CD",id:"gitlab-cicd",level:2},{value:"Sample GitLab CI/CD configuration snippet",id:"sample-gitlab-cicd-configuration-snippet",level:3},{value:"Upload findings to GitLab Security Dashboard",id:"upload-findings-to-gitlab-security-dashboard",level:4},{value:"Jenkins",id:"jenkins",level:2},{value:"Sample Jenkins configuration snippet",id:"sample-jenkins-configuration-snippet",level:3},{value:"Bitbucket Pipelines",id:"bitbucket-pipelines",level:2},{value:"Sample Bitbucket Pipelines configuration snippet",id:"sample-bitbucket-pipelines-configuration-snippet",level:3},{value:"Buildkite",id:"buildkite",level:2},{value:"Sample Buildkite configuration snippet",id:"sample-buildkite-configuration-snippet",level:3},{value:"Branch filtering",id:"branch-filtering",level:4},{value:"Build on pull requests",id:"build-on-pull-requests",level:4},{value:"CircleCI",id:"circleci",level:2},{value:"Sample CircleCI configuration snippet",id:"sample-circleci-configuration-snippet",level:3},{value:"Azure Pipelines",id:"azure-pipelines",level:2},{value:"Sample Azure Pipelines configuration snippet",id:"sample-azure-pipelines-configuration-snippet",level:3},...z.RM,{value:"Other providers",id:"other-providers",level:2}];function Q(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"sample-continuous-integration-ci-configurations",children:"Sample continuous integration (CI) configurations"})}),"\n",(0,r.jsx)(n.p,{children:"This document provides sample configuration snippets to run Semgrep CI on various continuous integration (CI) providers."}),"\n",(0,r.jsx)(n.h2,{id:"feature-support",children:"Feature support"}),"\n",(0,r.jsx)(n.p,{children:"Support for certain features of Semgrep AppSec Platform depend on your CI provider or source code management tool (SCM). The following table breaks down the features and their availability:"}),"\n",(0,r.jsx)(q,{}),"\n",(0,r.jsx)(n.h2,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,r.jsx)(n.p,{children:"To add a Semgrep configuration file in your GitHub Actions pipeline:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a ",(0,r.jsx)(n.code,{children:"semgrep.yml"})," file in ",(0,r.jsx)(n.code,{children:".github/workflows"})," in the repository you want to scan."]}),"\n",(0,r.jsxs)(n.li,{children:["Copy the relevant code snippet provided in ",(0,r.jsx)(n.a,{href:"#sample-github-actions-configuration-file",children:"Sample GitHub Actions configuration file"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Paste the relevant code snippet to ",(0,r.jsx)(n.code,{children:"semgrep.yml"})," file. This is your Semgrep configuration file for GitHub Actions."]}),"\n",(0,r.jsxs)(n.li,{children:["Commit the configuration file under ",(0,r.jsx)("code",{children:(0,r.jsx)("span",{className:"placeholder",children:"/REPOSITORY-ROOT-DIRECTORY/.github/workflows/semgrep.yml"})}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The Semgrep job starts automatically upon detecting the committed ",(0,r.jsx)(n.code,{children:"semgrep.yml"})," file."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If you are self-hosting your repository, you must ",(0,r.jsx)(n.a,{href:"https://docs.github.com/en/actions/using-jobs/choosing-the-runner-for-a-job#choosing-self-hosted-runners",children:"use a self-hosted runner"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"sample-github-actions-configuration-file",children:"Sample GitHub Actions configuration file"}),"\n",(0,r.jsxs)(o.A,{defaultValue:"gha-semgrep",values:[{label:"Default",value:"gha-semgrep"},{label:"Semgrep CE",value:"gha-oss"}],children:[(0,r.jsxs)(a.A,{value:"gha-semgrep",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs scans using the products and options you have enabled in Semgrep AppSec Platform."}),(0,r.jsx)(c.Ay,{}),(0,r.jsxs)(n.p,{children:["You can ",(0,r.jsx)(n.strong,{children:"run specific product scans"})," by passing an argument, such as ",(0,r.jsx)(n.code,{children:"--supply-chain"}),". View the ",(0,r.jsx)(n.a,{href:"/getting-started/cli/#scan-using-specific-semgrep-products",children:"list of arguments"}),"."]})]}),(0,r.jsxs)(a.A,{value:"gha-oss",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs Semgrep CE scans using rules configured for your programming language."}),(0,r.jsx)(u,{}),(0,r.jsxs)(n.p,{children:["You can customize the scan by entering custom rules or other rulesets to scan with. See ",(0,r.jsx)(n.a,{href:"/getting-started/cli-oss/#scan-your-codebase-with-a-specific-ruleset",children:"Scan your codebase with a specific ruleset"}),"."]})]})]}),"\n",(0,r.jsxs)(n.admonition,{type:"caution",children:[(0,r.jsxs)(n.p,{children:["If you define both ",(0,r.jsx)(n.code,{children:"branches"})," or ",(0,r.jsx)(n.code,{children:"branches-ignore"})," ",(0,r.jsx)(n.em,{children:"and"})," ",(0,r.jsx)(n.code,{children:"paths"})," or ",(0,r.jsx)(n.code,{children:"paths-ignore"}),", the workflow only runs when both filters are satisfied."]}),(0,r.jsxs)(n.p,{children:["For example, if your configuration file includes the following definition, the workflow runs only if there are changes on the ",(0,r.jsx)(n.code,{children:"development"})," branch to ",(0,r.jsx)(n.code,{children:".github/workflows/semgrep.yml"})," :"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"push:\n  branches:\n    - development\n  paths:\n    - .github/workflows/semgrep.yml\n"})})]}),"\n",(0,r.jsx)(n.h4,{id:"upload-findings-to-github-advanced-security-dashboard",children:"Upload findings to GitHub Advanced Security Dashboard"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Alternate job that uploads findings to GitHub Advanced Security Dashboard"}),(0,r.jsx)(d,{})]}),"\n",(0,r.jsx)(n.h2,{id:"gitlab-cicd",children:"GitLab CI/CD"}),"\n",(0,r.jsx)(n.p,{children:"To add a Semgrep configuration snippet in your GitLab CI/CD pipeline:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create or edit your ",(0,r.jsx)(n.code,{children:".gitlab-ci.yml"})," file in the repository you want to scan."]}),"\n",(0,r.jsxs)(n.li,{children:["Copy the relevant code snippet provided in ",(0,r.jsx)(n.a,{href:"#sample-gitlab-cicd-configuration-snippet",children:"Sample GitLab CI/CD configuration snippet"}),", and then paste it to your ",(0,r.jsx)(n.code,{children:".gitlab-ci.yml"})," file."]}),"\n",(0,r.jsxs)(n.li,{children:["Commit the updated ",(0,r.jsx)(n.code,{children:".gitlab-ci.yml"})," file."]}),"\n",(0,r.jsxs)(n.li,{children:["The Semgrep job starts automatically upon detecting the committed ",(0,r.jsx)(n.code,{children:".gitlab-ci.yml"})," file. You can also view the job from your GitLab project's ",(0,r.jsx)(n.strong,{children:"CI/CD > Pipelines"})," page."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"sample-gitlab-cicd-configuration-snippet",children:"Sample GitLab CI/CD configuration snippet"}),"\n",(0,r.jsxs)(o.A,{defaultValue:"glcicd-semgrep",values:[{label:"Default",value:"glcicd-semgrep"},{label:"Semgrep CE",value:"glcicd-oss"}],children:[(0,r.jsxs)(a.A,{value:"glcicd-semgrep",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs scans using the products and options you have enabled in Semgrep AppSec Platform."}),(0,r.jsx)(g,{}),(0,r.jsxs)(n.p,{children:["You can ",(0,r.jsx)(n.strong,{children:"run specific product scans"})," by passing an argument, such as ",(0,r.jsx)(n.code,{children:"--supply-chain"}),". View the ",(0,r.jsx)(n.a,{href:"/getting-started/cli/#scan-using-specific-semgrep-products",children:"list of arguments"}),"."]}),(0,r.jsxs)(n.p,{children:["Prefer to use GitLab group variables? See ",(0,r.jsx)(n.a,{href:"/docs/kb/semgrep-code/gitlab-group-variables",children:"this guide"})," for an appropriate configuration."]})]}),(0,r.jsxs)(a.A,{value:"glcicd-oss",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs Semgrep CE scans using rules configured for your programming language."}),(0,r.jsx)(x,{}),(0,r.jsxs)(n.p,{children:["You can customize the scan by entering custom rules or other rulesets to scan with. See ",(0,r.jsx)(n.a,{href:"/getting-started/cli-oss/#scan-your-codebase-with-a-specific-ruleset",children:"Scan your codebase with a specific ruleset"}),"."]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"upload-findings-to-gitlab-security-dashboard",children:"Upload findings to GitLab Security Dashboard"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Alternate job that uploads findings to GitLab Security Dashboard"}),(0,r.jsx)(f,{})]}),"\n",(0,r.jsx)(n.h2,{id:"jenkins",children:"Jenkins"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Your UI (user interface) may vary depending on your Jenkins installation. These steps use a Classic UI Jenkins interface."})}),"\n",(0,r.jsx)(n.p,{children:"To add a Semgrep configuration snippet in your Jenkins pipeline:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create or edit your ",(0,r.jsx)(n.code,{children:"Jenkinsfile"})," configuration file in the repository you want to scan. You can also edit your ",(0,r.jsx)(n.code,{children:"Jenkinsfile"})," from Jenkins's interface."]}),"\n",(0,r.jsxs)(n.li,{children:["Copy the relevant code snippet provided in ",(0,r.jsx)(n.a,{href:"#sample-jenkins-configuration-snippet",children:"Sample Jenkins configuration snippet"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Paste the code to your ",(0,r.jsx)(n.code,{children:"Jenkinsfile"}),", and then commit the file."]}),"\n",(0,r.jsxs)(n.li,{children:["The Semgrep job starts automatically upon detecting the ",(0,r.jsx)(n.code,{children:"Jenkinsfile"})," update."]}),"\n",(0,r.jsxs)(n.li,{children:["Optional: Create a separate CI job for diff-aware scanning, which scans only changed files in PRs or MRs, by repeating steps 1-3 and uncommenting the ",(0,r.jsx)(n.code,{children:"SEMGREP_BASELINE_REF"})," definition provided within the code snippet."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"sample-jenkins-configuration-snippet",children:"Sample Jenkins configuration snippet"}),"\n",(0,r.jsxs)(o.A,{defaultValue:"jenkins-semgrep",values:[{label:"Default",value:"jenkins-semgrep"},{label:"Semgrep CE",value:"jenkins-oss"},{label:"Default (Docker)",value:"jenkins-semgrep-docker"},{label:"Default (Bitbucket Data Center)",value:"jenkins-bb"}],children:[(0,r.jsxs)(a.A,{value:"jenkins-semgrep",children:[(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["For SCA scans (Semgrep Supply Chain): users of Jenkins UI with the Git plugin must also set up their branch information. See ",(0,r.jsx)(n.a,{href:"/semgrep-supply-chain/setup-jenkins-ui",children:"Setting up Semgrep Supply Chain with Jenkins UI"})," for more information."]})}),(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs scans using the products and options you have enabled in Semgrep AppSec Platform."}),(0,r.jsx)(S,{}),(0,r.jsxs)(n.p,{children:["You can ",(0,r.jsx)(n.strong,{children:"run specific product scans"})," by passing an argument, such as ",(0,r.jsx)(n.code,{children:"--supply-chain"}),". View the ",(0,r.jsx)(n.a,{href:"/getting-started/cli/#scan-using-specific-semgrep-products",children:"list of arguments"}),"."]})]}),(0,r.jsxs)(a.A,{value:"jenkins-oss",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs Semgrep CE scans using rules configured for your programming language."}),(0,r.jsx)(E,{}),(0,r.jsxs)(n.p,{children:["You can customize the scan by entering custom rules or other rulesets to scan with. See ",(0,r.jsx)(n.a,{href:"/getting-started/cli-oss/#scan-your-codebase-with-a-specific-ruleset",children:"Scan your codebase with a specific ruleset"}),"."]})]}),(0,r.jsx)(a.A,{value:"jenkins-semgrep-docker",children:(0,r.jsx)(R,{})}),(0,r.jsx)(a.A,{value:"jenkins-bb",children:(0,r.jsx)(_,{})})]}),"\n",(0,r.jsx)(n.h2,{id:"bitbucket-pipelines",children:"Bitbucket Pipelines"}),"\n",(0,r.jsx)(n.p,{children:"To add a Semgrep configuration snippet into Bitbucket Pipelines:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create or edit your ",(0,r.jsx)(n.code,{children:"bitbucket-pipelines.yml"})," file in the repository you want to scan."]}),"\n",(0,r.jsxs)(n.li,{children:["Copy the relevant code snippet provided in ",(0,r.jsx)(n.a,{href:"#sample-bitbucket-pipelines-configuration-snippet",children:"Sample Bitbucket Pipelines configuration snippet"}),", and then paste it to your ",(0,r.jsx)(n.code,{children:"bitbucket-pipelines.yml"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Commit the updated ",(0,r.jsx)(n.code,{children:"bitbucket-pipelines.yml"})," configuration file."]}),"\n",(0,r.jsxs)(n.li,{children:["The Semgrep job starts automatically upon detecting the committed ",(0,r.jsx)(n.code,{children:"bitbucket-pipelines.yml"})," file. You can view the job through Bitbucket's interface, by clicking ",(0,r.jsxs)(n.strong,{children:[(0,r.jsx)("span",{className:"placeholder",children:"REPOSITORY_NAME"})," > Pipelines"]}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Optional: Create a daily scheduled run for the custom pipeline on the main branch by ",(0,r.jsx)(n.a,{href:"https://support.atlassian.com/bitbucket-cloud/docs/pipeline-triggers/#On-schedule",children:"scheduling a pipeline in Bitbucket"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["These steps can also be performed through Bitbucket's UI wizard. This UI wizard can be accessed through ",(0,r.jsxs)(n.strong,{children:["Bitbucket > ",(0,r.jsx)("span",{className:"placeholder",children:"REPOSITORY_NAME"})," > Pipelines > Create your first pipeline"]}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"sample-bitbucket-pipelines-configuration-snippet",children:"Sample Bitbucket Pipelines configuration snippet"}),"\n",(0,r.jsxs)(o.A,{defaultValue:"bitbucket-semgrep",values:[{label:"Default",value:"bitbucket-semgrep"},{label:"Semgrep CE",value:"bitbucket-oss"}],children:[(0,r.jsxs)(a.A,{value:"bitbucket-semgrep",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs scans using the products and options you have enabled in Semgrep AppSec Platform."}),(0,r.jsx)(C,{}),(0,r.jsxs)(n.p,{children:["You can ",(0,r.jsx)(n.strong,{children:"run specific product scans"})," by passing an argument, such as ",(0,r.jsx)(n.code,{children:"--supply-chain"}),". View the ",(0,r.jsx)(n.a,{href:"/getting-started/cli/#scan-using-specific-semgrep-products",children:"list of arguments"}),"."]})]}),(0,r.jsxs)(a.A,{value:"bitbucket-oss",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs Semgrep CE scans using rules configured for your programming language."}),(0,r.jsx)(A,{}),(0,r.jsxs)(n.p,{children:["You can customize the scan by entering custom rules or other rulesets to scan with. See ",(0,r.jsx)(n.a,{href:"/getting-started/cli-oss/#scan-your-codebase-with-a-specific-ruleset",children:"Scan your codebase with a specific ruleset"}),"."]})]})]}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["If the pipeline's default runner runs out of memory, you can limit the number of subprocesses Semgrep uses with the ",(0,r.jsxs)(n.a,{href:"/cli-reference",children:[(0,r.jsx)(n.code,{children:"-j"})," flag"]}),", or ",(0,r.jsxs)(n.a,{href:"https://support.atlassian.com/bitbucket-cloud/docs/global-options/#Size",children:["add the ",(0,r.jsx)(n.code,{children:"size"})," directive"]})," to the Semgrep step to increase the memory available:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'pipelines:\n  default:\n    - step:\n        size: 2x\n        script:\n          - echo "This step gets double the memory!"\n'})})]}),"\n",(0,r.jsx)(n.h2,{id:"buildkite",children:"Buildkite"}),"\n",(0,r.jsx)(n.p,{children:"To add Semgrep into your Buildkite pipeline:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Prepare a configuration file to add a Semgrep scan as part of your pipeline. This configuration file can be stored within Buildkite or as a ",(0,r.jsx)(n.code,{children:"pipeline.yml"})," file in the target repository."]}),"\n",(0,r.jsxs)(n.li,{children:["Copy the code snippet provided in ",(0,r.jsx)(n.a,{href:"#sample-buildkite-configuration-snippet",children:"Sample Buildkite configuration snippet"}),", making alterations if necessary for your environment."]}),"\n",(0,r.jsxs)(n.li,{children:["If you are using Buildkite to store the configuration, save the updated file. Otherwise, commit the updated ",(0,r.jsx)(n.code,{children:"pipeline.yml"})," file into the ",(0,r.jsx)(n.code,{children:"/.buildkite"})," folder within the target repository."]}),"\n",(0,r.jsxs)(n.li,{children:["The Semgrep job starts automatically upon detecting the committed ",(0,r.jsx)(n.code,{children:"pipeline.yml"})," file. Alternatively, if you are using the Buildkite UI, you can select ",(0,r.jsx)(n.strong,{children:"New build"}),". You can view the job through Buildkite's interface by clicking ",(0,r.jsx)(n.strong,{children:"Pipelines > pipeline name"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["These steps can be performed within Buildkite's UI. To do so, navigate to Buildkite's main page, and click ",(0,r.jsx)(n.strong,{children:"Pipelines > New Pipeline"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"sample-buildkite-configuration-snippet",children:"Sample Buildkite configuration snippet"}),"\n",(0,r.jsxs)(o.A,{defaultValue:"buildkite-semgrep",values:[{label:"Default",value:"buildkite-semgrep"},{label:"Semgrep CE",value:"buildkite-oss"}],children:[(0,r.jsxs)(a.A,{value:"buildkite-semgrep",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs scans according to the products you have enabled in Semgrep AppSec Platform. The provided environment variables are commonly needed to correctly configure scans from Buildkite."}),(0,r.jsx)(n.p,{children:"This file configures two mutually exclusive command steps, one for full scans, and one for diff-aware scans. The latter is used for pull requests or merge requests."}),(0,r.jsxs)(n.p,{children:["In order for this configuration to run the correct type of scan for each condition, it requires both ",(0,r.jsx)(n.a,{href:"https://buildkite.com/docs/pipelines/branch-configuration",children:"branch filtering"})," and configuration to build on pull requests."]}),(0,r.jsx)(n.h4,{id:"branch-filtering",children:"Branch filtering"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["In the Buildkite UI, go to the pipeline ",(0,r.jsx)(n.strong,{children:"Settings"})," and select the connected source code manager in the left sidebar.\n",(0,r.jsx)(n.img,{alt:"Pipeline settings with example GitHub SCM",src:i(65051).A+"#md-width",width:"603",height:"603"}),"\n",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Figure."})})," Buildkite pipeline settings with using GitHub as the SCM."]}),"\n",(0,r.jsxs)(n.li,{children:["Under ",(0,r.jsx)(n.strong,{children:"Branch Limiting"}),", enter your default branch name in the ",(0,r.jsx)(n.strong,{children:"Branch Filter Pattern"})," box. You can include any other branch names that require full scans as well, such as ",(0,r.jsx)(n.code,{children:"release-*"}),".\n",(0,r.jsx)(n.img,{alt:"Branch limiting settings with example main branch",src:i(54313).A+"#md-width",width:"1750",height:"658"}),"\n",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Figure."})})," Branch limiting settings with main as the example branch."]}),"\n",(0,r.jsxs)(n.li,{children:["Click ",(0,r.jsx)(n.strong,{children:"Save Branch Limiting"}),"."]}),"\n"]}),(0,r.jsx)(n.h4,{id:"build-on-pull-requests",children:"Build on pull requests"}),(0,r.jsxs)(n.p,{children:["To run diff-aware scans, your pipeline must run builds on pull requests or merge requests. Buildkite integrates with several source code managers and each one has different options to handle PRs or MRs. The most common options are a checkbox within the pipeline settings, or webhooks within the source control manager. Review the ",(0,r.jsx)(n.a,{href:"https://buildkite.com/docs/integrations/source-control",children:"documentation for your source control"})," system to ensure your Semgrep pipeline builds on pull requests or merge requests."]}),(0,r.jsx)(T,{}),(0,r.jsxs)(n.p,{children:["You can ",(0,r.jsx)(n.a,{href:"/getting-started/cli#scan-using-specific-semgrep-products",children:"run specific product scans by passing the appropriate argument"}),", such as ",(0,r.jsx)(n.code,{children:"--supply-chain"}),"."]})]}),(0,r.jsxs)(a.A,{value:"buildkite-oss",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs Semgrep CE scans using rules configured for your programming language."}),(0,r.jsx)(M,{}),(0,r.jsxs)(n.p,{children:["You can customize the scan by entering custom rules or other rulesets to scan with. See ",(0,r.jsx)(n.a,{href:"/getting-started/cli-oss/#scan-your-codebase-with-a-specific-ruleset",children:"Scan your codebase with a specific ruleset"}),"."]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"circleci",children:"CircleCI"}),"\n",(0,r.jsx)(n.p,{children:"To add Semgrep into your CircleCI pipeline:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a ",(0,r.jsx)(n.a,{href:"https://circleci.com/docs/contexts/",children:"context"}),":","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["In CircleCI web app, click ",(0,r.jsx)(n.strong,{children:"Organization Settings"})," > ",(0,r.jsx)(n.strong,{children:"Contexts"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Click ",(0,r.jsx)(n.strong,{children:"Create Context"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Enter ",(0,r.jsx)(n.code,{children:"semgrep"})," as the name for the context."]}),"\n",(0,r.jsxs)(n.li,{children:["Click ",(0,r.jsx)(n.strong,{children:"Add Environment Variable"})," and enter your ",(0,r.jsx)(n.code,{children:"SEMGREP_APP_TOKEN"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Create or edit your ",(0,r.jsx)(n.code,{children:"config.yml"})," configuration file in the repository you want to scan."]}),"\n",(0,r.jsxs)(n.li,{children:["Copy the relevant code snippet provided in ",(0,r.jsx)(n.a,{href:"#sample-circleci-configuration-snippet",children:"Sample CircleCI configuration snippet"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If your default branch is not ",(0,r.jsx)(n.code,{children:"main"}),", change the occurrences of ",(0,r.jsx)(n.code,{children:"main"})," to the name of your default branch."]}),"\n",(0,r.jsxs)(n.li,{children:["Commit the updated ",(0,r.jsx)(n.code,{children:"config.yml"})," configuration file into the ",(0,r.jsx)(n.code,{children:"/.circleci"})," folder in the target repository."]}),"\n",(0,r.jsxs)(n.li,{children:["The Semgrep job starts automatically upon detecting the ",(0,r.jsx)(n.code,{children:"config.yml"})," update."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The sample configuration provides jobs for both full scanning and ",(0,r.jsx)(n.a,{href:"/deployment/customize-ci-jobs#set-up-diff-aware-scans",children:"diff-aware scanning"}),", which scans only changed files in PRs or MRs. You do not need to create any other jobs."]}),"\n",(0,r.jsxs)(n.p,{children:['CircleCI runs the Semgrep job on all the commits for the project by default. If you want the job to scan only branches that have an associated a pull request open, you can enable the option "Only build pull requests" in ',(0,r.jsx)(n.strong,{children:"Project Settings"})," > ",(0,r.jsx)(n.strong,{children:"Advanced"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"For the default branch and tags, CircleCI always runs the Semgrep CI job on all commits."})}),"\n",(0,r.jsx)(n.h3,{id:"sample-circleci-configuration-snippet",children:"Sample CircleCI configuration snippet"}),"\n",(0,r.jsxs)(o.A,{defaultValue:"circleci-semgrep",values:[{label:"Default",value:"circleci-semgrep"},{label:"Semgrep CE",value:"circleci-oss"}],children:[(0,r.jsxs)(a.A,{value:"circleci-semgrep",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs scans using the products and options you have enabled in Semgrep AppSec Platform."}),(0,r.jsx)(B,{}),(0,r.jsxs)(n.p,{children:["You can ",(0,r.jsx)(n.strong,{children:"run specific product scans"})," by passing an argument, such as ",(0,r.jsx)(n.code,{children:"--supply-chain"}),". View the ",(0,r.jsx)(n.a,{href:"/getting-started/cli/#scan-using-specific-semgrep-products",children:"list of arguments"}),"."]})]}),(0,r.jsxs)(a.A,{value:"circleci-oss",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs Semgrep CE scans using rules configured for your programming language."}),(0,r.jsx)(O,{}),(0,r.jsxs)(n.p,{children:["You can customize the scan by entering custom rules or other rulesets to scan with. See ",(0,r.jsx)(n.a,{href:"/getting-started/cli-oss/#scan-your-codebase-with-a-specific-ruleset",children:"Scan your codebase with a specific ruleset"}),"."]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"azure-pipelines",children:"Azure Pipelines"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Scanning a project with the ",(0,r.jsx)(n.code,{children:"semgrep ci"})," command requires the project to be version-controlled by Git. If you have Azure Repos that are version-controlled with ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/devops/repos/tfvc/what-is-tfvc?view=azure-devops",children:"Team Foundations Version Control"}),", they must be migrated to Git to be scanned with ",(0,r.jsx)(n.code,{children:"semgrep ci"})," and have results reported to the Semgrep AppSec Platform."]})}),"\n",(0,r.jsx)(n.p,{children:"To add Semgrep into Azure Pipelines:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Access the YAML pipeline editor within Azure Pipelines by following the ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/devops/pipelines/get-started/yaml-pipeline-editor?view=azure-devops#edit-a-yaml-pipeline",children:"YAML pipeline editor"})," guide."]}),"\n",(0,r.jsxs)(n.li,{children:["Copy the code snippet provided in ",(0,r.jsx)(n.a,{href:"#sample-azure-pipelines-configuration-snippet",children:"Sample Azure Pipelines configuration snippet"})," into the Azure Pipelines YAML editor."]}),"\n",(0,r.jsx)(n.li,{children:"Save the code snippet."}),"\n",(0,r.jsx)(n.li,{children:"Follow any additional instructions provided with the snippet."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"sample-azure-pipelines-configuration-snippet",children:"Sample Azure Pipelines configuration snippet"}),"\n",(0,r.jsxs)(n.p,{children:["This configuration snippet is tested with ",(0,r.jsx)(n.strong,{children:"hosted"})," Azure runners. If you are using self-hosted runners, you may need to make adjustments to ensure that the necessary software is available. Consult ",(0,r.jsx)(n.a,{href:"/docs/kb/semgrep-ci/azure-self-hosted-ubuntu",children:"Semgrep with self-hosted Ubuntu runners in Azure Pipelines"})," for two recommended options."]}),"\n",(0,r.jsxs)(o.A,{defaultValue:"azure-semgrep",values:[{label:"Default",value:"azure-semgrep"},{label:"Semgrep CE",value:"azure-oss"}],children:[(0,r.jsxs)(a.A,{value:"azure-semgrep",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs scans using the products and options you have enabled in Semgrep AppSec Platform."}),(0,r.jsx)(U,{}),(0,r.jsxs)(n.p,{children:["You can ",(0,r.jsx)(n.strong,{children:"run specific product scans"})," by passing an argument, such as ",(0,r.jsx)(n.code,{children:"--supply-chain"}),". View the ",(0,r.jsx)(n.a,{href:"/getting-started/cli/#scan-using-specific-semgrep-products",children:"list of arguments"}),"."]}),(0,r.jsx)(z.Ay,{})]}),(0,r.jsxs)(a.A,{value:"azure-oss",children:[(0,r.jsx)(n.p,{children:"The following configuration creates a CI job that runs Semgrep CE scans using rules configured for your programming language."}),(0,r.jsx)(H,{}),(0,r.jsxs)(n.p,{children:["You can customize the scan by entering custom rules or other rulesets to scan with. See ",(0,r.jsx)(n.a,{href:"/getting-started/cli-oss/#scan-your-codebase-with-a-specific-ruleset",children:"Scan your codebase with a specific ruleset"}),"."]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"other-providers",children:"Other providers"}),"\n",(0,r.jsxs)(n.p,{children:["To run Semgrep CI on any other provider, use the ",(0,r.jsx)(n.code,{children:"semgrep/semgrep"})," image, and run the ",(0,r.jsx)(n.code,{children:"semgrep ci"})," command with ",(0,r.jsx)(n.code,{children:"SEMGREP_BASELINE_REF"})," set for diff-aware scanning."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": If you need to use a different Docker image or are not running in Docker, install Semgrep CI by ",(0,r.jsx)(n.code,{children:"pip install semgrep"}),". If you see an error during the installation process due to your Python environment being externally managed by a package manager, see ",(0,r.jsx)(n.a,{href:"/kb/semgrep-appsec-platform/error-externally-managed-environment",children:"Semgrep's article for instructions on how to proceed"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["By setting various ",(0,r.jsx)(n.a,{href:"/semgrep-ci/ci-environment-variables",children:"CI environment variables"}),", you can run Semgrep in the following CI providers:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"AppVeyor"}),"\n",(0,r.jsx)(n.li,{children:"Bamboo"}),"\n",(0,r.jsx)(n.li,{children:"Bitrise"}),"\n",(0,r.jsx)(n.li,{children:"Buildbot"}),"\n",(0,r.jsx)(n.li,{children:"Codeship"}),"\n",(0,r.jsx)(n.li,{children:"Codefresh"}),"\n",(0,r.jsx)(n.li,{children:"Drone CI"}),"\n",(0,r.jsx)(n.li,{children:"TeamCity CI"}),"\n",(0,r.jsx)(n.li,{children:"Travis CI"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Is your CI provider missing? Let the Semgrep team know by ",(0,r.jsxs)(n.a,{href:"https://github.com/semgrep/semgrep-docs/issues/",children:[(0,r.jsx)("i",{class:"fas fa-external-link fa-xs"})," filing an issue"]}),", or ",(0,r.jsxs)(n.a,{href:"https://github.com/semgrep/semgrep-docs/pulls/",children:[(0,r.jsx)("i",{class:"fas fa-external-link fa-xs"})," submit a contribution"]}),"."]})]})}function W(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Q,{...e})}):Q(e)}},73724:(e,n,i)=>{i.d(n,{Ay:()=>a,RM:()=>t});var s=i(74848),r=i(28453);const t=[];function o(e){const n={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Name of this GitHub Actions workflow.\nname: Semgrep\n\non:\n  # Scan changed files in PRs (diff-aware scanning):\n  pull_request: {}\n  # Scan on-demand through GitHub Actions interface:\n  workflow_dispatch: {}\n  # Scan mainline branches if there are changes to .github/workflows/semgrep.yml:\n  push:\n    branches:\n      - main\n      - master\n    paths:\n      - .github/workflows/semgrep.yml\n  # Schedule the CI job (this method uses cron syntax):\n  schedule:\n    - cron: '20 17 * * *' # Sets Semgrep to scan every day at 17:20 UTC.\n    # It is recommended to change the schedule to a random time.\n\npermissions:\n  contents: read\n\njobs:\n  semgrep:\n    # User definable name of this GitHub Actions job.\n    name: semgrep/ci\n    # If you are self-hosting, change the following `runs-on` value:\n    runs-on: ubuntu-latest\n\n    container:\n      # A Docker image with Semgrep installed. Do not change this.\n      image: semgrep/semgrep\n\n    # Skip any PR created by dependabot to avoid permission issues:\n    if: (github.actor != 'dependabot[bot]')\n\n    steps:\n      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.\n      - uses: actions/checkout@v4\n      # Run the \"semgrep ci\" command on the command line of the docker image.\n      - run: semgrep ci\n        env:\n          # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.\n          # Generate a token from Semgrep AppSec Platform > Settings\n          # and add it to your GitHub secrets.\n          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}\n"})})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},93138:(e,n,i)=>{i.d(n,{Ay:()=>a,RM:()=>t});var s=i(74848),r=i(28453);const t=[{value:"Set environment variables in Azure Pipelines",id:"set-environment-variables-in-azure-pipelines",level:3}];function o(e){const n={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"set-environment-variables-in-azure-pipelines",children:"Set environment variables in Azure Pipelines"}),"\n",(0,s.jsxs)(n.p,{children:["Semgrep minimally requires the variable ",(0,s.jsx)(n.code,{children:"SEMGREP_APP_TOKEN"})," in order to report results to the platform, and other variables may be helpful as well. To set these variables in Azure Pipelines:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Set up a ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&tabs=classic",children:"variable group"})," called ",(0,s.jsx)(n.code,{children:"Semgrep_Variables"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Set ",(0,s.jsx)(n.code,{children:"SEMGREP_APP_TOKEN"})," in the variable group, following the steps for ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/devops/pipelines/process/set-secret-variables?view=azure-devops&tabs=yaml%2Cbash#set-a-secret-variable-in-a-variable-group",children:"secret variables"}),". The variable is mapped into the ",(0,s.jsx)(n.code,{children:"env"})," in the provided config."]}),"\n",(0,s.jsxs)(n.li,{children:["Optional: Add the following environment variables to the group if you aren't seeing hyperlinks to the code that generated a finding, or if you are not receiving PR or MR comments. Review the use of these variables at ",(0,s.jsx)(n.a,{href:"https://semgrep.dev/docs/semgrep-ci/ci-environment-variables#environment-variables-for-creating-hyperlinks-in-semgrep-appsec-platform",children:"Environment variables for creating hyperlinks in Semgrep AppSec Platform"}),".These variables are not sensitive and do not need to be secret variables.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"SEMGREP_REPO_NAME"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"SEMGREP_REPO_URL"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"SEMGREP_BRANCH"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"SEMGREP_COMMIT"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"SEMGREP_JOB_URL"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Set variables for diff-aware scanning. The provided config sets ",(0,s.jsx)(n.code,{children:"SEMGREP_PR_ID"})," to the system variable ",(0,s.jsx)(n.code,{children:"System.PullRequest.PullRequestId"})," and ",(0,s.jsx)(n.code,{children:"SEMGREP_BASELINE_REF"})," to ",(0,s.jsx)(n.code,{children:"origin/master"})," within the ",(0,s.jsx)(n.code,{children:"script"})," section of the config. The value of ",(0,s.jsx)(n.code,{children:"SEMGREP_BASELINE_REF"})," is typically your trunk or default branch, so if you use a different branch than master, update the name accordingly. as ",(0,s.jsx)(n.code,{children:"main"})," or ",(0,s.jsx)(n.code,{children:"master"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If you prefer not to implement diff-aware scanning, you can skip setting these variables and remove the ",(0,s.jsx)(n.code,{children:"elif"})," section of the ",(0,s.jsx)(n.code,{children:"script"})," step."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["For diff-aware scans: add a ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops&tabs=browser#build-validation",children:"build validation policy"}),". Adding and enabling a branch policy for build validation is required to trigger Azure Pipelines on pull requests."]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);