"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[90351],{16473:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"kb/semgrep-supply-chain/ssc-lockfiles-circleci","title":"Generate lockfiles for Semgrep Supply Chain in a Circle CI pipeline","description":"How to generate lockfiles for Semgrep Supply Chain in a Circle CI pipeline.","source":"@site/docs/kb/semgrep-supply-chain/ssc-lockfiles-circleci.md","sourceDirName":"kb/semgrep-supply-chain","slug":"/kb/semgrep-supply-chain/ssc-lockfiles-circleci","permalink":"/semgrep-docs/kb/semgrep-supply-chain/ssc-lockfiles-circleci","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/kb/semgrep-supply-chain/ssc-lockfiles-circleci.md","tags":[{"inline":true,"label":"Semgrep Supply Chain","permalink":"/semgrep-docs/tags/semgrep-supply-chain"},{"inline":true,"label":"CircleCI","permalink":"/semgrep-docs/tags/circle-ci"},{"inline":true,"label":"Lockfiles","permalink":"/semgrep-docs/tags/lockfiles"},{"inline":true,"label":"Manifest files","permalink":"/semgrep-docs/tags/manifest-files"},{"inline":true,"label":"Workspaces","permalink":"/semgrep-docs/tags/workspaces"}],"version":"current","lastUpdatedAt":1752260268000,"frontMatter":{"title":"Generate lockfiles for Semgrep Supply Chain in a Circle CI pipeline","description":"How to generate lockfiles for Semgrep Supply Chain in a Circle CI pipeline.","tags":["Semgrep Supply Chain","CircleCI","Lockfiles","Manifest files","Workspaces"]},"sidebar":"kbSidebar","previous":{"title":"How to scan multiple or nested manifest files or lockfiles","permalink":"/semgrep-docs/kb/semgrep-supply-chain/scanning_multiple_lockfiles"},"next":{"title":"Generating Python lockfiles for Semgrep Supply Chain scans","permalink":"/semgrep-docs/kb/semgrep-supply-chain/ssc-python-lockfiles"}}');var r=s(74848),c=s(28453);const t={title:"Generate lockfiles for Semgrep Supply Chain in a Circle CI pipeline",description:"How to generate lockfiles for Semgrep Supply Chain in a Circle CI pipeline.",tags:["Semgrep Supply Chain","CircleCI","Lockfiles","Manifest files","Workspaces"]},l="Generate manifest files or lockfiles for Semgrep Supply Chain in a Circle CI pipeline",o={},a=[];function p(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"generate-manifest-files-or-lockfiles-for-semgrep-supply-chain-in-a-circle-ci-pipeline",children:"Generate manifest files or lockfiles for Semgrep Supply Chain in a Circle CI pipeline"})}),"\n",(0,r.jsxs)(n.p,{children:["In CircleCI, you can generate a manifest file or lockfile for your project as part of your pipeline job. This step happens during the first job, then the manifest file or lockfile is passed to the Semgrep scan using a ",(0,r.jsx)(n.a,{href:"https://circleci.com/docs/workspaces/",children:"workspace"})," to share files between jobs."]}),"\n",(0,r.jsxs)(n.p,{children:["The following ",(0,r.jsx)(n.code,{children:"config.yml"})," file demonstrates how you can generate a manifest file or lockfile and pass it to subsequent jobs using CircleCI workspaces. This example, which is most relevant to users scanning a Scala or Bazel project, uses a ",(0,r.jsx)(n.code,{children:"maven_dep_tree.txt"})," file, which ",(0,r.jsx)(n.a,{href:"/docs/semgrep-supply-chain/setup-maven",children:"typically needs to be generated"})," from a ",(0,r.jsx)(n.code,{children:"pom.xml"})," for Maven dependency tracking."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"version: 2.1\n\njobs:\n  lock_file_generation:\n    docker:\n      - image: cimg/openjdk:17.0\n    steps:\n      - checkout\n      - run:\n          name: lock file generation\n          command: |\n            mkdir -p workspace\n            mvn dependency:tree -DoutputFile=workspace/maven_dep_tree.txt\n            cat workspace/maven_dep_tree.txt\n      - persist_to_workspace:\n          root: workspace\n          paths:\n            - maven_dep_tree.txt\n\n  scan:\n    docker:\n      - image: semgrep/semgrep\n    steps:\n      - checkout\n      - attach_workspace: # This step attaches the workspace from the previous job\n          at: /tmp/workspace\n      - run:\n         name: semgrep scan\n         command: |\n           cp /tmp/workspace/maven_dep_tree.txt .\n           semgrep ci\n\nworkflows:\n  version: 2\n  build_and_scan:\n    jobs:\n      - lock_file_generation\n      - scan:\n          context:\n            - semgrep\n          requires:\n            - build\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"semgrep"})," ",(0,r.jsx)(n.a,{href:"https://circleci.com/docs/contexts/",children:"context"})," is used here as the name for the context where you define the environment variables Semgrep needs, such as the ",(0,r.jsx)(n.code,{children:"SEMGREP_APP_TOKEN"}),". This is similar to the ",(0,r.jsx)(n.a,{href:"/semgrep-ci/sample-ci-configs/#sample-circleci-configuration-snippet",children:"sample configuration for CircleCI"}),". You can choose to give the context a different name if you prefer."]})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(96540);const r={},c=i.createContext(r);function t(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);