"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[1552],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>d});var s=i(96540);const r={},o=s.createContext(r);function l(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(o.Provider,{value:n},e.children)}},74834:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"semgrep-supply-chain/ignoring-deps","title":"Ignore manifest files, lockfiles, and dependencies","description":"Prevent unwanted noise when scanning for dependency vulnerabilities by ignoring manifest files, lockfiles, or code files.","source":"@site/docs/semgrep-supply-chain/ignoring-deps.md","sourceDirName":"semgrep-supply-chain","slug":"/semgrep-supply-chain/ignoring-dependencies","permalink":"/docs/semgrep-supply-chain/ignoring-dependencies","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main?base=kyle-semgrep:main/docs/semgrep-supply-chain/ignoring-deps.md","tags":[{"inline":true,"label":"Semgrep Supply Chain","permalink":"/docs/tags/semgrep-supply-chain"}],"version":"current","lastUpdatedAt":1752253235000,"frontMatter":{"slug":"ignoring-dependencies","append_help_link":true,"description":"Prevent unwanted noise when scanning for dependency vulnerabilities by ignoring manifest files, lockfiles, or code files.","tags":["Semgrep Supply Chain"],"title":"Ignore manifest files, lockfiles, and dependencies","hide_title":true},"sidebar":"scanSidebar","previous":{"title":"Semgrep Code","permalink":"/docs/ignoring-files-folders-code"},"next":{"title":"Perform cross-file analysis","permalink":"/docs/semgrep-code/semgrep-pro-engine-intro"}}');var r=i(74848),o=i(28453);const l={slug:"ignoring-dependencies",append_help_link:!0,description:"Prevent unwanted noise when scanning for dependency vulnerabilities by ignoring manifest files, lockfiles, or code files.",tags:["Semgrep Supply Chain"],title:"Ignore manifest files, lockfiles, and dependencies",hide_title:!0},d="Ignore manifest files, lockfiles, and dependencies",t={},c=[{value:"Sample <code>.semgrepignore</code> configuration",id:"sample-semgrepignore-configuration",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ignore-manifest-files-lockfiles-and-dependencies",children:"Ignore manifest files, lockfiles, and dependencies"})}),"\n",(0,r.jsxs)(n.p,{children:["You can restrict code files or manifest files or lockfiles from generating Supply Chain findings. To do so, you must ",(0,r.jsxs)(n.a,{href:"/ignoring-files-folders-code/#define-ignored-files-and-folders-in-semgrep-appsec-platform",children:["create a ",(0,r.jsx)(n.code,{children:".semgrepignore"})," file in your repository's root directory"]})," and define code files and lock files to ignore. The file paths you provide in your ",(0,r.jsx)(n.code,{children:".semgrepignore"})," file depend on the option that best suits your organization's needs:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Goal"}),(0,r.jsx)(n.th,{children:"Method"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Prevent a code file from generating ",(0,r.jsx)(n.strong,{children:"any reachable findings"}),"."]}),(0,r.jsxs)(n.td,{children:["Include the code file's path in the repository's ",(0,r.jsx)(n.code,{children:".semgrepignore"})," file."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Prevent any findings from being generated using the dependencies in a manifest file or lockfile"}),(0,r.jsxs)(n.td,{children:["Include the file paths of the manifest file or lockfile in the repository's ",(0,r.jsx)(n.code,{children:".semgrepignore"})," file."]})]})]})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Unreachable findings are only generated from manifest files or lockfiles, because Semgrep defines unreachable findings as the absence of a match in the code."}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"sample-semgrepignore-configuration",children:["Sample ",(0,r.jsx)(n.code,{children:".semgrepignore"})," configuration"]}),"\n",(0,r.jsx)(n.p,{children:"Given a repository with the following files:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A file ",(0,r.jsx)(n.code,{children:"codefile_with_vuln.js"})," that generates reachable and unreachable findings due to a vulnerable dependency."]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.code,{children:"package-lock.json"})," file that lists the vulnerable dependency."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If you add ",(0,r.jsx)(n.code,{children:"codefile_with_vuln.js"})," to the ",(0,r.jsx)(n.code,{children:".semgrepignore"})," file, Semgrep ignores any reachable findings generated when scanning ",(0,r.jsx)(n.code,{children:"codefile_with_vuln.js"}),", but can still generate findings from ",(0,r.jsx)(n.code,{children:"package-lock.json"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# .semgrepignore\ncodefile_with_vuln.js\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you add ",(0,r.jsx)(n.code,{children:"package-lock.json"})," to the ",(0,r.jsx)(n.code,{children:".semgrepignore"})," file, Semgrep will not scan dependencies from this lockfile, so no Supply Chain findings will be generated in either ",(0,r.jsx)(n.code,{children:"codefile_with_vuln.js"})," or ",(0,r.jsx)(n.code,{children:"package-lock.json"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# .semgrepignore\npackage-lock.json\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);