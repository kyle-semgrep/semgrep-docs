"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[44284],{6478:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"kb/semgrep-supply-chain/ssc-python-lockfiles","title":"Generating Python lockfiles for Semgrep Supply Chain scans","description":"Generate Python lockfiles to run Semgrep Supply Chain scans successfully.","source":"@site/docs/kb/semgrep-supply-chain/ssc-python-lockfiles.md","sourceDirName":"kb/semgrep-supply-chain","slug":"/kb/semgrep-supply-chain/ssc-python-lockfiles","permalink":"/docs/kb/semgrep-supply-chain/ssc-python-lockfiles","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/kb/semgrep-supply-chain/ssc-python-lockfiles.md","tags":[{"inline":true,"label":"Semgrep Supply Chain","permalink":"/docs/tags/semgrep-supply-chain"},{"inline":true,"label":"Python","permalink":"/docs/tags/python"},{"inline":true,"label":"Lockfiles","permalink":"/docs/tags/lockfiles"},{"inline":true,"label":"Manifest files","permalink":"/docs/tags/manifest-files"},{"inline":true,"label":"requirements.txt","permalink":"/docs/tags/requirements-txt"},{"inline":true,"label":"Pipfile.lock","permalink":"/docs/tags/pipfile-lock"},{"inline":true,"label":"Poetry.lock","permalink":"/docs/tags/poetry-lock"}],"version":"current","lastUpdatedAt":1752252315000,"frontMatter":{"description":"Generate Python lockfiles to run Semgrep Supply Chain scans successfully.","tags":["Semgrep Supply Chain","Python","Lockfiles","Manifest files","requirements.txt","Pipfile.lock","Poetry.lock"]},"sidebar":"kbSidebar","previous":{"title":"Generate lockfiles for Semgrep Supply Chain in a Circle CI pipeline","permalink":"/docs/kb/semgrep-supply-chain/ssc-lockfiles-circleci"},"next":{"title":"Why aren\'t Supply Chain findings showing?","permalink":"/docs/kb/semgrep-supply-chain/why-no-findings"}}');var t=i(74848),r=i(28453);const l={description:"Generate Python lockfiles to run Semgrep Supply Chain scans successfully.",tags:["Semgrep Supply Chain","Python","Lockfiles","Manifest files","requirements.txt","Pipfile.lock","Poetry.lock"]},o="Generating Python lockfiles for Semgrep Supply Chain scans",a={},c=[{value:"Generating <code>requirements.txt</code>",id:"generating-requirementstxt",level:2},{value:"Using <code>requirements.in</code>",id:"using-requirementsin",level:3},{value:"Example of <code>requirements.txt</code> generated from <code>requirements.in</code>",id:"example-of-requirementstxt-generated-from-requirementsin",level:4},{value:"Using <code>pip freeze</code>",id:"using-pip-freeze",level:3},{value:"Example CI configuration",id:"example-ci-configuration",level:3},{value:"Generating <code>Pipfile.lock</code>",id:"generating-pipfilelock",level:2},{value:"Example of <code>Pipfile</code>",id:"example-of-pipfile",level:3},{value:"Generating a <code>Pipfile.lock</code>",id:"generating-a-pipfilelock",level:3},{value:"Generating <code>Poetry.lock</code>",id:"generating-poetrylock",level:2},{value:"Example <code>pyproject.toml</code>",id:"example-pyprojecttoml",level:3},{value:"Generating a <code>Poetry.lock</code>",id:"generating-a-poetrylock",level:3},{value:"Selecting a single file among many",id:"selecting-a-single-file-among-many",level:2},{value:"Conclusions",id:"conclusions",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"generating-python-lockfiles-for-semgrep-supply-chain-scans",children:"Generating Python lockfiles for Semgrep Supply Chain scans"})}),"\n",(0,t.jsx)(n.p,{children:"To correctly scan all dependencies in a project, Semgrep Supply Chain requires a Python lockfile: a file with specific versions of all dependencies. This article describes methods to generate the following supported Python lockfiles:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"requirements.txt"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Pipfile.lock"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Poetry.lock"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You can use any of these files to get a successful Semgrep Supply Chain scan. Since Semgrep 1.93.0, a ",(0,t.jsx)(n.code,{children:"requirements.txt"})," file can be placed in a ",(0,t.jsx)(n.code,{children:"**/requirements/"})," folder, or can have any name that matches ",(0,t.jsx)(n.code,{children:"*requirement*.txt"})," or ",(0,t.jsx)(n.code,{children:"*requirement*.pip"}),"."]}),"\n",(0,t.jsxs)(n.h2,{id:"generating-requirementstxt",children:["Generating ",(0,t.jsx)(n.code,{children:"requirements.txt"})]}),"\n",(0,t.jsxs)(n.h3,{id:"using-requirementsin",children:["Using ",(0,t.jsx)(n.code,{children:"requirements.in"})]}),"\n",(0,t.jsx)(n.admonition,{title:"Prerequisites",type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A ",(0,t.jsx)(n.code,{children:"requirements.in"})," file with direct Python packages. Do not include transitive packages in ",(0,t.jsx)(n.code,{children:"requirements.in"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pip-tools"})," must be installed on your machine. See the ",(0,t.jsx)(n.a,{href:"https://github.com/jazzband/pip-tools",children:"pip-tools GitHub repository"})," for installation instructions."]}),"\n"]})}),"\n",(0,t.jsxs)(n.p,{children:["To generate a ",(0,t.jsx)(n.code,{children:"requirements.txt"})," file from ",(0,t.jsx)(n.code,{children:"requirements.in"}),", enter the following command in the root of your project directory:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip-compile -o requirements.txt\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now, you have successfully generated a ",(0,t.jsx)(n.code,{children:"requirements.txt"})," file with direct and transitive dependencies that Semgrep Supply Chain can scan."]}),"\n",(0,t.jsxs)(n.h4,{id:"example-of-requirementstxt-generated-from-requirementsin",children:["Example of ",(0,t.jsx)(n.code,{children:"requirements.txt"})," generated from ",(0,t.jsx)(n.code,{children:"requirements.in"})]}),"\n",(0,t.jsxs)(n.p,{children:["Given the following example project ",(0,t.jsx)(n.a,{href:"https://github.com/sebastianrevuelta/binder-examples/",children:"Binder examples"}),", the ",(0,t.jsx)(n.code,{children:"requirements.in"})," file contains the following direct dependencies:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"numpy\nmatplotlib==3.*\nseaborn==0.10.1\npandas\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Executing the command ",(0,t.jsx)(n.code,{children:"pip-compile -o requirements.txt"}),", generates the following ",(0,t.jsx)(n.code,{children:"requirements.txt"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"#\n# This file is autogenerated by pip-compile with Python 3.10\n# by the following command:\n#\n#    pip-compile --output-file=requirements.txt\n#\ncontourpy==1.0.7\n    # via matplotlib\ncycler==0.11.0\n    # via matplotlib\nfonttools==4.39.4\n    # via matplotlib\nkiwisolver==1.4.4\n    # via matplotlib\nmatplotlib==3.7.1\n    # via\n    #   -r requirements.in\n    #   seaborn\nnumpy==1.24.3\n    # via\n    #   -r requirements.in\n    #   contourpy\n    #   matplotlib\n    #   pandas\n    #   scipy\n    #   seaborn\npackaging==23.1\n    # via matplotlib\npandas==2.0.2\n    # via\n    #   -r requirements.in\n    #   seaborn\npillow==9.5.0\n    # via matplotlib\npyparsing==3.0.9\n    # via matplotlib\npython-dateutil==2.8.2\n    # via\n    #   matplotlib\n    #   pandas\npytz==2023.3\n    # via pandas\nscipy==1.10.1\n    # via seaborn\nseaborn==0.10.1\n    # via -r requirements.in\nsix==1.16.0\n    # via python-dateutil\ntzdata==2023.3\n    # via pandas\n"})}),"\n",(0,t.jsx)(n.p,{children:"This file has all direct and transitive dependencies of the example project and can be used by Semgrep as an entry point for the Supply Chain scan."}),"\n",(0,t.jsxs)(n.h3,{id:"using-pip-freeze",children:["Using ",(0,t.jsx)(n.code,{children:"pip freeze"})]}),"\n",(0,t.jsx)(n.admonition,{title:"Prerequisites",type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"pip freeze"})," utility uses dependencies from packages already installed in your current environment to generate ",(0,t.jsx)(n.code,{children:"requirements.txt"}),". You must be in an isolated or ",(0,t.jsx)(n.a,{href:"https://docs.python.org/3/library/venv.html",children:"virtual environment"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["An existing ",(0,t.jsx)(n.code,{children:"setup.py"})," file."]}),"\n"]})}),"\n",(0,t.jsxs)(n.p,{children:["To generate ",(0,t.jsx)(n.code,{children:"requirements.txt"})," through ",(0,t.jsx)(n.code,{children:"pip freeze"}),", enter the following commands:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip3 install .\npip freeze --all > tee requirements.txt\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-ci-configuration",children:"Example CI configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The following GitHub Actions workflow provides an example on how to generate ",(0,t.jsx)(n.code,{children:"requirements.txt"})," in a CI environment based on the preceding methods."]}),"\n",(0,t.jsx)(n.p,{children:"In the following example there are two jobs:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"my_first_job"}),": Generating ",(0,t.jsx)(n.code,{children:"requirements.txt"})," and uploading it as an artifact"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"my_second_job"}),": Downloading the artifact and scanning it with Semgrep"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"on:\n  pull_request: {}\n  workflow_dispatch: {}\n  push:\n    branches:\n    - master\n    paths:\n    - .github/workflows/semgrep.yml\n  schedule:\n    - cron: '0 1 * * 0'\nname: Semgrep\njobs:\n  my_first_job:\n    name: requirementsGeneration\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Generate requirements txt\n        run: |\n          pip3 install pip-tools\n          pip-compile -o requirements.txt\n      - name: Upload Requirements File as Artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: requirementstxt\n          path: requirements.txt\n  my_second_job:\n    needs: my_first_job\n    name: Scan\n    runs-on: ubuntu-latest\n    env:\n      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}\n    container:\n      image: semgrep/semgrep\n    steps:\n      - uses: actions/checkout@v4\n      - name: Download artifact from previous job\n        uses: actions/download-artifact@v4\n        with:\n          name: requirementstxt\n      - run: semgrep ci --supply-chain\n\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"generating-pipfilelock",children:["Generating ",(0,t.jsx)(n.code,{children:"Pipfile.lock"})]}),"\n",(0,t.jsx)(n.admonition,{title:"Prerequisite",type:"info",children:(0,t.jsxs)(n.p,{children:["An existing ",(0,t.jsx)(n.code,{children:"Pipfile"}),". Depending on your development environment, a Pipfile may already be automatically generated for you."]})}),"\n",(0,t.jsxs)(n.h3,{id:"example-of-pipfile",children:["Example of ",(0,t.jsx)(n.code,{children:"Pipfile"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'[[source]]\nurl = "https://pypi.org/simple"\nverify_ssl = true\nname = "pypi"\n\n[packages]\nflasgger = "==0.9.5"\nflask = "==2.2.2"\nflask-cors = "==3.0.10"\nmarshmallow = "==3.18.0"\nrequests = "==2.25.1"\nsqlalchemy = "==1.4.41"\nwaitress = "==2.1.2"\npsycopg2 = "==2.9.5"\ndefusedxml = "==0.7.1"\n\n[dev-packages]\n\n[requires]\npython_version = "3.9"\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"generating-a-pipfilelock",children:["Generating a ",(0,t.jsx)(n.code,{children:"Pipfile.lock"})]}),"\n",(0,t.jsxs)(n.p,{children:["Generate a ",(0,t.jsx)(n.code,{children:"Pipfile.lock"})," with the following commands:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pip install pipenv --user\npipenv lock\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The newly generated ",(0,t.jsx)(n.code,{children:"Pipfile.lock"})," is a JSON file with all Python dependencies (direct and transitive) and their sha256 code."]}),"\n",(0,t.jsx)(n.p,{children:"The beginning of the file may look something like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "_meta": {\n        "hash": {\n            "sha256": "af0d5c3f87bd23f340a214b12ad766ca83aead0c462aa08dbc4f012ac2796708"\n        },\n        "pipfile-spec": 6,\n        "requires": {\n            "python_version": "3.9"\n        },\n        "sources": [\n            {\n                "name": "pypi",\n                "url": "https://pypi.org/simple",\n                "verify_ssl": true\n            }\n        ]\n    },\n    "default": {\n        "attrs": {\n            "hashes": [\n                "sha256:1f28b4522cdc2fb4256ac1a020c78acf9cba2c6b461ccd2c126f3aa8e8335d04",\n                "sha256:6279836d581513a26f1bf235f9acd333bc9115683f14f7e8fae46c98fc50e015"\n            ],\n            "markers": "python_version >= \'3.7\'",\n            "version": "==23.1.0"\n        },\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"generating-poetrylock",children:["Generating ",(0,t.jsx)(n.code,{children:"Poetry.lock"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://python-poetry.org/",children:"Poetry"})," is a tool for dependency management and packaging in Python."]}),"\n",(0,t.jsx)(n.admonition,{title:"Prerequisite",type:"info",children:(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"pyproject.toml"})," file."]})}),"\n",(0,t.jsxs)(n.h3,{id:"example-pyprojecttoml",children:["Example ",(0,t.jsx)(n.code,{children:"pyproject.toml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'[build-system]\nrequires = ["poetry-core>=1.1.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n[tool.poetry]\nname = "example-project"\nversion = "1.0.0"\ndescription = "An example project"\nauthors = ["Your Name <yourname@example.com>"]\n\n[tool.poetry.dependencies]\npython = "^3.9"\nrequests = "^2.25.1"\nnumpy = "^1.21.0"\n\n[tool.poetry.dev-dependencies]\npytest = "^6.2.4"\nflake8 = "^3.9.2"\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"generating-a-poetrylock",children:["Generating a ",(0,t.jsx)(n.code,{children:"Poetry.lock"})]}),"\n",(0,t.jsxs)(n.p,{children:["Generate a ",(0,t.jsx)(n.code,{children:"Poetry.lock"})," file with the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"poetry lock\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The generated ",(0,t.jsx)(n.code,{children:"Poetry.lock"})," file contains all transitive and direct dependencies that the project uses."]}),"\n",(0,t.jsx)(n.h2,{id:"selecting-a-single-file-among-many",children:"Selecting a single file among many"}),"\n",(0,t.jsxs)(n.p,{children:["While there may already be a lockfile in the repository, such as a ",(0,t.jsx)(n.code,{children:"Pipfile.lock"}),", you may want to generate a new one, for example a ",(0,t.jsx)(n.code,{children:"requirements.txt"}),", to be sure it has the latest dependencies."]}),"\n",(0,t.jsxs)(n.p,{children:["When scanning with Semgrep Supply Chain, you can use the flag ",(0,t.jsx)(n.code,{children:"--include"})," to specify that only a single lockfile should be scanned. The manifest file must still have one of the supported names."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"semgrep ci --supply-chain --include=requirements.txt\n"})}),"\n",(0,t.jsxs)(n.p,{children:["However, if you have multiple ",(0,t.jsx)(n.code,{children:"requirements.txt"})," files that are in supported locations, you do not need to generate a new unified lockfile. Semgrep will scan files from all supported locations."]}),"\n",(0,t.jsx)(n.h2,{id:"conclusions",children:"Conclusions"}),"\n",(0,t.jsx)(n.p,{children:"There are several ways to generate lockfiles for Python dependencies. Depending on your preferences, you can select one or another. Keep in mind that the file should be generated before the Semgrep scan and within the proper environment. This ensures that you are scanning only the dependencies of your project and not all the Python dependencies of your system."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(96540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);