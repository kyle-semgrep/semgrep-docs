"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[56634],{28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var i=s(96540);const n={},r=i.createContext(n);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(r.Provider,{value:t},e.children)}},44623:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"writing-rules/experiments/multiple-focus-metavariables","title":"Including multiple focus metavariables using set union semantics","description":"With this rule, Semgrep matches all pieces of code captured by the focus metavariables.","source":"@site/docs/writing-rules/experiments/multiple-focus-metavariables.md","sourceDirName":"writing-rules/experiments","slug":"/writing-rules/experiments/multiple-focus-metavariables","permalink":"/docs/writing-rules/experiments/multiple-focus-metavariables","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main?base=kyle-semgrep:main/docs/writing-rules/experiments/multiple-focus-metavariables.md","tags":[],"version":"current","lastUpdatedAt":1752253235000,"frontMatter":{"slug":"multiple-focus-metavariables","append_help_link":true,"description":"With this rule, Semgrep matches all pieces of code captured by the focus metavariables."},"sidebar":"rulewritingSidebar","previous":{"title":"Recursive joins","permalink":"/docs/writing-rules/experiments/join-mode/recursive-joins"},"next":{"title":"r2c-internal-project-depends-on","permalink":"/docs/writing-rules/experiments/r2c-internal-project-depends-on"}}');var n=s(74848),r=s(28453);const a={slug:"multiple-focus-metavariables",append_help_link:!0,description:"With this rule, Semgrep matches all pieces of code captured by the focus metavariables."},o="Including multiple focus metavariables using set union semantics",l={},c=[{value:"Set union",id:"set-union",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"including-multiple-focus-metavariables-using-set-union-semantics",children:"Including multiple focus metavariables using set union semantics"})}),"\n",(0,n.jsx)(t.p,{children:"Semgrep matches all pieces of code captured by focus metavariables when you specify them in a rule. Specify the metavariables you want to focus on in a YAML list format."}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsxs)(t.p,{children:["This feature is using ",(0,n.jsx)(t.code,{children:"focus-metavariable"}),", see ",(0,n.jsx)(t.a,{href:"/writing-rules/rule-syntax/#focus-metavariable",children:(0,n.jsx)(t.code,{children:"focus-metavariable"})})," documentation for more information."]})}),"\n",(0,n.jsx)(t.p,{children:"There are two ways in which you can include multiple focus metavariables:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Set union"}),": Experimental feature described below in the section ",(0,n.jsx)(t.a,{href:"#set-union",children:"Set union"}),". This feature returns the union of all matches of the specified metavariables."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Set intersection"}),": Only matches the overlapping region of all the focused code. For more information, see ",(0,n.jsx)(t.a,{href:"/writing-rules/rule-syntax/#including-multiple-focus-metavariables-using-set-intersection-semantics",children:"Including more focus metavariables using set intersection semantics"}),"."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"set-union",children:"Set union"}),"\n",(0,n.jsxs)(t.p,{children:["For example, there is a pattern that binds several metavariables. You want to produce matches focused on two or more of these metavariables. If you specify a list of metavariables under ",(0,n.jsx)(t.code,{children:"focus-metavariable"}),", each focused metavariable matches code independently of the others."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"    patterns:\n      - pattern: foo($X, ..., $Y)\n      - focus-metavariable: \n        - $X\n        - $Y\n"})}),"\n",(0,n.jsx)(t.p,{children:"This syntax enables Semgrep to match these metavariables regardless of their position in code. See the following example:"}),"\n",(0,n.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=D602",border:"0",frameBorder:"0",width:"100%",height:"432"}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsxs)(t.p,{children:["Among many use cases, the ",(0,n.jsx)(t.strong,{children:"set union"})," syntax allows you to simplify taint analysis rule writing. For example, see the following rule:"]}),(0,n.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=w6Qx",border:"0",frameBorder:"0",width:"100%",height:"432"})]})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);