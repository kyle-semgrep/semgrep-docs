"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[99796],{1738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"writing-rules/autofix","title":"Autofix","description":"Autofix is a Semgrep feature where rules contain suggested fixes to resolve findings.","source":"@site/docs/writing-rules/autofix.md","sourceDirName":"writing-rules","slug":"/writing-rules/autofix","permalink":"/semgrep-docs/writing-rules/autofix","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/writing-rules/autofix.md","tags":[{"inline":true,"label":"Rule writing","permalink":"/semgrep-docs/tags/rule-writing"}],"version":"current","lastUpdatedAt":1752260268000,"frontMatter":{"append_help_link":true,"tags":["Rule writing"]},"sidebar":"rulewritingSidebar","previous":{"title":"Private rules","permalink":"/semgrep-docs/writing-rules/private-rules"},"next":{"title":"Generic pattern matching","permalink":"/semgrep-docs/writing-rules/generic-pattern-matching"}}');var i=n(74848),s=n(28453);const a={append_help_link:!0,tags:["Rule writing"]},o="Autofix",l={},c=[{value:"Example autofix snippet",id:"example-autofix-snippet",level:2},{value:"Create autofix rules",id:"create-autofix-rules",level:2},{value:"Autofix with regular expression replacement",id:"autofix-with-regular-expression-replacement",level:2},{value:"Remove a code detected by a rule",id:"remove-a-code-detected-by-a-rule",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"autofix",children:"Autofix"})}),"\n",(0,i.jsx)(t.p,{children:"Autofix is a Semgrep feature where rules contain suggested fixes to resolve findings."}),"\n",(0,i.jsxs)(t.p,{children:["Semgrep's rule format supports a ",(0,i.jsx)(t.code,{children:"fix:"})," key that supports the replacement of metavariables and regex matches with potential fixes. This allows for value capture and rewriting. With rules that make use of the autofix capability, you can resolve findings as part of your code review workflow. Semgrep suggests these fixes through GitHub PR or GitLab MR comments."]}),"\n",(0,i.jsxs)(t.p,{children:["You can apply the autofix directly to the file using the ",(0,i.jsx)(t.code,{children:"--autofix"})," flag. To test the autofix before applying it, use both the ",(0,i.jsx)(t.code,{children:"--autofix"})," and ",(0,i.jsx)(t.code,{children:"--dryrun"})," flags."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tip",children:"Rule-based autofix is deterministic and separate from the [Semgrep Assistant autofix feature](/semgrep-assistant/overview#autofix). The Assistant autofix feature uses AI to generate a suggested code fix.\n"})}),"\n",(0,i.jsx)(t.h2,{id:"example-autofix-snippet",children:"Example autofix snippet"}),"\n",(0,i.jsxs)(t.p,{children:["Sample autofix (view in ",(0,i.jsx)(t.a,{href:"https://semgrep.dev/s/R6g",children:"Playground"}),"):"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"rules:\n- id: use-sys-exit\n  languages:\n  - python\n  message: |\n    Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper\n    for the interactive shell and is not be available on all Python implementations.\n    https://stackoverflow.com/a/6501134\n  pattern: exit($X)\n  fix: sys.exit($X)\n  severity: WARNING\n"})}),"\n",(0,i.jsx)(t.h2,{id:"create-autofix-rules",children:"Create autofix rules"}),"\n",(0,i.jsxs)(t.p,{children:["See how to create an autofix rule in ",(0,i.jsx)(t.strong,{children:"Transforming code with Semgrep autofixes"})," video:"]}),"\n",(0,i.jsx)("iframe",{class:"yt_embed",width:"100%",height:"432px",src:"https://www.youtube.com/embed/8jfjWixmtvo",frameborder:"0",allowfullscreen:!0}),"\n",(0,i.jsx)(t.h2,{id:"autofix-with-regular-expression-replacement",children:"Autofix with regular expression replacement"}),"\n",(0,i.jsxs)(t.p,{children:["A variant on the ",(0,i.jsx)(t.code,{children:"fix"})," key is ",(0,i.jsx)(t.code,{children:"fix-regex"}),", which applies regular expression replacements (think ",(0,i.jsx)(t.code,{children:"sed"}),") to matches found by Semgrep."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"fix-regex"})," has two required fields:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"regex"})," specifies the regular expression to replace within the match found by Semgrep"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"replacement"})," specifies what to replace the regular expression with."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"fix-regex"})," also takes an optional ",(0,i.jsx)(t.code,{children:"count"})," field, which specifies how many occurrences of ",(0,i.jsx)(t.code,{children:"regex"})," to replace with ",(0,i.jsx)(t.code,{children:"replacement"}),", from left-to-right and top-to-bottom. By default, ",(0,i.jsx)(t.code,{children:"fix-regex"})," will replace all occurrences of ",(0,i.jsx)(t.code,{children:"regex"}),". If ",(0,i.jsx)(t.code,{children:"regex"})," does not match anything, no replacements are made."]}),"\n",(0,i.jsxs)(t.p,{children:["The replacement behavior is identical to the ",(0,i.jsx)(t.code,{children:"re.sub"})," function in Python. See these ",(0,i.jsx)(t.a,{href:"https://docs.python.org/3/library/re.html#re.sub",children:"Python docs"})," for more information."]}),"\n",(0,i.jsxs)(t.p,{children:["An example rule with ",(0,i.jsx)(t.code,{children:"fix-regex"})," is shown below. ",(0,i.jsx)(t.code,{children:"regex"})," uses a capture group to greedily capture everything up to the final parenthesis in the match found by Semgrep. ",(0,i.jsx)(t.code,{children:"replacement"})," replaces this with everything in the capture group (",(0,i.jsx)(t.code,{children:"\\1"}),"), a comma, ",(0,i.jsx)(t.code,{children:"timeout=30"}),", and a closing parenthesis. Effectively, this adds ",(0,i.jsx)(t.code,{children:"timeout=30"})," to the end of every match."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"rules:\n- id: python.requests.best-practice.use-timeout.use-timeout\n  patterns:\n  - pattern-not: requests.$W(..., timeout=$N, ...)\n  - pattern-not: requests.$W(..., **$KWARGS)\n  - pattern-either:\n    - pattern: requests.request(...)\n    - pattern: requests.get(...)\n    - pattern: requests.post(...)\n    - pattern: requests.put(...)\n    - pattern: requests.delete(...)\n    - pattern: requests.head(...)\n    - pattern: requests.patch(...)\n  fix-regex:\n    regex: '(.*)\\)'\n    replacement: '\\1, timeout=30)'\n  message: |\n    'requests' calls default to waiting until the connection is closed.\n    This means a 'requests' call without a timeout will hang the program\n    if a response is never received. Consider setting a timeout for all\n    'requests'.\n  languages: [python]\n  severity: WARNING\n"})}),"\n",(0,i.jsx)(t.h2,{id:"remove-a-code-detected-by-a-rule",children:"Remove a code detected by a rule"}),"\n",(0,i.jsxs)(t.p,{children:["Improve your code quality by cleaning up stale code automatically. Remove code that an autofix rule detected by adding the ",(0,i.jsx)(t.code,{children:"fix"})," key with ",(0,i.jsx)(t.code,{children:'""'}),", an empty string."]}),"\n",(0,i.jsx)(t.p,{children:"For example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:' - id: python-typing\n   pattern: from typing import $X\n   fix: ""\n   languages: [ python ]\n   message: found one\n   severity: ERROR\n'})}),"\n",(0,i.jsx)(t.p,{children:"When an autofix is applied, this rule removes the detected code."})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(96540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);