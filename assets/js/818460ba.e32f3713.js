"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[24679],{28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>a});var n=t(96540);const r={},d=n.createContext(r);function i(e){const s=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(d.Provider,{value:s},e.children)}},88506:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>o,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"semgrep-secrets/validators","title":"Custom validators","description":"Learn about validators used in Semgrep Secrets rules.","source":"@site/docs/semgrep-secrets/validators.md","sourceDirName":"semgrep-secrets","slug":"/semgrep-secrets/validators","permalink":"/semgrep-docs/semgrep-secrets/validators","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main?base=kyle-semgrep:main/docs/semgrep-secrets/validators.md","tags":[{"inline":true,"label":"Semgrep Secrets","permalink":"/semgrep-docs/tags/semgrep-secrets"},{"inline":true,"label":"Rule writing","permalink":"/semgrep-docs/tags/rule-writing"}],"version":"current","lastUpdatedAt":1752254305000,"frontMatter":{"slug":"validators","title":"Custom validators","hide_title":true,"description":"Learn about validators used in Semgrep Secrets rules.","tags":["Semgrep Secrets","Rule writing"]},"sidebar":"rulewritingSidebar","previous":{"title":"Custom rules","permalink":"/semgrep-docs/semgrep-secrets/rules"}}');var r=t(74848),d=t(28453);const i={slug:"validators",title:"Custom validators",hide_title:!0,description:"Learn about validators used in Semgrep Secrets rules.",tags:["Semgrep Secrets","Rule writing"]},a="Write custom validators",l={},c=[{value:"Sample validator",id:"sample-validator",level:2},{value:"Syntax",id:"syntax",level:2},{value:"validator",id:"validator",level:3},{value:"type",id:"type",level:3},{value:"request",id:"request",level:3},{value:"Subkeys for <code>headers</code>",id:"subkeys-for-headers",level:4},{value:"Example",id:"example",level:4},{value:"response",id:"response",level:3},{value:"Subkeys for <code>match</code>",id:"subkeys-for-match",level:4},{value:"Subkeys for <code>result</code>",id:"subkeys-for-result",level:4},{value:"Subkeys for <code>content</code>",id:"subkeys-for-content",level:4},{value:"Example",id:"example-1",level:4},{value:"Sample rules with validators",id:"sample-rules-with-validators",level:2},{value:"Base64 encoding",id:"base64-encoding",level:3}];function h(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components},{Details:t}=s;return t||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"write-custom-validators",children:"Write custom validators"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/semgrep-secrets/conceptual-overview",children:"Semgrep Secrets"})," uses proprietary ",(0,r.jsx)(s.strong,{children:"validators"})," to determine if a secret is\nactively being used. Validators are included in the\n",(0,r.jsx)(s.a,{href:"/semgrep-secrets/rules",children:"rules"})," that Semgrep Secrets uses."]}),"\n",(0,r.jsx)(s.p,{children:"This article walks you through the syntax required to write your own custom\nvalidators."}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"The syntax for Semgrep Secrets validators is experimental and subject to change."}),"\n",(0,r.jsx)(s.li,{children:"Semgrep currently supports validation using HTTP and HTTPS."}),"\n"]})}),"\n",(0,r.jsx)(s.h2,{id:"sample-validator",children:"Sample validator"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:"validators:\n- http:\n    request:\n      headers:\n        Authorization: Bearer $REGEX\n        Host: api.semgrep.dev\n        User-Agent: Semgrep\n      method: GET\n      url: https://api.semgrep.dev/user\n    response:\n    - match:\n      - status-code: 200\n      result:\n        validity: valid\n    - match:\n      - status-code: 401\n      result:\n        validity: invalid\n"})}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"See a validator in the context of a full rule."}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:"rules:\n- id: exampleCo_example\n  message: >-\n    This is an example rule that performs validation against semgrep.dev\n  severity: WARNING\n  metadata:\n    product: secrets\n    secret_type: exampleCo\n  languages:\n  - regex\n  validators:\n  - http:\n      request:\n        headers:\n          Authorization: Bearer $REGEX\n          Host: api.semgrep.dev\n          User-Agent: Semgrep\n        method: GET\n        url: https://api.semgrep.dev/user\n      response:\n      - match:\n        - status-code: 200\n        result:\n          validity: valid\n      - match:\n        - status-code: 401\n        result:\n          validity: invalid\n  patterns:\n  - patterns:\n    - pattern-regex: (?<REGEX>\\b(someprefix_someRegex[0-9A-Z]{32})\\b)\n    - focus-metavariable: $REGEX\n    - metavariable-analysis:\n        analyzer: entropy\n        metavariable: $REGEX\n"})})]}),"\n",(0,r.jsx)(s.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(s.h3,{id:"validator",children:"validator"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Key"}),(0,r.jsx)(s.th,{children:"Required"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"validator"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsx)(s.td,{children:"Used to define a list of validators within a Semgrep rule."})]})})]}),"\n",(0,r.jsx)(s.h3,{id:"type",children:"type"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Key"}),(0,r.jsx)(s.th,{children:"Required"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"http"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsxs)(s.td,{children:["Indicates that the request type is ",(0,r.jsx)(s.code,{children:"http"}),"."]})]})})]}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsx)(s.p,{children:"Semgrep only supports web services with HTTP(S)."})}),"\n",(0,r.jsx)(s.h3,{id:"request",children:"request"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Key"}),(0,r.jsx)(s.th,{children:"Required"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"request"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsx)(s.td,{children:"Describes the request object and the URL to which the request object should be sent"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"method"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsxs)(s.td,{children:["The HTTP method Semgrep uses to make the call. Accepted values: ",(0,r.jsx)(s.code,{children:"GET"}),", ",(0,r.jsx)(s.code,{children:"POST"}),", ",(0,r.jsx)(s.code,{children:"PUT"}),", ",(0,r.jsx)(s.code,{children:"DELETE"}),", ",(0,r.jsx)(s.code,{children:"OPTIONS"}),", ",(0,r.jsx)(s.code,{children:"PATCH"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"url"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsx)(s.td,{children:"The URL to which the call is made"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"headers"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsx)(s.td,{children:"The headers to include with the call"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"body"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsxs)(s.td,{children:["The body used with ",(0,r.jsx)(s.code,{children:"POST"}),", ",(0,r.jsx)(s.code,{children:"PUT"}),", and ",(0,r.jsx)(s.code,{children:"PATCH"})," requests"]})]})]})]}),"\n",(0,r.jsxs)(s.h4,{id:"subkeys-for-headers",children:["Subkeys for ",(0,r.jsx)(s.code,{children:"headers"})]}),"\n",(0,r.jsxs)(s.p,{children:["The following keys are for use with ",(0,r.jsx)(s.code,{children:"headers"}),":"]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Key"}),(0,r.jsx)(s.th,{children:"Required"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Host"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsxs)(s.td,{children:["The host to which the call is made. Only the ",(0,r.jsx)(s.code,{children:"url"})," field is required, but you can override the host if needed"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Other-values"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsxs)(s.td,{children:["The request header. Accepts all values, including ",(0,r.jsx)(s.code,{children:"Authorization"}),", ",(0,r.jsx)(s.code,{children:"Content-Type"}),", ",(0,r.jsx)(s.code,{children:"User-Agent"}),", and so on"]})]})]})]}),"\n",(0,r.jsx)(s.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:"request:\n  headers:\n    Authorization: Bearer $REGEX\n    Host: api.semgrep.dev\n    User-Agent: Semgrep\n  method: GET\n  url: https://api.semgrep.dev/user\n"})}),"\n",(0,r.jsx)(s.h3,{id:"response",children:"response"}),"\n",(0,r.jsxs)(s.p,{children:["The response key is used to determine the validation state. It accepts a list of objects with the Subkeys ",(0,r.jsx)(s.code,{children:"match"})," and ",(0,r.jsx)(s.code,{children:"result"}),"."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Key"}),(0,r.jsx)(s.th,{children:"Required"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"match"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsx)(s.td,{children:"Defines the list of match conditions."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"result"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsxs)(s.td,{children:["Defines the validity. Accepted values: ",(0,r.jsx)(s.code,{children:"Valid"}),", ",(0,r.jsx)(s.code,{children:"Invalid"})]})]})]})]}),"\n",(0,r.jsxs)(s.h4,{id:"subkeys-for-match",children:["Subkeys for ",(0,r.jsx)(s.code,{children:"match"})]}),"\n",(0,r.jsx)(s.p,{children:"Match accepts a list of objects. No specific key is required, but at least one key must be present."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Key"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"status-code"}),(0,r.jsx)(s.td,{children:"The HTTP status code expected by Semgrep Secrets for it to consider the secret a match"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"content"}),(0,r.jsx)(s.td,{children:"The response body; you can inspect it for a specific value to determine if the request is valid. An example of where this is useful is when both invalid and valid responses return the same status code"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"headers"}),(0,r.jsx)(s.td,{children:"Accepts a list of objects with the keys name/value they must be exact values"})]})]})]}),"\n",(0,r.jsxs)(s.h4,{id:"subkeys-for-result",children:["Subkeys for ",(0,r.jsx)(s.code,{children:"result"})]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Key"}),(0,r.jsx)(s.th,{children:"Required"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"validity"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsxs)(s.td,{children:["Sets the validity based on the HTTP status code received. Accepted values: ",(0,r.jsx)(s.code,{children:"valid"})," and ",(0,r.jsx)(s.code,{children:"invalid"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"message"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"Used to override the rule message based on the secret's validity state"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"metadata"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"Used to override existing metadata fields or add new metadata fields based on the secret's validity state"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"severity"}),(0,r.jsx)(s.td,{children:"No"}),(0,r.jsx)(s.td,{children:"Used to override the existing rule severity based on the validity state"})]})]})]}),"\n",(0,r.jsxs)(s.h4,{id:"subkeys-for-content",children:["Subkeys for ",(0,r.jsx)(s.code,{children:"content"})]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Key"}),(0,r.jsx)(s.th,{children:"Required"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"language"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsxs)(s.td,{children:["Indicates the pattern language to use; this must be ",(0,r.jsx)(s.code,{children:"regex"})," or ",(0,r.jsx)(s.code,{children:"generic"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"pattern-regex"}),(0,r.jsx)(s.td,{children:"Yes"}),(0,r.jsxs)(s.td,{children:["Defines the regex used to search the response body. Alternatively, you can use the ",(0,r.jsx)(s.code,{children:"patterns"})," key and ",(0,r.jsx)(s.a,{href:"/semgrep-secrets/rules/#subkeys-under-the-patterns-key",children:"define patterns as you would for rules"})]})]})]})]}),"\n",(0,r.jsx)(s.h4,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:'response:\n- match:\n  - status-code: 200\n  - content:\n      language: regex\n      pattern-regex: (\\"ok\\":true)\n    status-code: 200\n'})}),"\n",(0,r.jsx)(s.h2,{id:"sample-rules-with-validators",children:"Sample rules with validators"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Sample POST request"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:'rules:\n- id: exampleCo_example\n  message: >-\n    This is an example rule that performs validation against semgrep.dev\n  severity: WARNING\n  metadata:\n    product: secrets\n    secret_type: exampleCo\n  languages:\n  - regex\n  validators:\n  - http:\n      request:\n        headers:\n          Host: api.semgrep.dev\n          User-Agent: Semgrep\n        method: POST\n        body: |\n          {"key": "$REGEX"}\n        url: https://api.semgrep.dev/user\n      response:\n      - match:\n        - status-code: 200\n        result:\n          validity: valid\n      - match:\n        - status-code: 401\n        result:\n          validity: invalid\n  patterns:\n  - patterns:\n    - pattern-regex: (?<REGEX>\\b(someprefix_someRegex[0-9A-Z]{32})\\b)\n    - focus-metavariable: $REGEX\n    - metavariable-analysis:\n        analyzer: entropy\n        metavariable: $REGEX\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"All fields"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:'rules:\n- id: exampleCo_example\n  message: >-\n    This is an example rule that performs validation against semgrep.dev\n  severity: WARNING\n  metadata:\n    product: secrets\n    secret_type: exampleCo\n  languages:\n  - regex\n  validators:\n  - http:\n      request:\n        headers:\n          Host: api.semgrep.dev\n          User-Agent: Semgrep\n        method: POST\n        body: |\n          {"key": "$REGEX"}\n        url: https://api.semgrep.dev/user\n      response:\n      - match:\n        - status-code: 200\n        - content:\n            language: regex\n            pattern-regex: (\\"role\\":admin)\n        result:\n          validity: valid\n          severity: ERROR\n          message: >-\n            The token exposed is for an admin user, and this should be fixed immediately!\n            See https://howtorotate.com/docs/introduction/key-rotation-101/ on how to\n            rotate secrets and https://blog.gitguardian.com/what-to-do-if-you-expose-a-secret/\n            on how to look for suspicious activity.\n          metadata:\n            context:\n              - admin: true\n      - match:\n        - status-code: 200\n        result:\n          validity: invalid\n  patterns:\n  - patterns:\n    - pattern-regex: (?<REGEX>\\b(someprefix_someRegex[0-9A-Z]{32})\\b)\n    - focus-metavariable: $REGEX\n    - metavariable-analysis:\n        analyzer: entropy\n        metavariable: $REGEX\n'})})]}),"\n",(0,r.jsx)(s.h3,{id:"base64-encoding",children:"Base64 encoding"}),"\n",(0,r.jsxs)(s.p,{children:["You can use Base64 encoding by leveraging the ",(0,r.jsx)(s.code,{children:"__semgrep_internal_encode_64(...)"})," utility. Base64 encoding can be applied to the following fields:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"url"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"body"})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"header"})," values"]}),"\n"]}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsx)(s.p,{children:"The Base64 encoding of fields is experimental and can change at any time."})}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Sample Semgrep rule with validator using Base64 encoding"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yaml",children:"rules:\n- id: exampleCo_example\n  message: >-\n    This is an example rule that performs validation against semgrep.dev\n  severity: WARNING\n  metadata:\n    product: secrets\n    secret_type: exampleCo\n  languages:\n  - regex\n  validators:\n  - http:\n      request:\n        headers:\n          Authorization: Basic __semgrep_internal_encode_64($REGEX:)\n          Host: api.semgrep.dev\n          User-Agent: Semgrep\n        method: GET\n        url: https://api.semgrep.dev/user\n      response:\n      - match:\n        - status-code: 200\n        result:\n          validity: valid\n      - match:\n        - status-code: 401\n        result:\n          validity: invalid\n  patterns:\n  - patterns:\n    - pattern-regex: (?<REGEX>\\b(someprefix_someRegex[0-9A-Z]{32})\\b)\n    - focus-metavariable: $REGEX\n    - metavariable-analysis:\n        analyzer: entropy\n        metavariable: $REGEX\n"})})]})]})}function o(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);