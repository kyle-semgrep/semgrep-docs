"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[2540],{519:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"writing-rules/metavariable-analysis","title":"Metavariable analysis","description":"metavariable-analysis allows Semgrep users to check metavariables for common problematic properties, such as RegEx denial of service (ReDoS) and high-entropy values.","source":"@site/docs/writing-rules/metavariable-analysis.md","sourceDirName":"writing-rules","slug":"/writing-rules/metavariable-analysis","permalink":"/semgrep-docs/writing-rules/metavariable-analysis","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/docs/writing-rules/metavariable-analysis.md","tags":[{"inline":true,"label":"Rule writing","permalink":"/semgrep-docs/tags/rule-writing"}],"version":"current","lastUpdatedAt":1752259747000,"frontMatter":{"slug":"metavariable-analysis","append_help_link":true,"description":"metavariable-analysis allows Semgrep users to check metavariables for common problematic properties, such as RegEx denial of service (ReDoS) and high-entropy values.","tags":["Rule writing"]},"sidebar":"rulewritingSidebar","previous":{"title":"Generic pattern matching","permalink":"/semgrep-docs/writing-rules/generic-pattern-matching"},"next":{"title":"Troubleshooting rules","permalink":"/semgrep-docs/troubleshooting/rules"}}');var t=r(74848),n=r(28453);const i={slug:"metavariable-analysis",append_help_link:!0,description:"metavariable-analysis allows Semgrep users to check metavariables for common problematic properties, such as RegEx denial of service (ReDoS) and high-entropy values.",tags:["Rule writing"]},l="Metavariable analysis",o={},c=[{value:"ReDoS",id:"redos",level:2},{value:"Entropy",id:"entropy",level:2}];function d(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"metavariable-analysis",children:"Metavariable analysis"})}),"\n",(0,t.jsxs)(a.p,{children:['Metavariable analysis was created to support some metavariable inspection techniques that are difficult to express with existing rules but have "simple" binary classifier behavior. Currently, this syntax supports two analyzers: ',(0,t.jsx)(a.code,{children:"redos"})," and ",(0,t.jsx)(a.code,{children:"entropy"})]}),"\n",(0,t.jsx)(a.h2,{id:"redos",children:"ReDoS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",children:"metavariable-analysis:\n    analyzer: redos\n    metavariable: $VARIABLE\n"})}),"\n",(0,t.jsxs)(a.p,{children:["RegEx denial of service is caused by poorly constructed regular expressions that exhibit exponential runtime when fed specifically crafted inputs. The ",(0,t.jsx)(a.code,{children:"redos"})," analyzer uses known RegEx antipatterns to determine if the target expression is potentially vulnerable to catastrophic backtracking."]}),"\n",(0,t.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=2Aoj",border:"0",frameBorder:"0",width:"100%",height:"432"}),"\n",(0,t.jsx)(a.h2,{id:"entropy",children:"Entropy"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",children:"metavariable-analysis:\n    analyzer: entropy\n    metavariable: $VARIABLE\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Entropy is a common approach for detecting secret strings - many existing tools leverage a combination of entropy calculations and RegEx for secret detection. This analyzer returns ",(0,t.jsx)(a.code,{children:"true"})," if a metavariable has high entropy (randomness) relative to the English language."]}),"\n",(0,t.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=GgZG",border:"0",frameBorder:"0",width:"100%",height:"432"})]})}function p(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,a,r)=>{r.d(a,{R:()=>i,x:()=>l});var s=r(96540);const t={},n=s.createContext(t);function i(e){const a=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(n.Provider,{value:a},e.children)}}}]);