"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[27033],{10064:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>c});var i=t(74848),r=t(28453);const c=[];function o(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The following command runs an optimized set of rules for your project:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"semgrep --config p/default\n"})})]})}function s(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},21250:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var i=t(74848);function r(e){let{ruleId:n}=e;const t=new URL("https://semgrep.dev/r");return t.searchParams.set("q",n),(0,i.jsx)("a",{href:t,target:"_blank",children:n})}},23888:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>j,frontMatter:()=>l,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"cheat-sheets/javascript-code-injection","title":"Code injection prevention for JavaScript","description":"JavaScript code injection prevention cheat sheet.","source":"@site/docs/cheat-sheets/javascript-code-injection.mdx","sourceDirName":"cheat-sheets","slug":"/cheat-sheets/javascript-code-injection","permalink":"/docs/cheat-sheets/javascript-code-injection","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main?base=kyle-semgrep:main/docs/cheat-sheets/javascript-code-injection.mdx","tags":[],"version":"current","lastUpdatedAt":1752253235000,"frontMatter":{"slug":"javascript-code-injection","description":"JavaScript code injection prevention cheat sheet."},"sidebar":"cheatsheetSidebar","previous":{"title":"Code injection prevention for Java","permalink":"/docs/cheat-sheets/java-code-injection"},"next":{"title":"Code injection prevention for Python","permalink":"/docs/cheat-sheets/python-code-injection"}}');var r=t(74848),c=t(28453),o=t(21250),s=t(53124),a=t(10064);const l={slug:"javascript-code-injection",description:"JavaScript code injection prevention cheat sheet."},d="Code injection prevention for JavaScript",u={},h=[...s.RM,{value:"Check your project using Semgrep",id:"check-your-project-using-semgrep",level:3},...a.RM,{value:"1. Executing or evaluating code",id:"1-executing-or-evaluating-code",level:2},{value:"1.A. running code with VM module",id:"1a-running-code-with-vm-module",level:3},{value:"References",id:"references",level:4},{value:"Mitigation",id:"mitigation",level:4},{value:"Semgrep rule",id:"semgrep-rule",level:4},{value:"1.B. eval or new Function",id:"1b-eval-or-new-function",level:3},{value:"References",id:"references-1",level:4},{value:"Mitigation",id:"mitigation-1",level:4},{value:"Semgrep rule",id:"semgrep-rule-1",level:4}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"code-injection-prevention-for-javascript",children:"Code injection prevention for JavaScript"})}),"\n",(0,r.jsx)(s.Ay,{}),"\n",(0,r.jsx)(n.h3,{id:"check-your-project-using-semgrep",children:"Check your project using Semgrep"}),"\n",(0,r.jsx)(a.Ay,{}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"1-executing-or-evaluating-code",children:"1. Executing or evaluating code"}),"\n",(0,r.jsx)(n.h3,{id:"1a-running-code-with-vm-module",children:"1.A. running code with VM module"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"vm"})," module enables compiling and running code within V8 Virtual Machine contexts. The ",(0,r.jsx)(n.code,{children:"vm"})," module is not secure. Do not use it to run untrusted code. If user input is used as a part of the code passed to ",(0,r.jsx)(n.code,{children:"vm"})," functions, it can result in code injection. See ",(0,r.jsx)(n.a,{href:"https://nodejs.org/dist/latest-v18.x/docs/api/vm.html#vm-executing-javascript",children:"VM (executing JavaScript)"})," documentation."]}),"\n",(0,r.jsxs)(n.p,{children:["The following list documents all potentially vulnerable functions that compile and execute code from the ",(0,r.jsx)(n.code,{children:"vm"})," module:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"vm.runInContext"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"vm.runInNewContext"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"vm.runInThisContext"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"vm.compileFunction"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"new vm.Script"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"new vm.SourceTextModule"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const vm = require('vm');\nconst contextObject = { globalVar: 1 };\n\n// safe\nvm.runInContext('globalVar *= 2;', contextObject);\n\n// vulnerable\nlet userInput = 'this.constructor.constructor(\"return process.env\")()'; // Value supplied by user input\nvm.runInContext(`globalVar = ${userInput};`, contextObject);\n\n// safe\nconst code = `return 'hello ' + name`\nvm.compileFunction(code, [], { parsingContext: vm.createContext({ name: 'name' }) })\n\n// vulnerable\nlet userInput = '1; while (true)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nodejs.org/dist/latest-v14.x/docs/api/vm.html",children:"VM module documentation"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation",children:"Mitigation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Don't use the ",(0,r.jsx)(n.code,{children:"vm"})," module for running untrusted code."]}),"\n",(0,r.jsxs)(n.li,{children:["If you need to use functions of the ",(0,r.jsx)(n.code,{children:"vm"})," module with non-literal values, ensure that the executed content cannot be controlled by external sources."]}),"\n",(0,r.jsx)(n.li,{children:"If it's not possible, strip everything except alphanumeric characters from the input."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule",children:"Semgrep rule"}),"\n",(0,r.jsx)(o.A,{ruleId:"javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection"}),"\n",(0,r.jsx)(n.h3,{id:"1b-eval-or-new-function",children:"1.B. eval or new Function"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"eval()"})," or ",(0,r.jsx)(n.code,{children:"new Function()"})," function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use ",(0,r.jsx)(n.code,{children:"eval()"})," or ",(0,r.jsx)(n.code,{children:"new Function()"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const userInput = \"1;require('child_process').exec('cat /etc/passwd')\"\neval(`var x = ${userInput}`)\n\nconst userInput = \"require('child_process').exec('cat /etc/passwd') && console.log\"\nvar x = new Function(`return ${userInput}(a,b)`)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-1",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!",children:"Never use eval()"})," in MDN Web Docs documentation."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-1",children:"Mitigation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Don't use ",(0,r.jsx)(n.code,{children:"eval()"})," or ",(0,r.jsx)(n.code,{children:"new Function()"})," if possible."]}),"\n",(0,r.jsxs)(n.li,{children:["If you need to use ",(0,r.jsx)(n.code,{children:"eval()"})," or ",(0,r.jsx)(n.code,{children:"new Function()"})," with non-literal values, ensure that the executed content cannot be controlled by external sources."]}),"\n",(0,r.jsx)(n.li,{children:"If it's not possible, strip everything except alphanumeric characters from the input."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-1",children:"Semgrep rule"}),"\n",(0,r.jsx)(o.A,{ruleId:"javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression"})]})}function j(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(96540);const r={},c=i.createContext(r);function o(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(c.Provider,{value:n},e.children)}},53124:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>c});var i=t(74848),r=t(28453);const c=[];function o(e){const n={p:"p",...(0,r.R)(),...e.components};return(0,i.jsx)(n.p,{children:"This is a code injection prevention cheat sheet by Semgrep, Inc. It contains code patterns of potential ways to run arbitrary code in an application. Instead of scrutinizing code for exploitable vulnerabilities, the recommendations in this cheat sheet pave a safe road for developers that mitigate the possibility of code injection in your code. By following these recommendations, you can be reasonably sure your code is free of code injection."})}function s(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);