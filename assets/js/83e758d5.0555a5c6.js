"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[41674],{28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var i=s(96540);const r={},n=i.createContext(r);function a(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(n.Provider,{value:t},e.children)}},59601:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"writing-rules/rule-ideas","title":"Custom rule examples","description":"Not sure what to write a rule for? Below are some common questions, ideas, and topics to spur your imagination. Happy hacking! \ud83d\udca1","source":"@site/docs/writing-rules/rule-ideas.md","sourceDirName":"writing-rules","slug":"/writing-rules/rule-ideas","permalink":"/semgrep-docs/writing-rules/rule-ideas","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/writing-rules/rule-ideas.md","tags":[{"inline":true,"label":"Rule writing","permalink":"/semgrep-docs/tags/rule-writing"}],"version":"current","lastUpdatedAt":1753214405000,"frontMatter":{"append_help_link":true,"slug":"rule-ideas","tags":["Rule writing"]},"sidebar":"rulewritingSidebar","previous":{"title":"Pattern syntax","permalink":"/semgrep-docs/writing-rules/pattern-syntax"},"next":{"title":"Rule syntax","permalink":"/semgrep-docs/writing-rules/rule-syntax"}}');var r=s(74848),n=s(28453);const a={append_help_link:!0,slug:"rule-ideas",tags:["Rule writing"]},o="Custom rule examples",c={},d=[{value:"Use cases",id:"use-cases",level:2},{value:"Automate code review comments",id:"automate-code-review-comments",level:3},{value:"Ban dangerous APIs",id:"ban-dangerous-apis",level:3},{value:"Exempting special cases of dangerous APIs",id:"exempting-special-cases-of-dangerous-apis",level:3},{value:"Detect tainted data flowing into a dangerous sink",id:"detect-tainted-data-flowing-into-a-dangerous-sink",level:3},{value:"Detect security violations",id:"detect-security-violations",level:3},{value:"Scan configuration files using JSON, YAML, or Generic pattern matching",id:"scan-configuration-files-using-json-yaml-or-generic-pattern-matching",level:3},{value:"Enforce authentication patterns",id:"enforce-authentication-patterns",level:3},{value:"Systematize project-specific coding patterns",id:"systematize-project-specific-coding-patterns",level:3},{value:"Extract information with metavariables",id:"extract-information-with-metavariables",level:3},{value:"Burn down deprecated APIs",id:"burn-down-deprecated-apis",level:3},{value:"Promote secure alternatives",id:"promote-secure-alternatives",level:3},{value:"Prompts for writing custom rules",id:"prompts-for-writing-custom-rules",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"custom-rule-examples",children:"Custom rule examples"})}),"\n",(0,r.jsx)(t.p,{children:"Not sure what to write a rule for? Below are some common questions, ideas, and topics to spur your imagination. Happy hacking! \ud83d\udca1"}),"\n",(0,r.jsx)(t.h2,{id:"use-cases",children:"Use cases"}),"\n",(0,r.jsx)(t.h3,{id:"automate-code-review-comments",children:"Automate code review comments"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Time to write this rule: ",(0,r.jsx)(t.strong,{children:"5 minutes"})]})}),"\n",(0,r.jsxs)(t.p,{children:["You can use Semgrep and its GitHub integration to ",(0,r.jsx)(t.a,{href:"/semgrep-appsec-platform/notifications",children:"automate PR comments"})," that you frequently make in code reviews. Writing a custom rule for the code pattern you want to target is usually straightforward. If you want to understand the Semgrep syntax, see the ",(0,r.jsx)(t.a,{href:"/writing-rules/pattern-syntax",children:"documentation"})," or try the ",(0,r.jsx)(t.a,{href:"https://semgrep.dev/learn",children:"tutorial"}),"."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"A reviewer writes a Semgrep rule and adds it to an organization-wide policy",src:s(82196).A+"",width:"638",height:"356"})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.p,{children:"A reviewer writes a Semgrep rule and adds it to an organization-wide policy."}),"\n",(0,r.jsx)(t.h3,{id:"ban-dangerous-apis",children:"Ban dangerous APIs"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Time to write this rule: ",(0,r.jsx)(t.strong,{children:"5 minutes"})]})}),"\n",(0,r.jsxs)(t.p,{children:["Semgrep can detect dangerous APIs in code. If integrated into CI/CD pipelines, you can use Semgrep to block merges or flag for review when someone adds such dangerous APIs to the code. For example, a rule that detects React's ",(0,r.jsx)(t.code,{children:"dangerouslySetInnerHTML"})," looks like this."]}),"\n",(0,r.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=zEXn",title:"Ban dangerous APIs with Semgrep",width:"100%",height:"432px",frameBorder:"0"}),"\n",(0,r.jsx)(t.h3,{id:"exempting-special-cases-of-dangerous-apis",children:"Exempting special cases of dangerous APIs"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Time to write this rule: ",(0,r.jsx)(t.strong,{children:"5 minutes"})]})}),"\n",(0,r.jsxs)(t.p,{children:["If you have a legitimate use case for a dangerous API, you can exempt a specific use of the API using a ",(0,r.jsx)(t.code,{children:"nosemgrep"})," comment. The rule below checks for React's ",(0,r.jsx)(t.code,{children:"dangerouslySetInnerHTML"}),", but the code is annotated with a ",(0,r.jsx)(t.code,{children:"nosemgrep"})," comment. Semgrep will not detect this line. This allows Semgrep to continuously check for future uses of ",(0,r.jsx)(t.code,{children:"dangerouslySetInnerHTML"})," while allowing for this specific use."]}),"\n",(0,r.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=2B3r",title:"Exempt special cases of dangerous APIs with Semgrep",width:"100%",height:"432px",frameBorder:"0"}),"\n",(0,r.jsx)(t.h3,{id:"detect-tainted-data-flowing-into-a-dangerous-sink",children:"Detect tainted data flowing into a dangerous sink"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Time to write this rule: ",(0,r.jsx)(t.strong,{children:"5 minutes"})]})}),"\n",(0,r.jsxs)(t.p,{children:["Semgrep's ",(0,r.jsx)(t.a,{href:"/writing-rules/data-flow/data-flow-overview",children:"dataflow engine with support for taint tracking"})," can be used to detect when data flows from a user-provided value into a security-sensitive function."]}),"\n",(0,r.jsxs)(t.p,{children:["This rule detects when a user of the ExpressJS framework passes user data into the ",(0,r.jsx)(t.code,{children:"run()"})," method of a sandbox."]}),"\n",(0,r.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=jEGP",title:"ExpressJS dataflow to sandbox.run",width:"100%",height:"432px",frameBorder:"0"}),"\n",(0,r.jsx)(t.h3,{id:"detect-security-violations",children:"Detect security violations"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Time to write this rule: ",(0,r.jsx)(t.strong,{children:"5 minutes"})]})}),"\n",(0,r.jsx)(t.p,{children:'Use Semgrep to flag specific uses of APIs too, not just their presence in code. We jokingly call these the "security off" buttons and make extensive use of Semgrep to detect them.'}),"\n",(0,r.jsx)(t.p,{children:"This rule detects when HTML auto escaping is explicitly disabled for a Django template."}),"\n",(0,r.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=9Yjy",title:"Detect security violations in code with Semgrep",width:"100%",height:"432px",frameBorder:"0"}),"\n",(0,r.jsx)(t.h3,{id:"scan-configuration-files-using-json-yaml-or-generic-pattern-matching",children:"Scan configuration files using JSON, YAML, or Generic pattern matching"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Time to write this rule: ",(0,r.jsx)(t.strong,{children:"10 minutes"})]})}),"\n",(0,r.jsxs)(t.p,{children:["Semgrep ",(0,r.jsx)(t.a,{href:"/semgrep-docs/supported-languages",children:"natively supports JSON and YAML"})," and can be used to write rules for configuration files. This rule checks for skipped TLS verification in Kubernetes clusters."]}),"\n",(0,r.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=rEqJ",title:"Match configuration files with Semgrep",width:"100%",height:"432px",frameBorder:"0"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.a,{href:"/writing-rules/generic-pattern-matching",children:"Generic pattern matching"})," mode is for languages and file formats that Semgrep does not natively support. For example, you can write rules for Dockerfiles using the generic mode. The Dockerfile rule below checks for invalid port numbers."]}),"\n",(0,r.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=NGXN",title:"Match Dockerfiles with Semgrep",width:"100%",height:"432px",frameBorder:"0"}),"\n",(0,r.jsx)(t.h3,{id:"enforce-authentication-patterns",children:"Enforce authentication patterns"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Time to write this rule: ",(0,r.jsx)(t.strong,{children:"15 minutes"})]})}),"\n",(0,r.jsx)(t.p,{children:'If a project has a "correct" way of doing authentication, Semgrep can be used to enforce this so that authentication mishaps do not happen. In the example below, this Flask app requires an authentication decorator on all routes. The rule detects routes that are missing authentication decorators. If deployed in CI/CD pipelines, Semgrep can block undecorated routes or flag a security member for further investigation.'}),"\n",(0,r.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=wEQd",title:"Enforce authentication patterns in code with Semgrep",width:"100%",height:"432px",frameBorder:"0"}),"\n",(0,r.jsx)(t.h3,{id:"systematize-project-specific-coding-patterns",children:"Systematize project-specific coding patterns"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Time to write this rule: ",(0,r.jsx)(t.strong,{children:"10 minutes"})]})}),"\n",(0,r.jsx)(t.p,{children:"Automate institutional knowledge using Semgrep. This has several benefits, including teaching new members about coding patterns in an automatic way and keeping a project up-to-date with coding patterns. If you keep coding guidelines in a document, converting these into Semgrep rules is a great way to free developers from having to remember all the guidelines."}),"\n",(0,r.jsxs)(t.p,{children:["In this example, a legacy API requires calling ",(0,r.jsx)(t.code,{children:"verify_transaction(t)"})," before calling ",(0,r.jsx)(t.code,{children:"make_transaction(t)"}),". The Semgrep rule below detects when these methods are not called correctly."]}),"\n",(0,r.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=Nr3z",title:"Systematize project-specific coding patterns with Semgrep",width:"100%",height:"432px",frameBorder:"0"}),"\n",(0,r.jsx)(t.h3,{id:"extract-information-with-metavariables",children:"Extract information with metavariables"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Time to write this rule: ",(0,r.jsx)(t.strong,{children:"15 minutes"})]})}),"\n",(0,r.jsxs)(t.p,{children:["Semgrep metavariables can be used as output in the ",(0,r.jsx)(t.code,{children:"message"})," key. This can be used to extract and collate information about a codebase. Click through to ",(0,r.jsx)(t.a,{href:"https://semgrep.dev/s/ORpk",children:"this example"})," which extracts Java Spring routes. This can be used to quickly see all the exposed routes of an application."]}),"\n",(0,r.jsx)(t.h3,{id:"burn-down-deprecated-apis",children:"Burn down deprecated APIs"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Time to write this rule: ",(0,r.jsx)(t.strong,{children:"5 minutes"})]})}),"\n",(0,r.jsx)(t.p,{children:"Semgrep can detect deprecated APIs just as easily as dangerous APIs. Identifying deprecated API calls can help an application migrate to current or future versions."}),"\n",(0,r.jsx)(t.p,{children:"This rule example detects a function that is deprecated as of Django 4.0."}),"\n",(0,r.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=vEQ0",title:"Burn down deprecated APIs with Semgrep",width:"100%",height:"432px",frameBorder:"0"}),"\n",(0,r.jsx)(t.h3,{id:"promote-secure-alternatives",children:"Promote secure alternatives"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Time to write this rule: ",(0,r.jsx)(t.strong,{children:"5 minutes"})]})}),"\n",(0,r.jsxs)(t.p,{children:["Some libraries or APIs have safe alternatives, such as ",(0,r.jsxs)(t.a,{href:"https://github.com/google/re2",children:["Google's ",(0,r.jsx)(t.code,{children:"re2"})]}),", an implementation of the standard ",(0,r.jsx)(t.code,{children:"re"})," interface that ships with Python that is resistant to regular expression denial-of-service. This rule detects the use of ",(0,r.jsx)(t.code,{children:"re"})," and recommends ",(0,r.jsx)(t.code,{children:"re2"})," as a safe alternative with the same interface."]}),"\n",(0,r.jsx)("iframe",{src:"https://semgrep.dev/embed/editor?snippet=ZoA4",title:"Promote secure alternatives with Semgrep",width:"100%",height:"432px",frameBorder:"0"}),"\n",(0,r.jsx)(t.h2,{id:"prompts-for-writing-custom-rules",children:"Prompts for writing custom rules"}),"\n",(0,r.jsx)(t.p,{children:"Try answering these questions to uncover important rules for your project."}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"From recent post mortems: what code issues contributed to it?"}),"\n",(0,r.jsx)(t.li,{children:"[XYZ] is a (security, performance, other) library that everyone should use, but they don\u2019t consistently."}),"\n",(0,r.jsx)(t.li,{children:"When you review code, what changes do you frequently ask for?"}),"\n",(0,r.jsx)(t.li,{children:"What vulnerability classes from bug bounty submissions reoccur (or appear in different places of the codebase)?"}),"\n",(0,r.jsx)(t.li,{children:"Are there engineering or performance patterns? Consistent exception handlers?"}),"\n",(0,r.jsx)(t.li,{children:"What issues were caused by misconfigurations in Infrastructure-as-Code files (JSON)?"}),"\n",(0,r.jsx)(t.li,{children:"What are some \u201cinvariants\u201d that should hold about your code - things that should always or never be true (e.g. every admin route checks if user is admin)?"}),"\n",(0,r.jsx)(t.li,{children:"What methods/APIs are deprecated and you\u2019re trying to move away from?"}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},82196:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/semgrep-ci-4c94be66f30fef156679254592d3e2b1.gif"}}]);