"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[87090],{659:e=>{e.exports=JSON.parse('{"permalink":"/docs/release-notes/april-2021","source":"@site/release-notes/april-2021.md","title":"April 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-04-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":2.415,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"April 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","slug":"april-2021","append_help_link":true,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-04-30T10:00"},"unlisted":false,"prevItem":{"title":"May 2021","permalink":"/docs/release-notes/may-2021"},"nextItem":{"title":"Older updates","permalink":"/docs/release-notes/all-release-notes"}}')},28453:(e,s,i)=>{i.d(s,{R:()=>l,x:()=>a});var n=i(96540);const t={},r=n.createContext(t);function l(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(r.Provider,{value:s},e.children)}},74165:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>n,toc:()=>d});var n=i(659),t=i(74848),r=i(28453);const l={title:"April 2021",description:"Release notes include the changes, fixes, and additions in specific versions of Semgrep.",slug:"april-2021",append_help_link:!0,tags:["Release notes"],hide_table_of_contents:!1,date:"2021-04-30T10:00"},a="April 2021",o={authorsImageUrls:[]},d=[{value:"Version 0.49.0",id:"version-0490",level:2},{value:"Additions",id:"additions",level:3},{value:"Fixes",id:"fixes",level:3},{value:"Changes",id:"changes",level:3},{value:"Version 0.48.0",id:"version-0480",level:2},{value:"Additions",id:"additions-1",level:3},{value:"Fixes",id:"fixes-1",level:3},{value:"Changes",id:"changes-1",level:3},{value:"Version 0.47.0",id:"version-0470",level:2},{value:"Additions",id:"additions-2",level:3},{value:"Fixes",id:"fixes-2",level:3},{value:"Version 0.46.0",id:"version-0460",level:2},{value:"Additions",id:"additions-3",level:3},{value:"Fixes",id:"fixes-3",level:3},{value:"Changes",id:"changes-2",level:3},{value:"Version 0.45.0",id:"version-0450",level:2},{value:"Additions",id:"additions-4",level:3},{value:"Fixes",id:"fixes-4",level:3}];function h(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"The following updates were made to Semgrep in April 2021."}),"\n",(0,t.jsx)(s.h2,{id:"version-0490",children:"Version 0.49.0"}),"\n",(0,t.jsx)(s.h3,{id:"additions",children:"Additions"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Support for matching multiple arguments with a metavariable (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3009",children:"#3009"}),'). This is done with a "spread metavariable" operator that looks like $...ARGS. This used to be available only for JavaScript and TypeScript, and is now available for the other languages (Python, Java, Go, C, Ruby, PHP, and OCaml).']}),"\n",(0,t.jsxs)(s.li,{children:['A new --optimizations [STR] command-line flag to turn on or off some optimizations. Use "none" to turn off everything and "all" to turn on everything. Just using ',(0,t.jsx)(s.code,{children:"--optimizations"})," is equivalent to ",(0,t.jsx)(s.code,{children:"--optimizations"})," all, and not using ",(0,t.jsx)(s.code,{children:"--optimizations"})," is equivalent to ",(0,t.jsx)(s.code,{children:"--optimizations"})," none."]}),"\n",(0,t.jsxs)(s.li,{children:["JavaScript/TypeScript: Support ",(0,t.jsx)(s.code,{children:"..."})," inside JSX text to match any text, as in ",(0,t.jsx)(s.code,{children:'<a href="foo">...</a>'}),". (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/2963",children:"#2963"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:["JavaScript/TypeScript: Support metavariables for JSX attribute values, as in ",(0,t.jsx)(s.code,{children:"<a href=$X>some text</a>"}),". (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/2964",children:"#2964"}),")"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"fixes",children:"Fixes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Python: correctly parsing fstring with multiple colons"}),"\n",(0,t.jsxs)(s.li,{children:["Ruby: better matching for interpolated strings (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/2826",children:"#2826"})," and",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/2949",children:"#2949"}),")"]}),"\n",(0,t.jsx)(s.li,{children:"Ruby: correctly matching numbers"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"changes",children:"Changes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Add required executionSuccessful attribute to SARIF output (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/2983",children:"#2983"}),"). Thanks to",(0,t.jsx)(s.a,{href:"https://github.com/simon-engledew",children:"Simon Engledew"}),"!"]}),"\n",(0,t.jsxs)(s.li,{children:["Remove jsx and tsx from languages, instead just use javascript or typescript (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3000",children:"#3000"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:["Add limit max characters in the output line (#2958) and add a flag to control maximum characters (defaults to 160). Thanks to",(0,t.jsx)(s.a,{href:"https://github.com/ankush",children:"Ankush Menat"}),"!"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"version-0480",children:"Version 0.48.0"}),"\n",(0,t.jsx)(s.h3,{id:"additions-1",children:"Additions"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Taint mode: Basic cross-function analysis (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/2913",children:"#2913"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:["Support for the new Java record extension and Java symbols with accented characters (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/2704",children:"#2704"}),")"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"fixes-1",children:"Fixes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Capturing functions when used as both expressions and statements in JavaScript (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/1007",children:"#1007"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:["Literal for ocaml tree sitter (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/2885",children:"#2885"}),")"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"changes-1",children:"Changes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"The extra lines data is now consistent across scan types (e.g., semgrep-core, spacegrep, pattern-regex)"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"version-0470",children:"Version 0.47.0"}),"\n",(0,t.jsx)(s.h3,{id:"additions-2",children:"Additions"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Java: support of for(...)"}),"\n",(0,t.jsxs)(s.li,{children:["Rust: Semgrep patterns now support top-level statements (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/2910",children:"#2910"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:["Support for UTF-8 code with non-ASCII chars (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/2944",children:"#2944"}),")"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"fixes-2",children:"Fixes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Single field pattern in JSON, allowing $FLD: { ... } pattern"}),"\n",(0,t.jsx)(s.li,{children:"Config detection in files with many suffix delimiters, like this.that.check.yaml. More concretely: configs end with .yaml, YAML language tests end with .test.yaml, and everything else is handled by its respective language extension (e.g., .py)."}),"\n",(0,t.jsx)(s.li,{children:"Single array field in YAML in a pattern is parsed as a field, not a one element array"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"version-0460",children:"Version 0.46.0"}),"\n",(0,t.jsx)(s.h3,{id:"additions-3",children:"Additions"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"YAML language support to --test"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"fixes-3",children:"Fixes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"SARIF output now nests invocations inside runs"}),"\n",(0,t.jsx)(s.li,{children:"Go backslashed carets in regexes can be parsed"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"changes-2",children:"Changes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Deep expression matches (<... foo ...>) now match within the bodies of anonymous functions (a.k.a. lambda-expressions) and arbitrary language-specific statements (e.g., the Golang go statement)"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"version-0450",children:"Version 0.45.0"}),"\n",(0,t.jsx)(s.h3,{id:"additions-4",children:"Additions"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["--experimental flag for passing rules directly to semgrep-core (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/2836",children:"#2836"}),")"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"fixes-4",children:"Fixes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Ellipses in template strings don't match string literals (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/2780",children:"#2780"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:["Go: correctly parse select/switch clauses like in tree-sitter (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/2847",children:"#2847"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:["Go: parse correctly 'for ...' header in Go patterns (",(0,t.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/2838",children:"#2838"}),")"]}),"\n"]})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);