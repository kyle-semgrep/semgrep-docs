"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[2316],{28453:(e,i,r)=>{r.d(i,{R:()=>n,x:()=>o});var s=r(96540);const t={},a=s.createContext(t);function n(e){const i=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:n(e.components),s.createElement(a.Provider,{value:i},e.children)}},84353:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>n,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"kb/semgrep-code/gitlab-group-variables","title":"My GitLab pipeline says that the token is invalid, but it is valid","description":"This may be occurring because SEMGREP_APP_TOKEN is set as a group variable.","source":"@site/docs/kb/semgrep-code/gitlab-group-variables.md","sourceDirName":"kb/semgrep-code","slug":"/kb/semgrep-code/gitlab-group-variables","permalink":"/semgrep-docs/kb/semgrep-code/gitlab-group-variables","draft":false,"unlisted":false,"editUrl":"https://github.com/semgrep/semgrep-docs/edit/main/docs/kb/semgrep-code/gitlab-group-variables.md","tags":[{"inline":true,"label":"GitLab","permalink":"/semgrep-docs/tags/git-lab"},{"inline":true,"label":"Semgrep Code","permalink":"/semgrep-docs/tags/semgrep-code"}],"version":"current","lastUpdatedAt":1715891817000,"frontMatter":{"description":"This may be occurring because SEMGREP_APP_TOKEN is set as a group variable.","tags":["GitLab","Semgrep Code"],"append_help_link":true},"sidebar":"kbSidebar","previous":{"title":"Why isn\u2019t Semgrep reporting all my tainted data flows?","permalink":"/semgrep-docs/kb/semgrep-code/finding_all_taints"},"next":{"title":"Semgrep support for all versions of a language","permalink":"/semgrep-docs/kb/semgrep-code/support-for-language-versions"}}');var t=r(74848),a=r(28453);const n={description:"This may be occurring because SEMGREP_APP_TOKEN is set as a group variable.",tags:["GitLab","Semgrep Code"],append_help_link:!0},o="My GitLab pipeline says that the token is invalid, but it is valid",l={},c=[];function p(e){const i={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"my-gitlab-pipeline-says-that-the-token-is-invalid-but-it-is-valid",children:"My GitLab pipeline says that the token is invalid, but it is valid"})}),"\n",(0,t.jsxs)(i.p,{children:["If you've checked the value of your ",(0,t.jsx)(i.code,{children:"SEMGREP_APP_TOKEN"})," and have confirmed that it is valid, you may still see invalid token errors if both of the following are true:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Your variable is set as a group variable."}),"\n",(0,t.jsxs)(i.li,{children:["Your configuration explicitly references ",(0,t.jsx)(i.code,{children:"SEMGREP_APP_TOKEN"})," in the ",(0,t.jsx)(i.code,{children:"variables"})," section."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["There is a ",(0,t.jsx)(i.a,{href:"https://gitlab.com/gitlab-org/gitlab/-/issues/199741",children:"known issue"})," where group variables are accessible to projects but are not resolved by GitLab's runners."]}),"\n",(0,t.jsxs)(i.p,{children:["Semgrep's ",(0,t.jsx)(i.a,{href:"https://semgrep.dev/docs/semgrep-ci/sample-ci-configs/#gitlab-cicd",children:"default configuration"})," recommends setting the variable as a project or repository variable. Project variables are properly resolved by GitLab's runners."]}),"\n",(0,t.jsxs)(i.p,{children:["If you prefer to use a group variable, remove the explicit reference to ",(0,t.jsx)(i.code,{children:"SEMGREP_APP_TOKEN"})," from your ",(0,t.jsx)(i.code,{children:".gitlab-ci.yml"})," file. For example, the default configuration would look like this after the change:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yml",children:'semgrep:\n  image: semgrep/semgrep\n  script: semgrep ci\n  rules:\n  - if: $CI_PIPELINE_SOURCE == "web"  # allow triggering a scan manually from the gitlab UI\n  - if: $CI_MERGE_REQUEST_IID\n  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n'})}),"\n",(0,t.jsx)(i.p,{children:"Without the explicit reference failing to resolve, GitLab's runners identify and use the correct value."})]})}function d(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);