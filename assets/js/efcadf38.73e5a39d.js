"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[40009],{10064:(e,n,t)=>{t.d(n,{Ay:()=>c,RM:()=>s});var i=t(74848),r=t(28453);const s=[];function o(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The following command runs an optimized set of rules for your project:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"semgrep --config p/default\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},21250:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var i=t(74848);function r(e){let{ruleId:n}=e;const t=new URL("https://semgrep.dev/r");return t.searchParams.set("q",n),(0,i.jsx)("a",{href:t,target:"_blank",children:n})}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(96540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},41583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"cheat-sheets/python-code-injection","title":"Code injection prevention for Python","description":"Code injection prevention cheat sheet for Python.","source":"@site/docs/cheat-sheets/python-code-injection.mdx","sourceDirName":"cheat-sheets","slug":"/cheat-sheets/python-code-injection","permalink":"/semgrep-docs/cheat-sheets/python-code-injection","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/cheat-sheets/python-code-injection.mdx","tags":[],"version":"current","lastUpdatedAt":1753220396000,"frontMatter":{"slug":"python-code-injection","description":"Code injection prevention cheat sheet for Python."},"sidebar":"cheatsheetSidebar","previous":{"title":"Code injection prevention for JavaScript","permalink":"/semgrep-docs/cheat-sheets/javascript-code-injection"},"next":{"title":"Code injection prevention for Ruby","permalink":"/semgrep-docs/cheat-sheets/ruby-code-injection"}}');var r=t(74848),s=t(28453),o=t(21250),c=t(53124),l=t(10064);const a={slug:"python-code-injection",description:"Code injection prevention cheat sheet for Python."},d="Code injection prevention for Python",u={},h=[...c.RM,{value:"Check your project using Semgrep",id:"check-your-project-using-semgrep",level:3},...l.RM,{value:"1. Executing or evaluating code",id:"1-executing-or-evaluating-code",level:2},{value:"1.A. Executing code with exec",id:"1a-executing-code-with-exec",level:3},{value:"References",id:"references",level:4},{value:"Mitigation",id:"mitigation",level:4},{value:"Semgrep rule",id:"semgrep-rule",level:4},{value:"1.B. Evaluating code with eval",id:"1b-evaluating-code-with-eval",level:3},{value:"References",id:"references-1",level:4},{value:"Mitigation",id:"mitigation-1",level:4},{value:"Semgrep rule",id:"semgrep-rule-1",level:4},{value:"1.C. Accepting logging configuration with logging.config.listen()",id:"1c-accepting-logging-configuration-with-loggingconfiglisten",level:3},{value:"References",id:"references-2",level:4},{value:"Mitigation",id:"mitigation-2",level:4},{value:"Semgrep rule",id:"semgrep-rule-2",level:4},{value:"1.D. Running code in an interactive interpreter",id:"1d-running-code-in-an-interactive-interpreter",level:3},{value:"References",id:"references-3",level:4},{value:"Mitigation",id:"mitigation-3",level:4},{value:"Semgrep rule",id:"semgrep-rule-3",level:4},{value:"1.E. Using subinterpreter to run code",id:"1e-using-subinterpreter-to-run-code",level:3},{value:"References",id:"references-4",level:4},{value:"Mitigation",id:"mitigation-4",level:4},{value:"Semgrep rule",id:"semgrep-rule-4",level:4},{value:"1.F. Running subinterpreter from regression tests package",id:"1f-running-subinterpreter-from-regression-tests-package",level:3},{value:"References",id:"references-5",level:4},{value:"Mitigation",id:"mitigation-5",level:4},{value:"Semgrep rule",id:"semgrep-rule-5",level:4},{value:"2. Abusing built-in functions",id:"2-abusing-built-in-functions",level:2},{value:"2.A. Accessing dictionary with current global or local symbol table",id:"2a-accessing-dictionary-with-current-global-or-local-symbol-table",level:3},{value:"References",id:"references-6",level:4},{value:"Mitigation",id:"mitigation-6",level:4},{value:"Semgrep rule",id:"semgrep-rule-6",level:4},{value:"2.B. Dynamically updating and accessing code annotations",id:"2b-dynamically-updating-and-accessing-code-annotations",level:3},{value:"References",id:"references-7",level:4},{value:"Mitigation",id:"mitigation-7",level:4},{value:"Semgrep rule",id:"semgrep-rule-7",level:4}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"code-injection-prevention-for-python",children:"Code injection prevention for Python"})}),"\n",(0,r.jsx)(c.Ay,{}),"\n",(0,r.jsx)(n.h3,{id:"check-your-project-using-semgrep",children:"Check your project using Semgrep"}),"\n",(0,r.jsx)(l.Ay,{}),"\n",(0,r.jsx)(n.h2,{id:"1-executing-or-evaluating-code",children:"1. Executing or evaluating code"}),"\n",(0,r.jsx)(n.h3,{id:"1a-executing-code-with-exec",children:"1.A. Executing code with exec"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"exec()"})," function supports the dynamic execution of Python code. The ",(0,r.jsx)(n.code,{children:"exec()"})," function can be dangerous if it is used to execute dynamic content (non-literal content). If this dynamic content has an input controllable by a user, it can cause a code injection vulnerability."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Value supplied by user\nuser_input = \"');import requests;requests.get('localhost:3000');print('\"\n\n# Vulnerable\nexec(\"foobar('{}')\".format(user_input))\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.python.org/3/library/functions.html#exec",children:"exec documentation"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Do not use ",(0,r.jsx)(n.code,{children:"exec()"})," for non-literal values. Alternatively:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure executed content is not controllable by external sources."}),"\n",(0,r.jsx)(n.li,{children:"If it's not possible, strip everything except alphanumeric characters from the input."}),"\n",(0,r.jsxs)(n.li,{children:["Don't try to make ",(0,r.jsx)(n.code,{children:"exec"})," safe with tricks such as ",(0,r.jsx)(n.code,{children:"{'__builtins__':{}}"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule",children:"Semgrep rule"}),"\n",(0,r.jsx)(o.A,{ruleId:"python.lang.security.audit.exec-detected.exec-detected"}),"\n",(0,r.jsx)(n.h3,{id:"1b-evaluating-code-with-eval",children:"1.B. Evaluating code with eval"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"eval()"})," function supports the dynamic execution of Python code. The ",(0,r.jsx)(n.code,{children:"eval()"})," can be dangerous if it is used to execute dynamic content (non-literal content). If this dynamic content has an input controllable by a user, it can cause a code injection vulnerability."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Value supplied by user\nuser_input = \"__import__('code').InteractiveInterpreter().runsource('import requests;requests.get(\\'localhost:3000\\')')\"\n\n# Vulnerable\neval(user_input)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-1",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://docs.python.org/3/library/functions.html#eval",children:[(0,r.jsx)(n.strong,{children:"eval()"})," documentation"]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-1",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Do not use ",(0,r.jsx)(n.code,{children:"eval()"}),". Alternatively:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If you need to use ",(0,r.jsx)(n.code,{children:"eval()"})," with non-literal values, ensure that executed content is not controllable by external sources."]}),"\n",(0,r.jsx)(n.li,{children:"If it's not possible, strip everything except alphanumeric characters from the input."}),"\n",(0,r.jsxs)(n.li,{children:["Don't try to make ",(0,r.jsx)(n.code,{children:"eval"})," safe with tricks such as ",(0,r.jsx)(n.code,{children:"{'__builtins__':{}}"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-1",children:"Semgrep rule"}),"\n",(0,r.jsx)(o.A,{ruleId:"python.lang.security.audit.eval-detected.eval-detected"}),"\n",(0,r.jsx)(n.h3,{id:"1c-accepting-logging-configuration-with-loggingconfiglisten",children:"1.C. Accepting logging configuration with logging.config.listen()"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"logging.config.listen()"})," function starts a socket server on the specified port, and listens for new configurations.\nAs the ",(0,r.jsx)(n.code,{children:"logging.config.listen()"})," configuration is passed through ",(0,r.jsx)(n.code,{children:"eval()"}),", the use of this function can lead to a security risk.\nWhile the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code can potentially run under the account of the process which calls ",(0,r.jsx)(n.code,{children:"listen()"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Server example: starting up a socket server on 9999 port, and listening for new configurations.\nimport logging\nimport logging.config\n\nlogging.config.fileConfig(\'logging.conf\')\nt = logging.config.listen(9999)\nt.start()\n\n\n# Client example: sending configuration from `data_to_send` variable to localhost:9999\nimport socket, sys, struct\n\n# Config example: print("pwned") is evaluated and "pwned" is printed to the console\ndata_to_send = """\n[loggers]\nkeys=root\n\n[handlers]\nkeys=hand01\n\n[formatters]\nkeys=form01\n\n[logger_root]\nlevel=NOTSET\nhandlers=hand01\n\n[handler_hand01]\nclass=StreamHandler\nlevel=NOTSET\nformatter=form01\nargs=(print("pwned"),)\n\n[formatter_form01]\nformat=F1 %(asctime)s %(levelname)s %(message)s\ndatefmt=\nclass=logging.Formatter\n"""\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((\'localhost\', 9999))\ns.send(struct.pack(\'>L\', len(data_to_send)))\ns.send(data_to_send)\ns.close()\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-2",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://docs.python.org/3/library/logging.config.html#logging.config.listen",children:[(0,r.jsx)(n.code,{children:"logging.config.listen()"})," documentation"]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-2",children:"Mitigation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verify what is sent across the socket."}),"\n",(0,r.jsxs)(n.li,{children:["Alternatively: To avoid the risk, verify the argument to ",(0,r.jsx)(n.code,{children:"logging.config.listen()"})," to prevent applying unrecognized configurations. This can be done by encrypting or signing what is sent across the socket, such that the verify callable can perform signature verification or decryption."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-2",children:"Semgrep rule"}),"\n",(0,r.jsx)(o.A,{ruleId:"python.lang.security.audit.logging.listeneval.listen-eval"}),"\n",(0,r.jsx)(n.h3,{id:"1d-running-code-in-an-interactive-interpreter",children:"1.D. Running code in an interactive interpreter"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"code"})," module provides read-eval-print loops in Python. Two classes are included to provide interactive prompts, the ",(0,r.jsx)(n.code,{children:"InteractiveInterpreter"})," and the ",(0,r.jsx)(n.code,{children:"InteractiveConsole"}),". Both methods can execute Python code: ",(0,r.jsx)(n.code,{children:"InteractiveInterpreter.runcode"})," executes a code object and ",(0,r.jsx)(n.code,{children:"InteractiveConsole.push"})," interprets a string as Python code. This is dangerous if external data reaches these function calls as it allows a malicious actor to run arbitrary Python code."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import code\n\n# Value supplied by user\nuser_input = \"print('pwned')\"\nconsole = code.InteractiveConsole()\n# Vulnerable\nconsole.push(user_input)\n\n# Value supplied by user\nuser_input = \"print('pwned')\"\ninterpreter = code.InteractiveInterpreter()\n# Vulnerable\ninterpreter.runcode(code.compile_command(user_input))\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-3",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://docs.python.org/3/library/code.html",children:[(0,r.jsx)(n.code,{children:"code"})," module documentation"]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-3",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Do not let the user input in ",(0,r.jsx)(n.code,{children:"InteractiveInterpreter"})," or ",(0,r.jsx)(n.code,{children:"InteractiveConsole"})," methods. Alternatively:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure that content that Python interprets is not controllable by external sources."}),"\n",(0,r.jsx)(n.li,{children:"If it's not possible, strip everything except alphanumeric characters from the input."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-3",children:"Semgrep rule"}),"\n",(0,r.jsx)(o.A,{ruleId:"python.lang.security.audit.dangerous-code-run.dangerous-interactive-code-run"}),"\n",(0,r.jsx)(n.h3,{id:"1e-using-subinterpreter-to-run-code",children:"1.E. Using subinterpreter to run code"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"_xxsubinterpreters.run_string"})," is an internal Python function that interprets the string as Python code. This causes a code injection vulnerability when unverified user data reaches ",(0,r.jsx)(n.code,{children:"run_string"}),". A malicious actor can inject a malicious string to execute arbitrary Python code."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import _xxsubinterpreters\n\n# Value supplied by user\nuser_input = \"print('pwned')\"\n\n# Vulnerable\n_xxsubinterpreters.run_string(_xxsubinterpreters.create(), user_input)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-4",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://pythondev.readthedocs.io/subinterpreters.html",children:[(0,r.jsx)(n.strong,{children:"subinterpreters"})," documentation"]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-4",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Do not let a user input in ",(0,r.jsx)(n.code,{children:"_xxsubinterpreters"})," methods. Alternatively:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure that content that Python interprets is not controllable by external sources."}),"\n",(0,r.jsx)(n.li,{children:"If it\u2019s not possible, strip everything except alphanumeric characters from the input."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-4",children:"Semgrep rule"}),"\n",(0,r.jsx)(o.A,{ruleId:"python.lang.security.audit.dangerous-subinterpreters-run-string.dangerous-subinterpreters-run-string"}),"\n",(0,r.jsx)(n.h3,{id:"1f-running-subinterpreter-from-regression-tests-package",children:"1.F. Running subinterpreter from regression tests package"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"run_in_subinterp"})," is a function from a Python regression tests package (",(0,r.jsx)(n.code,{children:"test"}),") that runs code in a subinterpreter. This is dangerous if external data reaches the ",(0,r.jsx)(n.code,{children:"run_in_subinterp"})," function call because it allows a malicious actor to run arbitrary Python code."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import _testcapi\n\n# Value supplied by user\nuser_input = \"print('pwned')\"\n\n# Vulnerable\n_testcapi.run_in_subinterp(user_input)\n\n\nfrom test import support\n\n# Value supplied by user\nuser_input = \"print('pwned')\"\n\n# Vulnerable\nsupport.run_in_subinterp(user_input)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-5",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://docs.python.org/3/library/test.html",children:[(0,r.jsx)(n.strong,{children:"test"})," module documentation"]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-5",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Do not let a user input in ",(0,r.jsx)(n.code,{children:"run_in_subinterp"})," function. Alternatively:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure that content that Python interprets is not controllable by external sources."}),"\n",(0,r.jsx)(n.li,{children:"If it's not possible, strip everything except alphanumeric characters from the input."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-5",children:"Semgrep rule"}),"\n",(0,r.jsx)(o.A,{ruleId:"python.lang.security.audit.dangerous-testcapi-run-in-subinterp"}),"\n",(0,r.jsx)(n.h2,{id:"2-abusing-built-in-functions",children:"2. Abusing built-in functions"}),"\n",(0,r.jsx)(n.h3,{id:"2a-accessing-dictionary-with-current-global-or-local-symbol-table",children:"2.A. Accessing dictionary with current global or local symbol table"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"globals()"})," and ",(0,r.jsx)(n.code,{children:"locals()"})," return a dictionary representing the current global or local symbol table. Using non-static data to retrieve values from this table is extremely dangerous because it can allow an attacker to execute arbitrary code on the system."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Name of the arbitrary function supplied by user\nuser_input = "Name of the function" \n\n# Vulnerable call of arbitrary function\nfunction = locals().get(user_input)\nfunction()\n\n# Name of the arbitrary function supplied by user\nuser_input = "Name of the function"\n\n# Vulnerable call of arbitrary function\nfunction = test1.__globals__[user_input]\nfunction()\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-6",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186",children:"Vulnerable code example"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://docs.python.org/3/library/functions.html#locals",children:[(0,r.jsx)(n.strong,{children:"locals()"})," documentation"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://docs.python.org/3/library/functions.html#globals",children:[(0,r.jsx)(n.strong,{children:"globals()"})," documentation"]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-6",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Do not access global or local symbol tables. Refactor your code not to use ",(0,r.jsx)(n.code,{children:"globals()"})," and ",(0,r.jsx)(n.code,{children:"locals()"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-6",children:"Semgrep rule"}),"\n",(0,r.jsx)(o.A,{ruleId:"python.lang.security.dangerous-globals-use.dangerous-globals-use"}),"\n",(0,r.jsx)(n.h3,{id:"2b-dynamically-updating-and-accessing-code-annotations",children:"2.B. Dynamically updating and accessing code annotations"}),"\n",(0,r.jsxs)(n.p,{children:["Annotations passed to the ",(0,r.jsx)(n.code,{children:"typing.get_type_hints()"})," function are evaluated in ",(0,r.jsx)(n.code,{children:"globals"})," and ",(0,r.jsx)(n.code,{children:"locals"})," namespaces. Ensure that no arbitrary value can be written as the annotation and passed to the ",(0,r.jsx)(n.code,{children:"typing.get_type_hints"})," function."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from typing import get_type_hints\n\nclass C:\n    member: int = 0\n\ndef smth():\n    # Changing annotation for `member` property of class C\n    C.__annotations__[\"member\"] = \"print('pwn')\"\n\n    # Annotations are evaluated and `print('pwn')` code gets executed\n    get_type_hints(C)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-7",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://docs.python.org/3/library/typing.html#typing.get_type_hints",children:[(0,r.jsx)(n.strong,{children:"typing.get_type_hints"})," documentation"]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-7",children:"Mitigation"}),"\n",(0,r.jsx)(n.p,{children:"Do not programmatically rewrite code annotations. Alternatively:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure that annotations are not controllable by external sources."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-7",children:"Semgrep rule"}),"\n",(0,r.jsx)(o.A,{ruleId:"python.lang.security.audit.dangerous-annotations-usage"})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},53124:(e,n,t)=>{t.d(n,{Ay:()=>c,RM:()=>s});var i=t(74848),r=t(28453);const s=[];function o(e){const n={p:"p",...(0,r.R)(),...e.components};return(0,i.jsx)(n.p,{children:"This is a code injection prevention cheat sheet by Semgrep, Inc. It contains code patterns of potential ways to run arbitrary code in an application. Instead of scrutinizing code for exploitable vulnerabilities, the recommendations in this cheat sheet pave a safe road for developers that mitigate the possibility of code injection in your code. By following these recommendations, you can be reasonably sure your code is free of code injection."})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);