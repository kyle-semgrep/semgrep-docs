"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[42309],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(96540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}},28945:e=>{e.exports=JSON.parse('{"permalink":"/docs/release-notes/november-2021","source":"@site/release-notes/november-2021.md","title":"November 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-11-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/docs/release-notes/tags/release-notes"}],"readingTime":6.575,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"november-2021","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-11-30T10:00","title":"November 2021"},"unlisted":false,"prevItem":{"title":"December 2021","permalink":"/docs/release-notes/december-2021"},"nextItem":{"title":"October 2021","permalink":"/docs/release-notes/octobers-2021"}}')},48231:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var i=s(28945),r=s(74848),t=s(28453);const a={slug:"november-2021",append_help_link:!0,hide_title:!0,description:"Release notes include the changes, fixes, and additions in specific versions of Semgrep.",toc_max_heading_level:3,tags:["Release notes"],hide_table_of_contents:!1,date:"2021-11-30T10:00",title:"November 2021"},o="November 2021",l={authorsImageUrls:[]},d=[{value:"Version 0.75.0",id:"version-0750",level:2},{value:"Fixes",id:"fixes",level:3},{value:"Semgrep CI",id:"semgrep-ci",level:4},{value:"Version v0.74.0",id:"version-v0740",level:2},{value:"Additions",id:"additions",level:3},{value:"Method chaining",id:"method-chaining",level:4},{value:"Scala",id:"scala",level:4},{value:"PHP",id:"php",level:4},{value:"<strong>Changed</strong>",id:"changed",level:3},{value:"Semgrep profiling improved",id:"semgrep-profiling-improved",level:4},{value:"Constant propagation",id:"constant-propagation",level:4},{value:"Fixes",id:"fixes-1",level:3},{value:"Ruby",id:"ruby",level:4},{value:"Generic filters exclude large and binary files",id:"generic-filters-exclude-large-and-binary-files",level:4},{value:"PHP",id:"php-1",level:4},{value:"Dataflow no longer returns false positive results for switch statements",id:"dataflow-no-longer-returns-false-positive-results-for-switch-statements",level:4},{value:"Additional information",id:"additional-information",level:3},{value:"Version 0.73.0",id:"version-0730",level:2},{value:"Additions",id:"additions-1",level:3},{value:"C++ support improved",id:"c-support-improved",level:4},{value:"Fixes",id:"fixes-2",level:3},{value:"Semgrep CI no longer fails scan with binary files",id:"semgrep-ci-no-longer-fails-scan-with-binary-files",level:4},{value:"Constant propagation improvements",id:"constant-propagation-improvements",level:4},{value:"Additional information",id:"additional-information-1",level:3},{value:"Version 0.72.0",id:"version-0720",level:2},{value:"Additions",id:"additions-2",level:3},{value:"Dataflow support enhancements",id:"dataflow-support-enhancements",level:4},{value:"JavaScript enhancements",id:"javascript-enhancements",level:4},{value:"Fixes",id:"fixes-3",level:3},{value:"Constant propagation improvement",id:"constant-propagation-improvement",level:4},{value:"Go improvements",id:"go-improvements",level:4},{value:"Scala improvements",id:"scala-improvements",level:4},{value:"Semgrep&#39;s pattern-regex now accepts unicode",id:"semgreps-pattern-regex-now-accepts-unicode",level:4},{value:"Additional fixes and improvements in this version",id:"additional-fixes-and-improvements-in-this-version",level:4},{value:"Changes",id:"changes",level:3},{value:"C support",id:"c-support",level:4},{value:"Command line interface (CLI) changes",id:"command-line-interface-cli-changes",level:4},{value:"Scanning for executable scripts with shebang",id:"scanning-for-executable-scripts-with-shebang",level:4},{value:"Additional information",id:"additional-information-2",level:3},{value:"Version 0.71.0",id:"version-0710",level:2},{value:"Additions",id:"additions-3",level:3},{value:"Fixes",id:"fixes-4",level:3},{value:"Changes",id:"changes-1",level:3},{value:"Additional information",id:"additional-information-3",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The following updates were made to Semgrep in November 2021."}),"\n",(0,r.jsx)(n.h2,{id:"version-0750",children:"Version 0.75.0"}),"\n",(0,r.jsx)(n.h3,{id:"fixes",children:"Fixes"}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-ci",children:"Semgrep CI"}),"\n",(0,r.jsxs)(n.p,{children:["In Semgrep CI, the option ",(0,r.jsx)(n.code,{children:"--disable-nosem"})," now tags findings with the ",(0,r.jsx)(n.code,{children:"is_ignored"})," option correctly. Previously, an optimization from version 0.74.0 left the field ",(0,r.jsx)(n.code,{children:"None"})," when the described option has been used. The optimization has been reverted."]}),"\n",(0,r.jsx)(n.h2,{id:"version-v0740",children:"Version v0.74.0"}),"\n",(0,r.jsx)(n.h3,{id:"additions",children:"Additions"}),"\n",(0,r.jsx)(n.h4,{id:"method-chaining",children:"Method chaining"}),"\n",(0,r.jsxs)(n.p,{children:["Semgrep now supports method chaining patterns in Python, Go, Ruby, and C#. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/4300",children:"#4300"}),")"]}),"\n",(0,r.jsx)(n.h4,{id:"scala",children:"Scala"}),"\n",(0,r.jsxs)(n.p,{children:["Semgrep now translates infix operations as regular method calls, enabling patterns similar to: ",(0,r.jsx)(n.code,{children:"$X.map($F)"})," to also match code written as ",(0,r.jsx)(n.code,{children:"xs map f"}),". (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4290",children:"#4290"}),")"]}),"\n",(0,r.jsx)(n.h4,{id:"php",children:"PHP"}),"\n",(0,r.jsxs)(n.p,{children:["Semgrep now supports parsing method patterns. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/4262",children:"#4262"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"changed",children:(0,r.jsx)(n.strong,{children:"Changed"})}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-profiling-improved",children:"Semgrep profiling improved"}),"\n",(0,r.jsxs)(n.p,{children:["Semgrep is now more efficiently measuring its performance. The new ",(0,r.jsx)(n.code,{children:"profiling_times"})," object in ",(0,r.jsx)(n.code,{children:"--time --json"})," output enables better visibility of slowly performing Semgrep code."]}),"\n",(0,r.jsx)(n.h4,{id:"constant-propagation",children:"Constant propagation"}),"\n",(0,r.jsxs)(n.p,{children:["In constant propagation, Python strings are now evaluated as string literals. You can now match any kind of Python string (raw, byte, or unicode) by the ",(0,r.jsx)(n.code,{children:'"..."'})," operator. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/3881",children:"#3881"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"fixes-1",children:"Fixes"}),"\n",(0,r.jsx)(n.h4,{id:"ruby",children:"Ruby"}),"\n",(0,r.jsxs)(n.p,{children:["Ruby blocks are now represented with an extra function call in Semgrep's generic abstract syntax tree (AST) so that both ",(0,r.jsx)(n.code,{children:"f(...)"})," and ",(0,r.jsx)(n.code,{children:"f($X)"})," correctly match ",(0,r.jsx)(n.code,{children:"f(x)"})," in ",(0,r.jsx)(n.code,{children:"f(x) { |n| puts n }"}),". (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/3880",children:"#3880"}),")"]}),"\n",(0,r.jsx)(n.h4,{id:"generic-filters-exclude-large-and-binary-files",children:"Generic filters exclude large and binary files"}),"\n",(0,r.jsx)(n.p,{children:"Generic filters exclude large files and binary files to 'generic' and 'regex' targets as it was already done for the other languages."}),"\n",(0,r.jsx)(n.h4,{id:"php-1",children:"PHP"}),"\n",(0,r.jsxs)(n.p,{children:["An issue with stack overflow when using ",(0,r.jsx)(n.code,{children:"-filter_irrelevant_rules"})," has been fixed. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/4305",children:"#4305"}),")"]}),"\n",(0,r.jsx)(n.h4,{id:"dataflow-no-longer-returns-false-positive-results-for-switch-statements",children:"Dataflow no longer returns false positive results for switch statements"}),"\n",(0,r.jsxs)(n.p,{children:["When a ",(0,r.jsx)(n.code,{children:"switch"})," was not followed by another statement, and the last statement of the default case of the ",(0,r.jsx)(n.code,{children:"switch"})," was a statement, such as ",(0,r.jsx)(n.code,{children:"throw"}),", that could exit the execution of the current function. This caused unresolved ",(0,r.jsx)(n.code,{children:"break"})," statements in the ",(0,r.jsx)(n.code,{children:"switch"})," during the construction of the control flow graph (CFG). One of the possible consequences could be that constant propagation incorrectly flagged variables as constants. This issue has now been fixed. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/4265",children:"#4265"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"additional-information",children:"Additional information"}),"\n",(0,r.jsxs)(n.p,{children:["To view the original release information, see ",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/releases/tag/v0.72.0",children:"the changelog of this release on GitHub"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"version-0730",children:"Version 0.73.0"}),"\n",(0,r.jsx)(n.h3,{id:"additions-1",children:"Additions"}),"\n",(0,r.jsx)(n.h4,{id:"c-support-improved",children:"C++ support improved"}),"\n",(0,r.jsx)(n.p,{children:"With this release, Semgrep has improved the C++ parsing rate from 72.9% to 94.6%. Parsing rate is calculated as the number of lines Semgrep successfully parses in a corpus of popular GitHub repos."}),"\n",(0,r.jsx)(n.h3,{id:"fixes-2",children:"Fixes"}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-ci-no-longer-fails-scan-with-binary-files",children:"Semgrep CI no longer fails scan with binary files"}),"\n",(0,r.jsxs)(n.p,{children:["Before this update, Semgrep sometimes reported ",(0,r.jsx)(n.code,{children:"Pcre.Error(BadUTF8) error"})," when it tried to analyze PNG, TTF, EOT or WOFF, zip, tar, and other binary files. As a consequence, scans failed when binary files were present. With this update, the underlying issue has been fixed, and Semgrep skips binary files. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/4258",children:"#4258"}),")"]}),"\n",(0,r.jsx)(n.h4,{id:"constant-propagation-improvements",children:"Constant propagation improvements"}),"\n",(0,r.jsx)(n.p,{children:'Previously, Semgrep\'s constant propagation handled specific corner cases by raising an "impossible" error. Constant propagation now handles corner cases more gracefully instead of raising errors.'}),"\n",(0,r.jsx)(n.h3,{id:"additional-information-1",children:"Additional information"}),"\n",(0,r.jsxs)(n.p,{children:["To view the original release information, see ",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/releases/tag/v0.73.0",children:"the changelog of this release on GitHub"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"version-0720",children:"Version 0.72.0"}),"\n",(0,r.jsx)(n.h3,{id:"additions-2",children:"Additions"}),"\n",(0,r.jsx)(n.h4,{id:"dataflow-support-enhancements",children:"Dataflow support enhancements"}),"\n",(0,r.jsx)(n.p,{children:"Semgrep's Dataflow engine now tracks data flow through the following constructs:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"synchronize"})," (Java) and ",(0,r.jsx)(n.code,{children:"lock"})," (C#) blocks. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/4150",children:"#4150"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"await"})," and ",(0,r.jsx)(n.code,{children:"yield"})," expressions (for example JavaScript and Python)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"&amp;"})," expression (for example C, C++, and Go)."]}),"\n",(0,r.jsxs)(n.li,{children:["Other language constructs are represented by ",(0,r.jsx)(n.code,{children:"OtherExpr"})," in the Generic Abstract Syntax Tree (AST)."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"javascript-enhancements",children:"JavaScript enhancements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Field-definition-as-assignment equivalence allows matching expression patterns against field definitions. This functionality is disabled by default. Enable it with the following rule option: ",(0,r.jsx)(n.code,{children:"flddef_assign: true"})," (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/4187",children:"#4187"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Arrows (short lambdas) patterns used to match also regular function definitions. This can now be disabled with rule options: ",(0,r.jsx)(n.code,{children:"arrow_is_function: false"})," (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/4187",children:"#4187"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["When a pattern contains the ",(0,r.jsx)(n.code,{children:"var"})," keyword to match variable declarations, Semgrep also matches variables declared with ",(0,r.jsx)(n.code,{children:"let"})," or ",(0,r.jsx)(n.code,{children:"const"}),". With this update, you can disable the described functionality by the rule options: ",(0,r.jsx)(n.code,{children:"let_is_var: false"}),". This rule allows you to scan for ",(0,r.jsx)(n.code,{children:"var"})," keywords while not matching ",(0,r.jsx)(n.code,{children:"let"})," or ",(0,r.jsx)(n.code,{children:"const"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"fixes-3",children:"Fixes"}),"\n",(0,r.jsx)(n.h4,{id:"constant-propagation-improvement",children:"Constant propagation improvement"}),"\n",(0,r.jsx)(n.p,{children:"Constant propagation now allows to recognize patterns such as the following for a method call:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"x.f(y)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"x"})," is a constant, it is correctly recognized."]}),"\n",(0,r.jsx)(n.h4,{id:"go-improvements",children:"Go improvements"}),"\n",(0,r.jsx)(n.p,{children:"This update includes various enhancements for the Go language. Semgrep is now able to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Correctly replace braces in composite literals for autofix."}),"\n",(0,r.jsx)(n.li,{children:"Correctly replace parenthesis in cast for autofix."}),"\n",(0,r.jsx)(n.li,{children:"Parse ellipsis in return type parameters."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"scala-improvements",children:"Scala improvements"}),"\n",(0,r.jsx)(n.p,{children:"Parsing of Scala is improved with this update, because Semgrep is now able to parse:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Case object within blocks."}),"\n",(0,r.jsxs)(n.li,{children:["Typed patterns with variables that begin with an underscore: ",(0,r.jsx)(n.code,{children:"case _x : Int => \u2026"})]}),"\n",(0,r.jsx)(n.li,{children:"Unicode identifiers."}),"\n",(0,r.jsx)(n.li,{children:"Nullary constructors with no arguments in more positions."}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"infix"})," type operators with tuple arguments."]}),"\n",(0,r.jsx)(n.li,{children:"Nested comments."}),"\n",(0,r.jsx)(n.li,{children:"Case class within blocks."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgreps-pattern-regex-now-accepts-unicode",children:"Semgrep's pattern-regex now accepts unicode"}),"\n",(0,r.jsxs)(n.p,{children:["Semgrep's pattern-regex now supports hexadecimal notation of Unicode code points and assumes UTF-8. For more information, see ",(0,r.jsx)(n.a,{href:"/writing-rules/rule-syntax/#pattern-regex",children:"Semgrep documentation"}),". (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4240",children:"#4240"}),")"]}),"\n",(0,r.jsx)(n.h4,{id:"additional-fixes-and-improvements-in-this-version",children:"Additional fixes and improvements in this version"}),"\n",(0,r.jsx)(n.p,{children:"Some of the new fixes with this version include the following:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The semgrep-core accepts ",(0,r.jsx)(n.code,{children:"sh"})," as an alias for Bash."]}),"\n",(0,r.jsxs)(n.li,{children:["Semgrep's metavariable-comparison is now able to detect when a metavariable binds to a code variable that is a constant, and use the constant value in the comparison. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/3727",children:"#3727"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Expand ",(0,r.jsx)(n.code,{children:"~"})," when resolving config paths."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"changes",children:"Changes"}),"\n",(0,r.jsx)(n.h4,{id:"c-support",children:"C support"}),"\n",(0,r.jsx)(n.p,{children:"C support is now generally available."}),"\n",(0,r.jsx)(n.h4,{id:"command-line-interface-cli-changes",children:"Command line interface (CLI) changes"}),"\n",(0,r.jsx)(n.p,{children:"When the semgrep-core results in a segmentation fault, Semgrep now only suggests increasing stack size."}),"\n",(0,r.jsx)(n.p,{children:"Semgrep's CLI output no longer displays severity levels."}),"\n",(0,r.jsx)(n.h4,{id:"scanning-for-executable-scripts-with-shebang",children:"Scanning for executable scripts with shebang"}),"\n",(0,r.jsxs)(n.p,{children:["Previously, Semgrep only scanned files that matched a file extension for the language that was scanned. Scripting languages are often written extensionless with the script interpreter in a shebang. Now, Semgrep scans executable scripts in which shebang interpreter directives match the language of the rule. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/3986",children:"#3986"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"additional-information-2",children:"Additional information"}),"\n",(0,r.jsxs)(n.p,{children:["To view the original release information, see ",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/releases/tag/v0.72.0",children:"the changelog of this release on GitHub"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"version-0710",children:"Version 0.71.0"}),"\n",(0,r.jsx)(n.h3,{id:"additions-3",children:"Additions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In taint mode, you can now write rules that use the same metavariable in sources, sanitizers, and sinks. In addition, these metavariables correctly appear in matched messages. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4073",children:"#4073"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Experimental support for Bash as a new target language."}),"\n",(0,r.jsx)(n.li,{children:"Experimental support for C++ as a new target language."}),"\n",(0,r.jsxs)(n.li,{children:["Increase soft stack limit when running semgrep-core. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4120",children:"#4120"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Semgrep ",(0,r.jsx)(n.code,{children:"--validate"})," runs metachecks on the rule. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4170",children:"#4170"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"fixes-4",children:"Fixes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"text_wrapping"})," defaults to ",(0,r.jsx)(n.code,{children:"MAX_TEXT_WIDTH"})," if ",(0,r.jsx)(n.code,{children:"get_terminal_size"})," reports width smaller than 1. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4110",children:"#4110"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Metrics report the error type of semgrep core errors (for example Timeout, and MaxMemory). (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4156",children:"#4156"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Missing or misformatted global settings files are no longer crashing Semgrep. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4164",children:"#4164"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Constant propagation: Previously an assignment as ",(0,r.jsx)(n.code,{children:"[x,y] = f()"})," was not counted as an assignment to ",(0,r.jsx)(n.code,{children:"x"})," or ",(0,r.jsx)(n.code,{children:"y"})," by constant propagation. Now these types of assignments are recognized by both basic and dataflow based constant propagations. As a result, tuple, or array destructuring assignments now correctly prevent constant propagation. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4109",children:"#4109"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["JS: Semgrep now correctly parses metavariables in template strings. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4139",children:"#4139"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Scala: Semgrep now parses underscore separators in number literals. In addition, Semgrep now parses long suffixes (",(0,r.jsx)(n.code,{children:"l"})," and ",(0,r.jsx)(n.code,{children:"L"}),") on number literals. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4155",children:"#4155"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Scala: Semgrep parses name arguments in arbitrary function types, for example ",(0,r.jsx)(n.code,{children:"(=> Int) => Int"}),". (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4178",children:"#4178"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Bash: Various fixes and improvements."}),"\n",(0,r.jsxs)(n.li,{children:["Kotlin: Ellipsis operator in class and body parameters are now supported. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/4141",children:"#4141"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Go: Method interface pattern is now supported. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/issues/4172",children:"#4172"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"changes-1",children:"Changes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Report CI environment variable in metrics for better environment determination. (",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/pull/4108",children:"#4108"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Bash: A simple expression pattern can now match any command argument rather than having to match the whole command."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"additional-information-3",children:"Additional information"}),"\n",(0,r.jsxs)(n.p,{children:["To view the original release information, see ",(0,r.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/releases/tag/v0.71.0",children:"the changelog of this release on GitHub"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);