"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[65826],{14345:(e,n,r)=>{r.d(n,{A:()=>t});r(96540);var s=r(34164);const i={tabItem:"tabItem_Ymn6"};var o=r(74848);function t(e){let{children:n,hidden:r,className:t}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,t),hidden:r,children:n})}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var s=r(96540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}},45880:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>p,default:()=>b,frontMatter:()=>g,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"semgrep-ci/configuring-blocking-and-errors-in-ci","title":"Configure blocking findings","description":"Configure how Semgrep in CI pipelines handles errors and blocks findings.","source":"@site/docs/semgrep-ci/configuring-blocking-and-errors-in-ci.md","sourceDirName":"semgrep-ci","slug":"/semgrep-ci/configuring-blocking-and-errors-in-ci","permalink":"/docs/semgrep-ci/configuring-blocking-and-errors-in-ci","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/semgrep-ci/configuring-blocking-and-errors-in-ci.md","tags":[{"inline":true,"label":"Deployment","permalink":"/docs/tags/deployment"}],"version":"current","lastUpdatedAt":1752252315000,"frontMatter":{"slug":"configuring-blocking-and-errors-in-ci","append_help_link":true,"description":"Configure how Semgrep in CI pipelines handles errors and blocks findings.","tags":["Deployment"],"title":"Configure blocking findings","hide_title":true},"sidebar":"scanSidebar","previous":{"title":"Customize CI jobs","permalink":"/docs/deployment/customize-ci-jobs"},"next":{"title":"Managed Scans (beta)","permalink":"/docs/deployment/managed-scanning/overview"}}');var i=r(74848),o=r(28453),t=r(62464),a=r(14345),l=r(73724);const c=[...l.RM];function d(e){const n={code:"code",em:"em",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The following is a sample ",(0,i.jsx)(n.code,{children:".semgrep.yml"})," file you can use with GitHub Actions. Semgrep's default behavior regarding blocking findings and errors applies here:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Semgrep returns exit code ",(0,i.jsx)(n.code,{children:"1"})," if there are blocking findings"]}),"\n",(0,i.jsxs)(n.li,{children:["Semgrep returns exit code ",(0,i.jsx)(n.code,{children:"0"})," if there are ",(0,i.jsx)(n.em,{children:"no"})," blocking findings, even if there are internal errors. Semgrep does, however, send an anonymous report to the crash-reporting server."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This means that, by default, Semgrep doesn't report statuses other than ",(0,i.jsx)(n.code,{children:"0"})," or ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsx)(l.Ay,{}),"\n",(0,i.jsxs)(n.p,{children:["Optionally, you can explicitly indicate that Semgrep is using the default settings by including the ",(0,i.jsx)(n.code,{children:"--suppress-errors"})," flag. The modified portion of the configuration file is as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"steps:\n  - uses: actions/checkout@v4\n  - name: Scan and suppress internal errors\n    run: semgrep ci --suppress-errors\n"})}),"\n",(0,i.jsx)(n.p,{children:"The following code snippets display the position of the default flag in the configuration files of various CI providers:"}),"\n",(0,i.jsxs)(t.A,{defaultValue:"github",values:[{label:"BitBucket Pipelines",value:"bitbucket"},{label:"Buildkite",value:"buildkite"},{label:"CircleCI",value:"circleci"},{label:"GitHub Actions",value:"github"},{label:"GitLab CI/CD",value:"gitlab"},{label:"Jenkins",value:"jenkins"}],children:[(0,i.jsx)(a.A,{value:"github",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"steps:\n- uses: actions/checkout@v4\n- name: Scan and suppress internal errors\n   run: semgrep ci --suppress-errors\n"})})}),(0,i.jsx)(a.A,{value:"gitlab",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"semgrep:\n  image: semgrep/semgrep\n  script: semgrep ci --suppress-errors\n"})})}),(0,i.jsx)(a.A,{value:"jenkins",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"steps {\n    sh 'pip3 install semgrep'\n    sh 'semgrep ci --suppress-errors'\n}\n"})})}),(0,i.jsx)(a.A,{value:"bitbucket",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"script:\n  - semgrep ci --suppress-errors\n"})})}),(0,i.jsx)(a.A,{value:"circleci",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'steps:\n    - checkout\n    - run:\n        name: "Semgrep scan"\n        command: semgrep ci --suppress-errors\n'})})}),(0,i.jsx)(a.A,{value:"buildkite",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"commands:\n    - semgrep ci --suppress-errors\n"})})})]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}const g={slug:"configuring-blocking-and-errors-in-ci",append_help_link:!0,description:"Configure how Semgrep in CI pipelines handles errors and blocks findings.",tags:["Deployment"],title:"Configure blocking findings",hide_title:!0},p="Handling blocking findings and errors",h={},m=[{value:"Blocking findings",id:"blocking-findings",level:2},{value:"Semgrep&#39;s default behavior regarding blocking findings and errors",id:"semgreps-default-behavior-regarding-blocking-findings-and-errors",level:2},{value:"Configuration options for blocking findings and errors in CI",id:"configuration-options-for-blocking-findings-and-errors-in-ci",level:2},{value:"Sample configurations for blocking findings and errors",id:"sample-configurations-for-blocking-findings-and-errors",level:2},...c];function f(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"handling-blocking-findings-and-errors",children:"Handling blocking findings and errors"})}),"\n",(0,i.jsx)(n.p,{children:"This article documents how Semgrep handles blocking findings and errors and how you can change Semgrep's default behavior."}),"\n",(0,i.jsx)(n.h2,{id:"blocking-findings",children:"Blocking findings"}),"\n",(0,i.jsxs)(n.p,{children:["Blocking findings are those identified by Semgrep Code using rules defined in Semgrep AppSec Platform's ",(0,i.jsx)(n.a,{href:"https://semgrep.dev/orgs/-/policies",children:"Policies page"})," and are set to ",(0,i.jsx)(n.strong,{children:"Block"})," mode. You can avoid blocking findings by removing rules or by switching the rule mode to ",(0,i.jsx)(n.strong,{children:"Monitor"}),", ",(0,i.jsx)(n.strong,{children:"Comment"}),", or ",(0,i.jsx)(n.strong,{children:"Disabled"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If you do ",(0,i.jsx)(n.strong,{children:"not"})," use Semgrep AppSec Platform with Semgrep in CI or Semgrep Managed Scans (that is, you are using a ",(0,i.jsx)(n.strong,{children:"stand-alone setup"}),"), all Semgrep findings are blocking findings. The existence of any findings means that Semgrep returns an exit code of ",(0,i.jsx)(n.code,{children:"1"}),", which you can use to block your PRs or MRs."]}),"\n",(0,i.jsx)(n.h2,{id:"semgreps-default-behavior-regarding-blocking-findings-and-errors",children:"Semgrep's default behavior regarding blocking findings and errors"}),"\n",(0,i.jsxs)(n.p,{children:["When Semgrep identifies one or more blocking findings, it returns exit code ",(0,i.jsx)(n.code,{children:"1"}),". You can use this result to set up additional checks to enforce a block in your CI/CD pipeline, such as not allowing the merge of the PR/MR. This action applies to both full scans and ",(0,i.jsx)(n.a,{href:"/semgrep-code/glossary#diff-aware-scan",children:"diff-aware scans"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The process to enforce a block on a PR or MR after Semgrep exits with error code ",(0,i.jsx)(n.code,{children:"1"})," is dependent on your CI provider. Review your CI provider's documentation for further information."]}),"\n",(0,i.jsxs)(n.p,{children:["If Semgrep encounters an internal error, it sends an anonymous crash report to a crash-reporting server and returns exit code 0. If you want to catch internal errors, review the ",(0,i.jsx)(n.a,{href:"/cli-reference#exit-codes",children:"CLI reference"})," for more information about Semgrep's exit codes and the options explained in this article to determine how you want to handle each exit code."]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-options-for-blocking-findings-and-errors-in-ci",children:"Configuration options for blocking findings and errors in CI"}),"\n",(0,i.jsxs)(n.p,{children:["You can configure, change, or revert to the default setup of blocking findings and errors in your CI pipeline by passing one of the following options in the ",(0,i.jsx)(n.code,{children:"semgrep.yml"})," file used to configure and run Semgrep in your CI pipeline:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"CI option"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"semgrep ci"})," or ",(0,i.jsx)(n.code,{children:"semgrep ci --suppress-errors"})]}),(0,i.jsxs)(n.td,{children:["Default. CI ",(0,i.jsx)(n.strong,{children:"fails"})," on blocking findings, but ",(0,i.jsx)(n.strong,{children:"passes"})," on internal errors."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"semgrep ci --no-suppress-errors"})}),(0,i.jsxs)(n.td,{children:["CI ",(0,i.jsx)(n.strong,{children:"fails"})," on blocking findings and internal errors."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)("code",{children:"semgrep ci || true"})}),(0,i.jsxs)(n.td,{children:["CI ",(0,i.jsx)(n.strong,{children:"passes"})," on blocking findings and internal errors."]})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["To change Semgrep's behavior, modify your pipeline or job file, specifically the ",(0,i.jsx)(n.code,{children:"semgrep ci"})," command, to the CI option that best fits your needs. For example, GitHub users should edit the ",(0,i.jsx)(n.code,{children:"semgrep.yml"})," workflow file and include the following under the ",(0,i.jsx)(n.code,{children:"run"})," key:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"run:\n    semgrep ci --suppress-errors\n"})}),"\n",(0,i.jsxs)(n.p,{children:["GitLab users would include the following under the ",(0,i.jsx)(n.code,{children:"script"})," key:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"script:\n    semgrep ci --suppress-errors\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you use any other CI provider, refer to its documentation for information on where to provide this information. Additionally, see the sample configurations in the following section."}),"\n",(0,i.jsx)(n.h2,{id:"sample-configurations-for-blocking-findings-and-errors",children:"Sample configurations for blocking findings and errors"}),"\n",(0,i.jsx)(u,{})]})}function b(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},62464:(e,n,r)=>{r.d(n,{A:()=>y});var s=r(96540),i=r(34164),o=r(80052),t=r(56347),a=r(35793),l=r(99025),c=r(4430),d=r(44148);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function g(e){const{values:n,children:r}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:s,default:i}}=e;return{value:n,label:r,attributes:s,default:i}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:r}=e;const i=(0,t.W6)(),o=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,l.aZ)(o),(0,s.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(i.location.search);n.set(o,e),i.replace({...i.location,search:n.toString()})}),[o,i])]}function m(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,o=g(e),[t,l]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=r.find((e=>e.default))??r[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:o}))),[c,u]=h({queryString:r,groupId:i}),[m,f]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,o]=(0,d.Dv)(r);return[i,(0,s.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:i}),b=(()=>{const e=c??m;return p({value:e,tabValues:o})?e:null})();(0,a.A)((()=>{b&&l(b)}),[b]);return{selectedValue:t,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,o]),tabValues:o}}var f=r(75251);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=r(74848);function j(e){let{className:n,block:r,selectedValue:s,selectValue:t,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const n=e.currentTarget,r=l.indexOf(n),i=a[r].value;i!==s&&(c(n),t(i))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},n),children:a.map((e=>{let{value:n,label:r,attributes:o}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...o,className:(0,i.A)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":s===n}),children:r??n},n)}))})}function v(e){let{lazy:n,children:r,selectedValue:o}=e;const t=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===o));return e?(0,s.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function k(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,i.A)("tabs-container",b.tabList),children:[(0,x.jsx)(j,{...n,...e}),(0,x.jsx)(v,{...n,...e})]})}function y(e){const n=(0,f.A)();return(0,x.jsx)(k,{...e,children:u(e.children)},String(n))}},73724:(e,n,r)=>{r.d(n,{Ay:()=>a,RM:()=>o});var s=r(74848),i=r(28453);const o=[];function t(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Name of this GitHub Actions workflow.\nname: Semgrep\n\non:\n  # Scan changed files in PRs (diff-aware scanning):\n  pull_request: {}\n  # Scan on-demand through GitHub Actions interface:\n  workflow_dispatch: {}\n  # Scan mainline branches if there are changes to .github/workflows/semgrep.yml:\n  push:\n    branches:\n      - main\n      - master\n    paths:\n      - .github/workflows/semgrep.yml\n  # Schedule the CI job (this method uses cron syntax):\n  schedule:\n    - cron: '20 17 * * *' # Sets Semgrep to scan every day at 17:20 UTC.\n    # It is recommended to change the schedule to a random time.\n\npermissions:\n  contents: read\n\njobs:\n  semgrep:\n    # User definable name of this GitHub Actions job.\n    name: semgrep/ci\n    # If you are self-hosting, change the following `runs-on` value:\n    runs-on: ubuntu-latest\n\n    container:\n      # A Docker image with Semgrep installed. Do not change this.\n      image: semgrep/semgrep\n\n    # Skip any PR created by dependabot to avoid permission issues:\n    if: (github.actor != 'dependabot[bot]')\n\n    steps:\n      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.\n      - uses: actions/checkout@v4\n      # Run the \"semgrep ci\" command on the command line of the docker image.\n      - run: semgrep ci\n        env:\n          # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.\n          # Generate a token from Semgrep AppSec Platform > Settings\n          # and add it to your GitHub secrets.\n          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}\n"})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}}}]);