"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[28916],{14345:(e,n,r)=>{r.d(n,{A:()=>i});r(96540);var a=r(34164);const t={tabItem:"tabItem_Ymn6"};var s=r(74848);function i(e){let{children:n,hidden:r,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(t.tabItem,i),hidden:r,children:n})}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var a=r(96540);const t={},s=a.createContext(t);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},35449:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"kb/semgrep-ci/trigger-diff-scans-env-var","title":"How to trigger diff-aware scans","description":"Learn how to run a diff-aware scan.","source":"@site/docs/kb/semgrep-ci/trigger-diff-scans-env-var.md","sourceDirName":"kb/semgrep-ci","slug":"/kb/semgrep-ci/trigger-diff-scans-env-var","permalink":"/semgrep-docs/kb/semgrep-ci/trigger-diff-scans-env-var","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main?base=kyle-semgrep:main/docs/kb/semgrep-ci/trigger-diff-scans-env-var.md","tags":[],"version":"current","lastUpdatedAt":1752254305000,"frontMatter":{"title":"How to trigger diff-aware scans","toc_max_heading_level":2,"description":"Learn how to run a diff-aware scan."},"sidebar":"kbSidebar","previous":{"title":"Scanning a monorepo in parts","permalink":"/semgrep-docs/kb/semgrep-ci/scan-monorepo-in-parts"},"next":{"title":"Configure GitHub Actions to use the nonroot Semgrep docker image","permalink":"/semgrep-docs/kb/semgrep-ci/using-nonroot-docker-image-with-gha"}}');var t=r(74848),s=r(28453),i=r(62464),l=r(14345);const o={title:"How to trigger diff-aware scans",toc_max_heading_level:2,description:"Learn how to run a diff-aware scan."},c="How to trigger diff-aware scans",u={},d=[{value:"Example",id:"example",level:3},{value:"Example",id:"example-1",level:3}];function p(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"how-to-trigger-diff-aware-scans",children:"How to trigger diff-aware scans"})}),"\n",(0,t.jsxs)(n.p,{children:["When working with a CI provider, you can set Semgrep to run ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/deployment/customize-ci-jobs#set-up-diff-aware-scans",children:"diff-aware scans"})})," as well as full scans. Diff-aware scans run on your code before and after some baseline, and only report findings newly introduced in the commits after that baseline."]}),"\n","\n",(0,t.jsxs)(i.A,{defaultValue:"github",values:[{label:"Azure DevOps",value:"azure"},{label:"Bitbucket",value:"bitbucket"},{label:"GitHub",value:"github"},{label:"GitLab",value:"gitlab"},{label:"Jenkins",value:"jenkins"},{label:"Other CI providers",value:"other"}],children:[(0,t.jsxs)(l.A,{value:"azure",children:[(0,t.jsxs)(n.p,{children:["To add this configuration in Azure Pipelines, follow the general instructions provided in ",(0,t.jsx)(n.a,{href:"/docs/semgrep-ci/sample-ci-configs#azure-pipelines",children:"Sample CI configurations: Azure Pipelines"}),". If your repository's default branch is not ",(0,t.jsx)(n.code,{children:"main"}),", change the references to ",(0,t.jsx)(n.code,{children:"main"})," to the name of your default branch."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"steps:\n- checkout: self\n  clean: true\n  fetchDepth: 20\npersistCredentials: true\n- script: |\n    python -m pip install --upgrade pip\n    pip install semgrep\n    if [ $(System.PullRequest.PullRequestId) -ge 0 ]; then\n      echo \"Pull Request Scan from branch: $(Build.SourceBranchName)\"\n      git fetch origin main:origin/main\n      export SEMGREP_PR_ID=$(System.PullRequest.PullRequestId)\n      export SEMGREP_BASELINE_REF='origin/main'\n      semgrep ci\n"})}),(0,t.jsxs)(n.p,{children:["If you are running both full and diff-aware scans for the repository, you can use if clauses or define separate templates for full scans and ",(0,t.jsx)(n.a,{href:"/deployment/customize-ci-jobs#set-up-diff-aware-scans",children:"diff-aware scans"})," in Azure Pipelines. Diff-aware scans require the use of the  ",(0,t.jsx)(n.code,{children:"SEMGREP_PR_ID"})," and ",(0,t.jsx)(n.code,{children:"SEMGREP_BASELINE_REF"})," variables, while full scans do not. Full scans are typically run on the condition ",(0,t.jsx)(n.code,{children:'if [ $(Build.SourceBranchName) = "main" ]'}),"."]})]}),(0,t.jsxs)(l.A,{value:"bitbucket",children:[(0,t.jsxs)(n.p,{children:["In the Bitbucket Pipelines configuration file, set ",(0,t.jsx)(n.a,{href:"/semgrep-ci/ci-environment-variables#semgrep_baseline_ref",children:(0,t.jsx)(n.code,{children:"SEMGREP_BASELINE_REF"})})," to enable diff-aware scanning:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'image: semgrep/semgrep:latest\n\npipelines:\n  ...\n  pull-requests:\n    \'**\':\n      - step:\n        name: Semgrep scan on PR\n        script:\n          - export SEMGREP_APP_TOKEN=$SEMGREP_APP_TOKEN\n          - export BITBUCKET_TOKEN=$PAT # Necessary for PR comments\n          # Change to your default branch if different from main\n          - export SEMGREP_BASELINE_REF="origin/main"\n          - git fetch origin "+refs/heads/*:refs/remotes/origin/*"\n          - semgrep ci\n'})})]}),(0,t.jsxs)(l.A,{value:"github",children:[(0,t.jsx)(n.p,{children:"Include the following definition in your GitHub Actions configuration file to enable diff-aware scanning:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"on:\n  # Scan changed files in PRs (diff-aware scanning):\n  pull_request: {}\n"})}),(0,t.jsx)(n.h3,{id:"example",children:"Example"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# Name of this GitHub Actions workflow.\nname: Semgrep\n\non:\n  # Scan changed files in PRs (diff-aware scanning):\n  pull_request: {}\n\njobs:\n  semgrep:\n    # User definable name of this GitHub Actions job.\n    name: semgrep/ci\n    # If you are self-hosting, change the following `runs-on` value:\n    runs-on: ubuntu-latest\n\n    container:\n      # A Docker image with Semgrep installed. Do not change this.\n      image: semgrep/semgrep\n\n    # Skip any PR created by dependabot to avoid permission issues:\n    if: (github.actor != 'dependabot[bot]')\n\n    steps:\n      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.\n      - uses: actions/checkout@v4\n      # Run the \"semgrep ci\" command on the command line of the docker image.\n      - run: semgrep ci\n        env:\n          # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.\n          # Generate a token from Semgrep AppSec Platform > Settings\n          # and add it to your GitHub secrets.\n          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}\n"})})]}),(0,t.jsxs)(l.A,{value:"gitlab",children:[(0,t.jsxs)(n.p,{children:["Set up your ",(0,t.jsx)(n.code,{children:".gitlab-ci.yml"})," conditions (usually ",(0,t.jsx)(n.code,{children:"rules"}),") to run a scan if ",(0,t.jsx)(n.code,{children:"$CI_MERGE_REQUEST_IID"})," is defined. Semgrep automatically runs a diff-aware scan if the variable is present, as it is in merge request pipelines:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"rules:\n  # Scan changed files in MRs, (diff-aware scanning):\n  - if: $CI_MERGE_REQUEST_IID\n"})}),(0,t.jsx)(n.h3,{id:"example-1",children:"Example"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'semgrep:\n  # A Docker image with Semgrep installed.\n  image: semgrep/semgrep\n  # Run the "semgrep ci" command on the command line of the docker image.\n  script: semgrep ci\n\n  rules:\n    # Scan changed files in MRs, (diff-aware scanning):\n    - if: $CI_MERGE_REQUEST_IID\n\n  variables:\n    # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.\n    # Generate a token from Semgrep AppSec Platform > Settings\n    # and add it as a variable in your GitLab CI/CD project settings.\n    SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN\n'})})]}),(0,t.jsxs)(l.A,{value:"jenkins",children:[(0,t.jsx)(n.p,{children:"Jenkins is highly configurable and there are multiple approaches to setting up diff-aware scans."}),(0,t.jsx)(n.p,{children:"See the following articles for detailed guides:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/kb/semgrep-ci/bitbuket-jenkins-pipeline-projects",children:"Set up Jenkins pipeline projects for Bitbucket repositories"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/kb/semgrep-ci/jenkins-diff-scans",children:"Full and diff-aware scans with GitHub and Jenkins"})}),"\n"]})]}),(0,t.jsxs)(l.A,{value:"other",children:[(0,t.jsxs)(n.p,{children:["Set ",(0,t.jsx)(n.a,{href:"/semgrep-ci/ci-environment-variables#semgrep_baseline_ref",children:(0,t.jsx)(n.code,{children:"SEMGREP_BASELINE_REF"})})," to enable diff-aware scanning:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-console",children:'export SEMGREP_BASELINE_REF="main"\n'})}),(0,t.jsxs)(n.p,{children:["You may need to perform additional ",(0,t.jsx)(n.code,{children:"git checkout"})," steps to ensure that the configured baseline ref is available in the scan environment along with the source branch."]})]})]})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},62464:(e,n,r)=>{r.d(n,{A:()=>w});var a=r(96540),t=r(34164),s=r(80052),i=r(56347),l=r(35793),o=r(99025),c=r(4430),u=r(44148);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:r}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:r,attributes:a,default:t}}=e;return{value:n,label:r,attributes:a,default:t}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function f(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:r}=e;const t=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,o.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function m(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,s=p(e),[i,o]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=r.find((e=>e.default))??r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[c,d]=h({queryString:r,groupId:t}),[m,g]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,s]=(0,u.Dv)(r);return[t,(0,a.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:t}),b=(()=>{const e=c??m;return f({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{b&&o(b)}),[b]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!f({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),g(e)}),[d,g,s]),tabValues:s}}var g=r(75251);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=r(74848);function x(e){let{className:n,block:r,selectedValue:a,selectValue:i,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,r=o.indexOf(n),t=l[r].value;t!==a&&(c(n),i(t))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;n=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;n=o[r]??o[o.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:s}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{o.push(e)},onKeyDown:d,onClick:u,...s,className:(0,t.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":a===n}),children:r??n},n)}))})}function E(e){let{lazy:n,children:r,selectedValue:s}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function j(e){const n=m(e);return(0,v.jsxs)("div",{className:(0,t.A)("tabs-container",b.tabList),children:[(0,v.jsx)(x,{...n,...e}),(0,v.jsx)(E,{...n,...e})]})}function w(e){const n=(0,g.A)();return(0,v.jsx)(j,{...e,children:d(e.children)},String(n))}}}]);