"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[79113],{14345:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(34164);const o={tabItem:"tabItem_Ymn6"};var s=t(74848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,i),hidden:t,children:n})}},28329:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>g,default:()=>x,frontMatter:()=>h,metadata:()=>r,toc:()=>b});const r=JSON.parse('{"id":"cli-reference","title":"CLI reference","description":"Reference for the Semgrep command-line interface including options and exit code behavior.","source":"@site/docs/cli-reference.md","sourceDirName":".","slug":"/cli-reference","permalink":"/semgrep-docs/cli-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main?base=kyle-semgrep:main/docs/cli-reference.md","tags":[{"inline":true,"label":"Deployment","permalink":"/semgrep-docs/tags/deployment"},{"inline":true,"label":"CLI","permalink":"/semgrep-docs/tags/cli"}],"version":"current","frontMatter":{"slug":"cli-reference","append_help_link":true,"description":"Reference for the Semgrep command-line interface including options and exit code behavior.","tags":["Deployment","CLI"],"hide_title":true,"title":"CLI reference"},"sidebar":"scanSidebar","previous":{"title":"Semgrepignore v2","permalink":"/semgrep-docs/semgrepignore-v2-reference"},"next":{"title":"JSON and SARIF fields","permalink":"/semgrep-docs/semgrep-appsec-platform/json-and-sarif"}}');var o=t(74848),s=t(28453),i=t(62464),a=t(14345);function l(e){const n={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Usage: semgrep [OPTIONS] COMMAND [ARGS]...\n\n  To get started quickly, run `semgrep scan --config auto`\n\n  Run `semgrep SUBCOMMAND --help` for more information on each subcommand\n\n  If no subcommand is passed, will run `scan` subcommand by default\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  ci                   Run Semgrep on a git diff (for use in CI)\n  install-semgrep-pro  Install the Semgrep Pro Engine\n  login                Obtain and save credentials for semgrep.dev\n  logout               Remove locally stored credentials to semgrep.dev\n  lsp                  Start the Semgrep LSP server (useful for IDEs)\n  publish              Upload rule to semgrep.dev\n  scan                 Run Semgrep rules on local folders or files\n  show                 Show various types of information\n  test                 Test the rules (EXPERIMENTAL improvements over scan --test)\n  validate             Validate the rules (EXPERIMENTAL improvements scan --validate)\n"})})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}function u(e){const n={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"NAME\n       semgrep scan - run semgrep rules on files\n\nSYNOPSIS\n       semgrep scan [OPTION]\u2026 [TARGETS]\u2026\n\nDESCRIPTION\n       Searches TARGET paths for matches to rules or patterns. Defaults to\n       searching entire current working directory.\n\n       To get started quickly, run\n\n       semgrep --config auto .\n\n       This will automatically fetch rules for your project from the Semgrep\n       Registry. NOTE: Using `--config auto` will log in to the Semgrep\n       Registry with your project URL.\n\n       For more information about Semgrep, go to https://semgrep.dev.\n\n       NOTE: By default, Semgrep will report pseudonymous usage metrics to\n       its server if you pull your configuration from the Semgrep registry.\n       To learn more about how and why these metrics are collected, please\n       see https://semgrep.dev/docs/metrics. To modify this behavior, see the\n       --metrics option below.\n\nARGUMENTS\n       TARGETS\n           Files or folders to be scanned by semgrep.\n\nOPTIONS\n       -a, --autofix\n           Apply autofix patches. WARNING: data loss can occur with this\n           flag. Make sure your files are stored in a version control system.\n           Note that this mode is experimental and not guaranteed to function\n           properly. \n\n       --allow-local-builds\n           Experimental: allow building projects contained in the repository.\n           This allows Semgrep to identify dependencies and dependency\n           relationships when lockfiles are not present or are insufficient.\n           However, building code may inherently require the execution of\n           code contained in the scanned project or in its dependencies,\n           which is a security risk.\n\n       --allow-untrusted-validators\n           Allows running rules with validators from origins other than\n           semgrep.dev. Avoid running rules from origins you don't trust.\n\n       --baseline-commit=VAL (absent SEMGREP_BASELINE_COMMIT env)\n           Only show results that are not found in this commit hash. Aborts\n           run if not currently in a git directory, there are unstaged\n           changes, or given baseline hash doesn't exist. \n\n       -d, --dump-command-for-core\n           <internal, do not use>\n\n       --dataflow-traces\n           Explain how non-local values reach the location of a finding (only\n           affects text and SARIF output).\n\n       --debug\n           All of --verbose, but with additional debugging information.\n\n       --develop\n           Living on the edge.\n\n       --disable-nosem\n           negates --enable-nosem\n\n       --disable-version-check\n           negates --enable-version-check\n\n       --dryrun\n           If --dryrun, does not write autofixes to a file. This will print\n           the changes to the console. This lets you see the changes before\n           you commit to them. Only works with the --autofix flag. Otherwise\n           does nothing. \n\n       --dump-ast\n           If --dump-ast, shows AST of the input file or passed expression\n           and then exit (can use --json). \n\n       --dump-engine-path\n           <internal, do not use>\n\n       -e VAL, --pattern=VAL\n           Code search pattern. See\n           https://semgrep.dev/docs/writing-rules/pattern-syntax for\n           information on pattern features. \n\n       --emacs\n           Output results in Emacs single-line format.\n\n       --emacs-output=VAL\n           Write a copy of the emacs output to a file or post to URL.\n\n       --enable-nosem\n           Enables 'nosem'. Findings will not be reported on lines containing\n           a 'nosem' comment at the end. Enabled by default.\n\n       --enable-version-check (absent SEMGREP_ENABLE_VERSION_CHECK env)\n           Checks Semgrep servers to see if the latest version is run;\n           disabling this may reduce exit time after returning results. \n\n       --error\n           Exit 1 if there are findings. Useful for CI and scripts.\n\n       --exclude=PATTERN\n           Skip any file or directory whose path that matches PATTERN.\n           '--exclude=*.py' will ignore the following: 'foo.py',\n           'src/foo.py', 'foo.py/bar.sh'. '--exclude=tests' will ignore\n           'tests/foo.py' as well as 'a/b/tests/c/foo.py'. Multiple\n           '--exclude' options may be specified. PATTERN is a glob-style\n           pattern that uses the same syntax as gitignore and semgrepignore,\n           which is documented at\n           https://git-scm.com/docs/gitignore#_pattern_format \n\n       --exclude-minified-files\n           Skip minified files. These are files that are < 7% whitespace, or\n           which have an average of > 1000 bytes per line. By default\n           minified files are scanned. \n\n       --exclude-rule=VAL\n           Skip any rule with the given id. Can add multiple times.\n\n       --experimental\n           Enable experimental features.\n\n       -f VAL, -c VAL, --config=VAL (absent SEMGREP_RULES env)\n           YAML configuration file, directory of YAML files ending in\n           .yml|.yaml, URL of a configuration file, or Semgrep registry entry\n           name. Use --config auto to automatically obtain rules tailored to\n           this project; your project URL will be used to log in to the\n           Semgrep registry. To run multiple rule files simultaneously, use\n           --config before every YAML, URL, or Semgrep registry entry name.\n           For example `semgrep --config p/python --config\n           myrules/myrule.yaml` See\n           https://semgrep.dev/docs/writing-rules/rule-syntax for information\n           on configuration file format. \n\n       --files-with-matches\n           Output only the names of files containing matches. REQUIRES\n           --experimental\n\n       --force-color (absent SEMGREP_FORCE_COLOR env)\n           Always include ANSI color in the output, even if not writing to a\n           TTY; defaults to using the TTY status \n\n       --gitlab-sast\n           Output results in GitLab SAST format.\n\n       --gitlab-sast-output=VAL\n           Write a copy of the GitLab SAST output to a file or post to URL.\n\n       --gitlab-secrets\n           Output results in GitLab Secrets format.\n\n       --gitlab-secrets-output=VAL\n           Write a copy of the GitLab Secrets output to a file or post to\n           URL.\n\n       --historical-secrets\n           Scans git history using Secrets rules.\n\n       --include=PATTERN\n           Specify files or directories that should be scanned by semgrep,\n           excluding other files. This filter is applied after these other\n           filters: '--exclude' options, any filtering done by git (or other\n           SCM), and filtering by '.semgrepignore' files. Multiple\n           '--include' options can be specified. A file path is selected if\n           it matches at least one of the include patterns. PATTERN is a\n           glob-style pattern such as 'foo.*' that must match the path. For\n           example, specifying the language with '-l javascript' might\n           preselect files 'src/foo.jsx' and 'lib/bar.js'. Specifying one of\n           '--include=src', '--include=*.jsx', or '--include=src/foo.*' will\n           restrict the selection to the single file 'src/foo.jsx'. A choice\n           of multiple '--include' patterns can be specified. For example,\n           '--include=foo.* --include=bar.*' will select both 'src/foo.jsx'\n           and 'lib/bar.js'. Glob-style patterns follow the syntax supported\n           by gitignore and semgrepignore, which is documented at\n           https://git-scm.com/docs/gitignore#_pattern_format \n\n       --incremental-output\n           Output results incrementally. REQUIRES --experimental\n\n       --interfile-timeout=VAL (absent=0)\n           Maximum time to spend on interfile analysis. If set to 0 will not\n           have time limit. Defaults to 0 s for all CLI scans. For CI scans,\n           it defaults to 3 hours.\n\n       -j VAL, --jobs=VAL (absent=4)\n           Number of subprocesses to use to run checks in parallel. The\n           default is based on a best effort to determine the number of\n           logical CPUs that are available to the user and that semgrep can\n           take advantage of (1 if using --pro, 1 on Windows). \n\n       --json\n           Output results in Semgrep's JSON format.\n\n       --json-output=VAL\n           Write a copy of the json output to a file or post to URL.\n\n       --junit-xml\n           Output results in JUnit XML format.\n\n       --junit-xml-output=VAL\n           Write a copy of the JUnit XML output to a file or post to URL.\n\n       -l VAL, --lang=VAL\n           Parse pattern and all files in specified language. Must be used\n           with -e/--pattern. \n\n       --legacy\n           Prefer old (legacy) behavior.\n\n       --matching-explanations\n           Add debugging information in the JSON output to trace how\n           different parts of a rule are matched (a.k.a., \"Inspect Rule\" in\n           the Semgrep playground)\n\n       --max-chars-per-line=VAL (absent=160)\n           Maximum number of characters to show per line.\n\n       --max-lines-per-finding=VAL (absent=10)\n           Maximum number of lines of code that will be shown for each match\n           before trimming (set to 0 for unlimited).\n\n       --max-log-list-entries=VAL (absent=100)\n           Maximum number of entries that will be shown in the log (e.g.,\n           list of rule ids, list of skipped files). A zero or negative value\n           disables this filter. Defaults to 100\n\n       --max-memory=VAL (absent=0)\n           Maximum system memory in MiB to use during the interfile\n           pre-processing phase, or when running a rule on a single file. If\n           set to 0, will not have memory limit. Defaults to 0. For CI scans\n           that use the Pro Engine, defaults to 5000 MiB. \n\n       --max-target-bytes=VAL (absent=1000000)\n           Maximum size for a file to be scanned by Semgrep, e.g '1.5MB'. Any\n           input program larger than this will be ignored. A zero or negative\n           value disables this filter. Defaults to 1000000 bytes\n\n       --metrics=VAL (absent=auto or SEMGREP_SEND_METRICS env)\n           Configures how usage metrics are sent to the Semgrep server. If\n           'auto', metrics are sent whenever the --config value pulls from\n           the Semgrep server or if the user is logged in. If 'on', metrics\n           are always sent. If 'off', metrics are disabled altogether and not\n           sent. If absent, the SEMGREP_SEND_METRICS environment variable\n           value will be used. If no environment variable, defaults to\n           'auto'. \n\n       --no-autofix\n           negates -a/--autofix\n\n       --no-dryrun\n           negates --dryrun\n\n       --no-error\n           negates --error\n\n       --no-exclude-minified-files\n           negates --exclude-minified-files\n\n       --no-force-color\n           negates --force-color\n\n       --no-git-ignore\n           negates --use-git-ignore\n\n       --no-rewrite-rule-ids\n           negates --rewrite-rule-ids\n\n       --no-secrets-validation\n           Disables secret validation.\n\n       --no-strict\n           negates --strict\n\n       --no-test-ignore-todo\n           negates --test-ignore-todo\n\n       --no-time\n           negates --time\n\n       --no-trace\n           negates --trace\n\n       --novcs\n           Assume the project is not managed by a version control system\n           (VCS), even if the project appears to be under version control\n           based on the presence of files such as '.git' or similar. REQUIRES\n           --experimental or --semgrepignore-v2.\n\n       -o VAL, --output=VAL\n           Save search results to a file or post to URL. Default is to print\n           to stdout.\n\n       --optimizations=VAL (absent=all)\n           Turn on/off optimizations. Default = 'all'. Use 'none' to turn all\n           optimizations off. \n\n       --oss-only\n           Run using only the OSS engine, even if the Semgrep Pro toggle is\n           on. This may still run Pro rules, but only using the OSS features. \n\n       --pro\n           Inter-file analysis and Pro languages (currently Apex, C#, and\n           Elixir. Requires Semgrep Pro Engine. See\n           https://semgrep.dev/products/pro-engine/ for more.\n\n       --pro-intrafile\n           Intra-file inter-procedural taint analysis. Implies\n           --pro-languages. Requires Semgrep Pro Engine. See\n           https://semgrep.dev/products/pro-engine/ for more.\n\n       --pro-languages\n           Enable Pro languages (currently Apex, C#, and Elixir). Requires\n           Semgrep Pro Engine. See https://semgrep.dev/products/pro-engine/\n           for more.\n\n       --pro-path-sensitive\n           Path sensitivity. Implies --pro-intrafile. Requires Semgrep Pro\n           Engine. See https://semgrep.dev/products/pro-engine/ for more.\n\n       --profile\n           <undocumented>\n\n       --project-root=VAL\n           Semgrep normally determines the type of project (git or novcs) and\n           the project root automatically. The project root is then used to\n           locate and use '.gitignore' and '.semgrepignore' files which\n           determine target files that should be ignored by semgrep. This\n           option forces the project root to be a specific folder and assumes\n           a local project without version control (novcs). This option is\n           useful to ensure the '.semgrepignore' file that may exist at the\n           project root is consulted when the scanning root is not the\n           current folder '.'. A valid project root must be a folder (path\n           referencing a directory) whose physical path is a prefix of the\n           physical path of the scanning roots passed on the command line.\n           For example, the command 'semgrep scan --project-root . src' is\n           valid if '.' is '/home/me' and 'src' is a directory or a symbolic\n           link to a '/home/me/sources' directory or a symbolic link to a\n           'sources' directory but not if it is a symbolic link to a\n           directory '/var/sources' (assuming '/var' is not a symbolic link).\n           REQUIRES --experimental or --semgrepignore-v2.\n\n       -q, --quiet\n           Only output findings.\n\n       --remote=VAL\n           Remote will quickly check out and scan a remote git repository of\n           the format \"http[s]://<WEBSITE>/.../<REPO>.git\". Must be run with\n           --pro. Incompatible with --project-root. Note this requires an\n           empty CWD as this command will clone the repository into the CWD.\n           REQUIRES --experimental\n\n       --replacement=VAL\n           An autofix expression that will be applied to any matches found\n           with --pattern. Only valid with a command-line specified pattern. \n\n       --rewrite-rule-ids\n           Rewrite rule ids when they appear in nested sub-directories (Rule\n           'foo' in test/rules.yaml will be renamed 'test.foo'). \n\n       --sarif\n           Output results in SARIF format.\n\n       --sarif-output=VAL\n           Write a copy of the SARIF output to a file or post to URL.\n\n       --scan-unknown-extensions\n           If true, target files specified directly on the command line will\n           bypass normal language detection. They will be analyzed according\n           to the value of --lang if applicable, or otherwise with the\n           analyzers/languages specified in the Semgrep rule(s) regardless of\n           file extension or file type. This setting doesn't apply to target\n           files discovered by scanning folders. Defaults to false. \n\n       --secrets\n           Run Semgrep Secrets product, including support for secret\n           validation. Requires access to Secrets, contact\n           support@semgrep.com for more information.\n\n       --semgrepignore-v2\n           [DEPRECATED] '--semgrepignore-v2' used to force the use of the\n           newer Semgrepignore v2 implementation for discovering and\n           filtering target files. It is now the default and only behavior.\n           The transitional option '--no-semgrepignore-v2' is no longer\n           available. \n\n       --severity=VAL\n           Report findings only from rules matching the supplied severity\n           level. By default all applicable rules are run. Can add multiple\n           times. Each should be one of INFO, WARNING, or ERROR. \n\n       --show-supported-languages\n           Print a list of languages that are currently supported by Semgrep.\n\n       --skip-unknown-extensions\n           negates --scan-unknown-extensions\n\n       --strict\n           Return a nonzero exit code when WARN level errors are encountered.\n           Fails early if invalid configuration files are present. Defaults\n           to --no-strict. \n\n       --test\n           Run test suite.\n\n       --test-ignore-todo\n           If --test-ignore-todo, ignores rules marked as '#todoruleid:' in\n           test files. \n\n       --text\n           Output results in text format.\n\n       --text-output=VAL\n           Write a copy of the text output to a file or post to URL.\n\n       --time\n           Include a timing summary with the results. If output format is\n           json, provides times for each pair (rule, target). This feature is\n           meant for internal use and may be changed or removed without\n           warning. At the current moment, --trace is better supported. \n\n       --timeout=VAL (absent=5.)\n           Maximum time to spend running a rule on a single file in seconds.\n           If set to 0 will not have time limit. Defaults to 5.0 s. \n\n       --timeout-threshold=VAL (absent=3)\n           Maximum number of rules that can time out on a file before the\n           file is skipped. If set to 0 will not have limit. Defaults to 3. \n\n       --trace\n           Record traces from Semgrep scans to help debugging. This feature\n           is meant for internal use and may be changed or removed without\n           warning. \n\n       --trace-endpoint=VAL (absent SEMGREP_OTEL_ENDPOINT env)\n           Endpoint to send OpenTelemetry traces to, if `--trace` is present.\n           The value may be `semgrep-prod` (default), `semgrep-dev`,\n           `semgrep-local`, or any valid URL. This feature is meant for\n           internal use and may be changed or removed without warning. \n\n       --use-git-ignore\n           '--use-git-ignore' is Semgrep's default behavior. Under the\n           default behavior, Git-tracked files are not excluded by Gitignore\n           rules and only untracked files are excluded by Gitignore rules.\n           '--no-git-ignore' causes semgrep to not call 'git' and not consult\n           '.gitignore' files to determine which files semgrep should scan.\n           As a result of '--no-git-ignore', gitignored files and Git\n           submodules will be scanned unless excluded by other means\n           ('.semgrepignore', '--exclude', etc.). This flag has no effect if\n           the scanning root is not in a Git repository.\n\n       -v, --verbose\n           Show more details about what rules are running, which files failed\n           to parse, etc. \n\n       --validate\n           Validate configuration file(s). This will check YAML files for\n           errors and run 'p/semgrep-rule-lints' on the YAML files. No search\n           is performed. \n\n       --version\n           Show the version and exit.\n\n       --vim\n           Output results in vim single-line format.\n\n       --vim-output=VAL\n           Write a copy of the vim output to a file or post to URL.\n\n       --x-eio\n           [INTERNAL] Rely on an EIO based implementation for the -j flag\n\n       --x-ignore-semgrepignore-files\n           [INTERNAL] Ignore all '.semgrepignore' files found in the project\n           tree for the purpose of selecting target files to be scanned by\n           semgrep. Other filters may still apply. THIS OPTION IS NOT PART OF\n           THE SEMGREP API AND MAY CHANGE OR DISAPPEAR WITHOUT NOTICE. \n\n       --x-ls\n           [INTERNAL] List the selected target files before any rule-specific\n           or language-specific filtering. Then exit. The default output\n           format is one path per line. THIS OPTION IS NOT PART OF THE\n           SEMGREP API AND MAY CHANGE OR DISAPPEAR WITHOUT NOTICE. \n\n       --x-ls-long\n           [INTERNAL] Show selected targets and skipped targets with reasons\n           why they were skipped, using an unspecified output format. Implies\n           --x-ls. THIS OPTION IS NOT PART OF THE SEMGREP API AND MAY CHANGE\n           OR DISAPPEAR WITHOUT NOTICE. \n\n       --x-pro-naming\n           <internal, do not use>\n\n       --x-semgrepignore-filename=FILENAME\n           [INTERNAL] Files named FILENAME shall be consulted instead of the\n           files named '.semgrepignore'. This option can be useful for\n           testing semgrep on intentionally broken code that should normally\n           be ignored.\n\n       --x-tr\n           <internal, do not use>\n\nCOMMON OPTIONS\n       --help[=FMT] (default=auto)\n           Show this help in format FMT. The value FMT must be one of auto,\n           pager, groff or plain. With auto, the format is pager or plain\n           whenever the TERM env var is dumb or undefined.\n\nEXIT STATUS\n       semgrep scan exits with:\n\n       0   on success.\n\n       123 on indiscriminate errors reported on standard error.\n\n       124 on command line parsing errors.\n\n       125 on unexpected internal errors (bugs).\n\nENVIRONMENT\n       These environment variables affect the execution of semgrep scan:\n\n       SEMGREP_BASELINE_COMMIT\n           See option --baseline-commit.\n\n       SEMGREP_ENABLE_VERSION_CHECK\n           See option --enable-version-check.\n\n       SEMGREP_FORCE_COLOR\n           See option --force-color.\n\n       SEMGREP_OTEL_ENDPOINT\n           See option --trace-endpoint.\n\n       SEMGREP_RULES\n           See option --config.\n\n       SEMGREP_SEND_METRICS\n           See option --metrics.\n\nAUTHORS\n       Semgrep Inc. <support@semgrep.com>\n\nBUGS\n       If you encounter an issue, please report it at\n       https://github.com/semgrep/semgrep/issues\n\n"})})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}function p(e){const n={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"NAME\n       semgrep ci - the recommended way to run semgrep in CI\n\nSYNOPSIS\n       semgrep ci [OPTION]\u2026\n\nDESCRIPTION\n       In pull_request/merge_request (PR/MR) contexts, `semgrep ci` will only\n       report findings that were introduced by the PR/MR.\n\n       When logged in, `semgrep ci` runs rules configured on Semgrep App and\n       sends findings to your findings dashboard.\n\n       Only displays findings that were marked as blocking.\n\nOPTIONS\n       -a, --autofix\n           Apply autofix patches. WARNING: data loss can occur with this\n           flag. Make sure your files are stored in a version control system.\n           Note that this mode is experimental and not guaranteed to function\n           properly. \n\n       --allow-local-builds\n           Experimental: allow building projects contained in the repository.\n           This allows Semgrep to identify dependencies and dependency\n           relationships when lockfiles are not present or are insufficient.\n           However, building code may inherently require the execution of\n           code contained in the scanned project or in its dependencies,\n           which is a security risk.\n\n       --allow-untrusted-validators\n           Allows running rules with validators from origins other than\n           semgrep.dev. Avoid running rules from origins you don't trust.\n\n       --audit-on=VAL (absent SEMGREP_AUDIT_ON env)\n\n       --baseline-commit=VAL (absent SEMGREP_BASELINE_COMMIT env)\n           Only show results that are not found in this commit hash. Aborts\n           run if not currently in a git directory, there are unstaged\n           changes, or given baseline hash doesn't exist. \n\n       --code\n           Run Semgrep Code (SAST) product.\n\n       -d, --dump-command-for-core\n           <internal, do not use>\n\n       --dataflow-traces\n           Explain how non-local values reach the location of a finding (only\n           affects text and SARIF output).\n\n       --debug\n           All of --verbose, but with additional debugging information.\n\n       --develop\n           Living on the edge.\n\n       --disable-nosem\n           negates --enable-nosem\n\n       --disable-version-check\n           negates --enable-version-check\n\n       --dry-run\n           When set, will not start a scan on semgrep.dev and will not report\n           findings. Instead will print out json objects it would have sent.\n\n       --dryrun\n           If --dryrun, does not write autofixes to a file. This will print\n           the changes to the console. This lets you see the changes before\n           you commit to them. Only works with the --autofix flag. Otherwise\n           does nothing. \n\n       --emacs\n           Output results in Emacs single-line format.\n\n       --emacs-output=VAL\n           Write a copy of the emacs output to a file or post to URL.\n\n       --enable-nosem\n           Enables 'nosem'. Findings will not be reported on lines containing\n           a 'nosem' comment at the end. Enabled by default.\n\n       --enable-version-check (absent SEMGREP_ENABLE_VERSION_CHECK env)\n           Checks Semgrep servers to see if the latest version is run;\n           disabling this may reduce exit time after returning results. \n\n       --exclude=PATTERN\n           Skip any file or directory whose path that matches PATTERN.\n           '--exclude=*.py' will ignore the following: 'foo.py',\n           'src/foo.py', 'foo.py/bar.sh'. '--exclude=tests' will ignore\n           'tests/foo.py' as well as 'a/b/tests/c/foo.py'. Multiple\n           '--exclude' options may be specified. PATTERN is a glob-style\n           pattern that uses the same syntax as gitignore and semgrepignore,\n           which is documented at\n           https://git-scm.com/docs/gitignore#_pattern_format \n\n       --exclude-minified-files\n           Skip minified files. These are files that are < 7% whitespace, or\n           which have an average of > 1000 bytes per line. By default\n           minified files are scanned. \n\n       --exclude-rule=VAL\n           Skip any rule with the given id. Can add multiple times.\n\n       --experimental\n           Enable experimental features.\n\n       -f VAL, -c VAL, --config=VAL\n           Not supported in 'ci' mode\n\n       --fake-backend=VAL\n           Internal flag.\n\n       --files-with-matches\n           Output only the names of files containing matches. REQUIRES\n           --experimental\n\n       --force-color (absent SEMGREP_FORCE_COLOR env)\n           Always include ANSI color in the output, even if not writing to a\n           TTY; defaults to using the TTY status \n\n       --gitlab-sast\n           Output results in GitLab SAST format.\n\n       --gitlab-sast-output=VAL\n           Write a copy of the GitLab SAST output to a file or post to URL.\n\n       --gitlab-secrets\n           Output results in GitLab Secrets format.\n\n       --gitlab-secrets-output=VAL\n           Write a copy of the GitLab Secrets output to a file or post to\n           URL.\n\n       --historical-secrets\n           Scans git history using Secrets rules.\n\n       --include=PATTERN\n           Specify files or directories that should be scanned by semgrep,\n           excluding other files. This filter is applied after these other\n           filters: '--exclude' options, any filtering done by git (or other\n           SCM), and filtering by '.semgrepignore' files. Multiple\n           '--include' options can be specified. A file path is selected if\n           it matches at least one of the include patterns. PATTERN is a\n           glob-style pattern such as 'foo.*' that must match the path. For\n           example, specifying the language with '-l javascript' might\n           preselect files 'src/foo.jsx' and 'lib/bar.js'. Specifying one of\n           '--include=src', '--include=*.jsx', or '--include=src/foo.*' will\n           restrict the selection to the single file 'src/foo.jsx'. A choice\n           of multiple '--include' patterns can be specified. For example,\n           '--include=foo.* --include=bar.*' will select both 'src/foo.jsx'\n           and 'lib/bar.js'. Glob-style patterns follow the syntax supported\n           by gitignore and semgrepignore, which is documented at\n           https://git-scm.com/docs/gitignore#_pattern_format \n\n       --incremental-output\n           Output results incrementally. REQUIRES --experimental\n\n       --interfile-timeout=VAL (absent=0)\n           Maximum time to spend on interfile analysis. If set to 0 will not\n           have time limit. Defaults to 0 s for all CLI scans. For CI scans,\n           it defaults to 3 hours.\n\n       --internal-ci-scan-results\n           Internal flag.\n\n       -j VAL, --jobs=VAL (absent=4)\n           Number of subprocesses to use to run checks in parallel. The\n           default is based on a best effort to determine the number of\n           logical CPUs that are available to the user and that semgrep can\n           take advantage of (1 if using --pro, 1 on Windows). \n\n       --json\n           Output results in Semgrep's JSON format.\n\n       --json-output=VAL\n           Write a copy of the json output to a file or post to URL.\n\n       --junit-xml\n           Output results in JUnit XML format.\n\n       --junit-xml-output=VAL\n           Write a copy of the JUnit XML output to a file or post to URL.\n\n       --legacy\n           Prefer old (legacy) behavior.\n\n       --log-backend=VAL\n           Internal flag.\n\n       --matching-explanations\n           Add debugging information in the JSON output to trace how\n           different parts of a rule are matched (a.k.a., \"Inspect Rule\" in\n           the Semgrep playground)\n\n       --max-chars-per-line=VAL (absent=160)\n           Maximum number of characters to show per line.\n\n       --max-lines-per-finding=VAL (absent=10)\n           Maximum number of lines of code that will be shown for each match\n           before trimming (set to 0 for unlimited).\n\n       --max-log-list-entries=VAL (absent=100)\n           Maximum number of entries that will be shown in the log (e.g.,\n           list of rule ids, list of skipped files). A zero or negative value\n           disables this filter. Defaults to 100\n\n       --max-memory=VAL (absent=0)\n           Maximum system memory in MiB to use during the interfile\n           pre-processing phase, or when running a rule on a single file. If\n           set to 0, will not have memory limit. Defaults to 0. For CI scans\n           that use the Pro Engine, defaults to 5000 MiB. \n\n       --max-target-bytes=VAL (absent=1000000)\n           Maximum size for a file to be scanned by Semgrep, e.g '1.5MB'. Any\n           input program larger than this will be ignored. A zero or negative\n           value disables this filter. Defaults to 1000000 bytes\n\n       --metrics=VAL (absent=auto or SEMGREP_SEND_METRICS env)\n           Configures how usage metrics are sent to the Semgrep server. If\n           'auto', metrics are sent whenever the --config value pulls from\n           the Semgrep server or if the user is logged in. If 'on', metrics\n           are always sent. If 'off', metrics are disabled altogether and not\n           sent. If absent, the SEMGREP_SEND_METRICS environment variable\n           value will be used. If no environment variable, defaults to\n           'auto'. \n\n       --no-autofix\n           negates -a/--autofix\n\n       --no-dryrun\n           negates --dryrun\n\n       --no-exclude-minified-files\n           negates --exclude-minified-files\n\n       --no-force-color\n           negates --force-color\n\n       --no-git-ignore\n           negates --use-git-ignore\n\n       --no-rewrite-rule-ids\n           negates --rewrite-rule-ids\n\n       --no-secrets-validation\n           Disables secret validation.\n\n       --no-suppress-errors\n           negates --suppress-errors\n\n       --no-trace\n           negates --trace\n\n       -o VAL, --output=VAL\n           Save search results to a file or post to URL. Default is to print\n           to stdout.\n\n       --optimizations=VAL (absent=all)\n           Turn on/off optimizations. Default = 'all'. Use 'none' to turn all\n           optimizations off. \n\n       --oss-only\n           Run using only the OSS engine, even if the Semgrep Pro toggle is\n           on. This may still run Pro rules, but only using the OSS features. \n\n       --pro\n           Inter-file analysis and Pro languages (currently Apex, C#, and\n           Elixir. Requires Semgrep Pro Engine. See\n           https://semgrep.dev/products/pro-engine/ for more.\n\n       --pro-intrafile\n           Intra-file inter-procedural taint analysis. Implies\n           --pro-languages. Requires Semgrep Pro Engine. See\n           https://semgrep.dev/products/pro-engine/ for more.\n\n       --pro-languages\n           Enable Pro languages (currently Apex, C#, and Elixir). Requires\n           Semgrep Pro Engine. See https://semgrep.dev/products/pro-engine/\n           for more.\n\n       --pro-path-sensitive\n           Path sensitivity. Implies --pro-intrafile. Requires Semgrep Pro\n           Engine. See https://semgrep.dev/products/pro-engine/ for more.\n\n       --profile\n           <undocumented>\n\n       -q, --quiet\n           Only output findings.\n\n       --rewrite-rule-ids\n           Rewrite rule ids when they appear in nested sub-directories (Rule\n           'foo' in test/rules.yaml will be renamed 'test.foo'). \n\n       --sarif\n           Output results in SARIF format.\n\n       --sarif-output=VAL\n           Write a copy of the SARIF output to a file or post to URL.\n\n       --scan-unknown-extensions\n           If true, target files specified directly on the command line will\n           bypass normal language detection. They will be analyzed according\n           to the value of --lang if applicable, or otherwise with the\n           analyzers/languages specified in the Semgrep rule(s) regardless of\n           file extension or file type. This setting doesn't apply to target\n           files discovered by scanning folders. Defaults to false. \n\n       --secrets\n           Run Semgrep Secrets product, including support for secret\n           validation. Requires access to Secrets, contact\n           support@semgrep.com for more information.\n\n       --semgrepignore-v2\n           [DEPRECATED] '--semgrepignore-v2' used to force the use of the\n           newer Semgrepignore v2 implementation for discovering and\n           filtering target files. It is now the default and only behavior.\n           The transitional option '--no-semgrepignore-v2' is no longer\n           available. \n\n       --skip-unknown-extensions\n           negates --scan-unknown-extensions\n\n       --subdir=VAL\n           Scan only a subdirectory of this folder. This creates a project\n           specific to the subdirectory unless SEMGREP_REPO_DISPLAY_NAME is\n           set. Expects a relative path. (Note that when two scans have the\n           same SEMGREP_REPO_DISPLAY_NAME but different targeted directories,\n           the results of the second scan overwrite the first.)\n\n       --supply-chain\n           Run Semgrep Supply Chain product.\n\n       --suppress-errors (absent SEMGREP_SUPPRESS_ERRORS env)\n           Configures how the CI command reacts when an error occurs. If\n           true, encountered errors are suppressed and the exit code is zero\n           (success). If false, encountered errors are not suppressed and the\n           exit code is non-zero (failure).\n\n       --text\n           Output results in text format.\n\n       --text-output=VAL\n           Write a copy of the text output to a file or post to URL.\n\n       --timeout=VAL (absent=5.)\n           Maximum time to spend running a rule on a single file in seconds.\n           If set to 0 will not have time limit. Defaults to 5.0 s. \n\n       --timeout-threshold=VAL (absent=3)\n           Maximum number of rules that can time out on a file before the\n           file is skipped. If set to 0 will not have limit. Defaults to 3. \n\n       --trace\n           Record traces from Semgrep scans to help debugging. This feature\n           is meant for internal use and may be changed or removed without\n           warning. \n\n       --trace-endpoint=VAL (absent SEMGREP_OTEL_ENDPOINT env)\n           Endpoint to send OpenTelemetry traces to, if `--trace` is present.\n           The value may be `semgrep-prod` (default), `semgrep-dev`,\n           `semgrep-local`, or any valid URL. This feature is meant for\n           internal use and may be changed or removed without warning. \n\n       --use-git-ignore\n           '--use-git-ignore' is Semgrep's default behavior. Under the\n           default behavior, Git-tracked files are not excluded by Gitignore\n           rules and only untracked files are excluded by Gitignore rules.\n           '--no-git-ignore' causes semgrep to not call 'git' and not consult\n           '.gitignore' files to determine which files semgrep should scan.\n           As a result of '--no-git-ignore', gitignored files and Git\n           submodules will be scanned unless excluded by other means\n           ('.semgrepignore', '--exclude', etc.). This flag has no effect if\n           the scanning root is not in a Git repository.\n\n       -v, --verbose\n           Show more details about what rules are running, which files failed\n           to parse, etc. \n\n       --vim\n           Output results in vim single-line format.\n\n       --vim-output=VAL\n           Write a copy of the vim output to a file or post to URL.\n\n       --x-dump-rule-partitions=VAL (absent=0)\n           Internal flag.\n\n       --x-dump-rule-partitions-dir=VAL\n           Internal flag.\n\n       --x-dump-rule-partitions-strategy=VAL\n           Internal flag.\n\n       --x-eio\n           [INTERNAL] Rely on an EIO based implementation for the -j flag\n\n       --x-ignore-semgrepignore-files\n           [INTERNAL] Ignore all '.semgrepignore' files found in the project\n           tree for the purpose of selecting target files to be scanned by\n           semgrep. Other filters may still apply. THIS OPTION IS NOT PART OF\n           THE SEMGREP API AND MAY CHANGE OR DISAPPEAR WITHOUT NOTICE. \n\n       --x-merge-partial-results-dir=VAL\n           Internal flag.\n\n       --x-merge-partial-results-output=VAL\n           Internal flag.\n\n       --x-partial-config=VAL\n           Internal flag.\n\n       --x-partial-output=VAL\n           Internal flag.\n\n       --x-pro-naming\n           <internal, do not use>\n\n       --x-semgrepignore-filename=FILENAME\n           [INTERNAL] Files named FILENAME shall be consulted instead of the\n           files named '.semgrepignore'. This option can be useful for\n           testing semgrep on intentionally broken code that should normally\n           be ignored.\n\n       --x-tr\n           <internal, do not use>\n\n       --x-upload-partial-results=VAL\n           Internal flag.\n\n       --x-upload-partial-results-scan-id=VAL\n           Internal flag.\n\n       --x-validate-partial-results-actual=VAL\n           Internal flag.\n\n       --x-validate-partial-results-expected=VAL\n           Internal flag.\n\nCOMMON OPTIONS\n       --help[=FMT] (default=auto)\n           Show this help in format FMT. The value FMT must be one of auto,\n           pager, groff or plain. With auto, the format is pager or plain\n           whenever the TERM env var is dumb or undefined.\n\nEXIT STATUS\n       semgrep ci exits with:\n\n       0   on success.\n\n       123 on indiscriminate errors reported on standard error.\n\n       124 on command line parsing errors.\n\n       125 on unexpected internal errors (bugs).\n\nENVIRONMENT\n       These environment variables affect the execution of semgrep ci:\n\n       SEMGREP_AUDIT_ON\n           See option --audit-on.\n\n       SEMGREP_BASELINE_COMMIT\n           See option --baseline-commit.\n\n       SEMGREP_ENABLE_VERSION_CHECK\n           See option --enable-version-check.\n\n       SEMGREP_FORCE_COLOR\n           See option --force-color.\n\n       SEMGREP_OTEL_ENDPOINT\n           See option --trace-endpoint.\n\n       SEMGREP_SEND_METRICS\n           See option --metrics.\n\n       SEMGREP_SUPPRESS_ERRORS\n           See option --suppress-errors.\n\nAUTHORS\n       Semgrep Inc. <support@semgrep.com>\n\nBUGS\n       If you encounter an issue, please report it at\n       https://github.com/semgrep/semgrep/issues\n\n"})})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}const h={slug:"cli-reference",append_help_link:!0,description:"Reference for the Semgrep command-line interface including options and exit code behavior.",tags:["Deployment","CLI"],hide_title:!0,title:"CLI reference"},g="CLI reference",f={},b=[{value:"Semgrep commands",id:"semgrep-commands",level:2},{value:"<code>semgrep ci</code> and <code>semgrep scan</code> command options",id:"semgrep-ci-and-semgrep-scan-command-options",level:2},{value:"Ignore files",id:"ignore-files",level:2},{value:"Connect to Semgrep Registry through a proxy",id:"connect-to-semgrep-registry-through-a-proxy",level:2},{value:"Exit codes",id:"exit-codes",level:2}];function y(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"cli-reference",children:"CLI reference"})}),"\n",(0,o.jsxs)(n.p,{children:["This document provides the outputs of the following ",(0,o.jsx)(n.a,{href:"https://github.com/semgrep/semgrep",children:"Semgrep CLI"})," tool commands:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"semgrep --help"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"semgrep scan --help"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"semgrep ci --help"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"In addition, this page also gives an overview of the Semgrep CLI exit codes."}),"\n",(0,o.jsx)(n.h2,{id:"semgrep-commands",children:"Semgrep commands"}),"\n",(0,o.jsx)(n.p,{children:"For a list of available commands, run the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"semgrep --help\n"})}),"\n",(0,o.jsx)(n.p,{children:"Command output:"}),"\n",(0,o.jsx)(c,{}),"\n",(0,o.jsxs)(n.h2,{id:"semgrep-ci-and-semgrep-scan-command-options",children:[(0,o.jsx)(n.code,{children:"semgrep ci"})," and ",(0,o.jsx)(n.code,{children:"semgrep scan"})," command options"]}),"\n",(0,o.jsxs)(n.p,{children:["You can invoke Semgrep using the CLI with either ",(0,o.jsx)(n.code,{children:"semgrep ci"})," or ",(0,o.jsx)(n.code,{children:"semgrep scan"}),"."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)("summary",{children:["Differences between ",(0,o.jsx)(n.code,{children:"semgrep ci"})," and ",(0,o.jsx)(n.code,{children:"semgrep scan"})]}),(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"semgrep scan"})," command is primarily used for local scans and is suitable if you want to scan your codebase for security issues without requiring a Semgrep account. You can run scans using specific rules or rulesets. For example, to use the default ruleset, the command would be ",(0,o.jsx)(n.code,{children:'semgrep scan --config "p/default"'}),". By default, these scans don't return failing error codes on findings for further handling."]}),(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"semgrep ci"})," command is primarily used in CI pipelines for both full scans of codebases, as well as diff-aware scans that are initiated in the context of a pull request or a merge request. With ",(0,o.jsx)(n.code,{children:"semgrep ci"}),", Semgrep uses the policies and rules defined by your organization. It also uses cross-file (interfile) and cross-function (intrafile) analysis for improved results. By default, these scans return failing error codes on findings for further handling."]})]}),"\n",(0,o.jsxs)(n.p,{children:["You can list all available ",(0,o.jsx)(n.code,{children:"semgrep ci"})," or ",(0,o.jsx)(n.code,{children:"semgrep scan"})," options by running ",(0,o.jsx)(n.code,{children:"semgrep ci --help"})," or ",(0,o.jsx)(n.code,{children:"semgrep scan --help"}),", respectively. The available options are also listed below; ",(0,o.jsx)(n.strong,{children:"select the tab that best fits the command that you're using."})]}),"\n",(0,o.jsxs)(i.A,{children:[(0,o.jsx)(a.A,{value:"semgrep scan --help",label:"semgrep scan --help",children:(0,o.jsx)(d,{})}),(0,o.jsx)(a.A,{value:"semgrep ci --help",label:"semgrep ci --help",default:!0,children:(0,o.jsx)(m,{})})]}),"\n",(0,o.jsx)(n.h2,{id:"ignore-files",children:"Ignore files"}),"\n",(0,o.jsxs)(n.p,{children:["The Semgrep command line tool supports a ",(0,o.jsx)(n.code,{children:".semgrepignore"})," file that follows ",(0,o.jsx)(n.code,{children:".gitignore"})," syntax and is used to skip files and directories during scanning. This is commonly used to avoid vendor and test related code. For a complete example, see the ",(0,o.jsx)(n.a,{href:"https://github.com/semgrep/semgrep/blob/develop/.semgrepignore",children:".semgrepignore file on Semgrep\u2019s source code"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["In addition to ",(0,o.jsx)(n.code,{children:".semgrepignore"})," there are several methods to set up ignore patterns. See ",(0,o.jsx)(n.a,{href:"/ignoring-files-folders-code",children:"Ignoring files, folders, or code"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"connect-to-semgrep-registry-through-a-proxy",children:"Connect to Semgrep Registry through a proxy"}),"\n",(0,o.jsxs)(n.p,{children:["Semgrep uses the Python3 ",(0,o.jsx)(n.code,{children:"requests"})," library. Set the following environment variables to point to your proxy:"]}),"\n",(0,o.jsx)("pre",{children:(0,o.jsxs)(n.p,{children:['export HTTP_PROXY="',(0,o.jsx)("span",{className:"placeholder",children:"HTTP_PROXY_URL"}),'"',(0,o.jsx)("br",{}),'\nexport HTTPS_PROXY="',(0,o.jsx)("span",{className:"placeholder",children:"HTTPS_PROXY_URL"}),'"']})}),"\n",(0,o.jsx)(n.p,{children:"For example:"}),"\n",(0,o.jsx)("pre",{children:(0,o.jsxs)(n.p,{children:['export HTTP_PROXY="',(0,o.jsx)(n.a,{href:"http://10.10.1.10:3128",children:"http://10.10.1.10:3128"}),'" ',(0,o.jsx)("br",{}),'\nexport HTTPS_PROXY="',(0,o.jsx)(n.a,{href:"http://10.10.1.10:1080",children:"http://10.10.1.10:1080"}),'"']})}),"\n",(0,o.jsx)(n.h2,{id:"exit-codes",children:"Exit codes"}),"\n",(0,o.jsx)(n.p,{children:"Semgrep can finish with the following exit codes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"0"}),": Semgrep ran successfully and found no errors (or did find errors, but the ",(0,o.jsx)(n.code,{children:"--error"})," flag is ",(0,o.jsx)(n.strong,{children:"not"})," being used)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"1"}),": Semgrep ran successfully and found issues in your code (while using the ",(0,o.jsx)(n.code,{children:"--error"})," flag)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"2"}),": Semgrep failed."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"3"}),": Invalid syntax of the scanned language. This error occurs only while using the ",(0,o.jsx)(n.code,{children:"--strict"})," flag."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"4"}),": Semgrep encountered an invalid pattern in the rule schema."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"5"}),": Semgrep configuration is not valid YAML."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"7"}),": At least one rule in the configuration is invalid."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"8"}),": Semgrep does not understand specified language."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"13"}),": The API key is invalid."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"14"}),": [Deprecated] Semgrep scan failed."]}),"\n"]}),"\n",(0,o.jsxs)(n.admonition,{type:"tip",children:[(0,o.jsxs)(n.p,{children:["To view the exit code when running ",(0,o.jsx)(n.code,{children:"semgrep scan"}),", enter the following command immediately after the Semgrep scan finishes:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"echo $?\n"})}),(0,o.jsx)(n.p,{children:"The output is a single exit code, such as:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-console",children:"1\n"})})]})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(y,{...e})}):y(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(96540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},62464:(e,n,t)=>{t.d(n,{A:()=>E});var r=t(96540),o=t(34164),s=t(80052),i=t(56347),a=t(35793),l=t(99025),c=t(4430),u=t(44148);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:o}}=e;return{value:n,label:t,attributes:r,default:o}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const o=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(o.location.search);n.set(s,e),o.replace({...o.location,search:n.toString()})}),[s,o])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,s=p(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[c,d]=h({queryString:t,groupId:o}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,s]=(0,u.Dv)(t);return[o,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:o}),b=(()=>{const e=c??g;return m({value:e,tabValues:s})?e:null})();(0,a.A)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)}),[d,f,s]),tabValues:s}}var f=t(75251);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function x(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),o=a[t].value;o!==r&&(c(n),i(o))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{l.push(e)},onKeyDown:d,onClick:u,...s,className:(0,o.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:s}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function S(e){const n=g(e);return(0,y.jsxs)("div",{className:(0,o.A)("tabs-container",b.tabList),children:[(0,y.jsx)(x,{...n,...e}),(0,y.jsx)(v,{...n,...e})]})}function E(e){const n=(0,f.A)();return(0,y.jsx)(S,{...e,children:d(e.children)},String(n))}}}]);