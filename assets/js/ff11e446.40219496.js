"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[20808],{28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>o});var s=i(96540);const t={},r=s.createContext(t);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:n},e.children)}},64155:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"semgrep-ci/findings-ci","title":"Findings in CI","description":"Learn how Semgrep Pro tracks findings and triage states in CI pipelines.","source":"@site/docs/semgrep-ci/findings-ci.md","sourceDirName":"semgrep-ci","slug":"/semgrep-ci/findings-ci","permalink":"/docs/semgrep-ci/findings-ci","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/semgrep-ci/findings-ci.md","tags":[{"inline":true,"label":"Semgrep AppSec Platform","permalink":"/docs/tags/semgrep-app-sec-platform"}],"version":"current","lastUpdatedAt":1752252315000,"frontMatter":{"slug":"findings-ci","title":"Findings in CI","hide_title":false,"description":"Learn how Semgrep Pro tracks findings and triage states in CI pipelines.","tags":["Semgrep AppSec Platform"]},"sidebar":"scanSidebar","previous":{"title":"Sample CI configurations","permalink":"/docs/semgrep-ci/sample-ci-configs"},"next":{"title":"Packages in Semgrep docker","permalink":"/docs/semgrep-ci/packages-in-semgrep-docker"}}');var t=i(74848),r=i(28453),d=i(90422);const o={slug:"findings-ci",title:"Findings in CI",hide_title:!1,description:"Learn how Semgrep Pro tracks findings and triage states in CI pipelines.",tags:["Semgrep AppSec Platform"]},a=void 0,c={},l=[{value:"Semgrep Code findings",id:"semgrep-code-findings",level:2},{value:"Finding status",id:"finding-status",level:3},...d.RM];function h(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"When running any Semgrep product in CI, Semgrep is able to track the lifetime of an individual finding. When configured to perform a diff-aware scan, Semgrep only shows new findings relative to some specified baseline commit."}),"\n",(0,t.jsx)(n.p,{children:"In the code, a Semgrep finding in CI is defined by a 4-tuple:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"(rule ID, file path, syntactic context, index)\n"})}),"\n",(0,t.jsx)(n.p,{children:"These states correspond to:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rule ID"}),": The rule's ID within the Semgrep ecosystem."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"file path"}),": The filesystem path where the finding occurred."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"syntactic context"}),": The lines of code corresponding to the finding."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"index"}),": An index into identical findings within a file. This is used to disambiguate findings if the same ",(0,t.jsx)(n.code,{children:"syntactic context"})," occurs multiple times in the same file."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"semgrep-code-findings",children:"Semgrep Code findings"}),"\n",(0,t.jsx)(n.p,{children:"Semgrep AppSec Platform builds on CI findings to track status and provide additional context for managing findings within your organization. A finding can be one of four statuses in Semgrep AppSec Platform:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"OPEN"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"REVIEWING"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"FIXING"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"IGNORED"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"FIXED"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"finding-status",children:"Finding status"}),"\n",(0,t.jsxs)(n.p,{children:["You can manage finding status through triage in Semgrep AppSec Platform's ",(0,t.jsx)(n.strong,{children:"Findings"})," page. The finding statuses are as follows:"]}),"\n",(0,t.jsx)(d.Ay,{})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},90422:(e,n,i)=>{i.d(n,{Ay:()=>o,RM:()=>r});var s=i(74848),t=i(28453);const r=[{value:"Removed findings",id:"removed-findings",level:3},{value:"Triage behavior across refs and branches",id:"triage-behavior-across-refs-and-branches",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Status"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Open"})}),(0,s.jsx)(n.td,{children:"Findings are open by default. A finding is open if it was present the last time Semgrep scanned the code and has not been ignored. An open finding represents a match between the code and a rule enabled in the repository. Open findings require action, such as rewriting the code to eliminate the detected vulnerability."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Reviewing"})}),(0,s.jsx)(n.td,{children:"Indicates that the finding requires investigation to determine what the next steps in the triage process should be."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Fixing"})}),(0,s.jsx)(n.td,{children:"Findings for which you have decided to fix. Commonly used to indicate that these findings are tracked in Jira or assigned to developers for further work."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Fixed"})}),(0,s.jsx)(n.td,{children:"Fixed findings were detected in a previous scan but are no longer detected in the most recent scan of that same branch due to changes in the code."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Ignored"})}),(0,s.jsxs)(n.td,{children:["Findings that are ignored are present in the code but have been labeled as unimportant. Ignore findings that are false positives or deprioritized issues. Mark findings as ",(0,s.jsx)(n.a,{href:"/semgrep-code/triage-remediation",children:"ignored through Semgrep AppSec Platform"})," or by adding a ",(0,s.jsx)(n.a,{href:"/ignoring-files-folders-code/#reference-summary",children:"nosemgrep code comment"}),". You can also provide a reason for why you are ignoring a finding: ",(0,s.jsx)(n.strong,{children:"False positive"}),", ",(0,s.jsx)(n.strong,{children:"Acceptable risk"}),", ",(0,s.jsx)(n.strong,{children:"No time to fix"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"removed-findings",children:"Removed findings"}),"\n",(0,s.jsxs)(n.p,{children:["Findings can also be ",(0,s.jsx)(n.strong,{children:"removed"}),". Semgrep considers a finding removed if it is not found in the most recent scan of the branch where Semgrep initially detected it due to any of the following conditions:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The rule that detected the finding isn't enabled in the policy anymore."}),"\n",(0,s.jsx)(n.li,{children:"The rule that detected the finding was updated such that it no longer detects the finding."}),"\n",(0,s.jsxs)(n.li,{children:["The file path where the finding appeared is no longer found. The file path was deleted, renamed, added to a ",(0,s.jsx)(n.code,{children:".semgrepignore"})," file, added to a ",(0,s.jsx)(n.code,{children:".gitignore"})," file, or added to the list of ignored paths in Semgrep AppSec Platform."]}),"\n",(0,s.jsx)(n.li,{children:"For GitHub organization accounts: the PR or MR where the finding was detected has been closed without merging."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Your removed findings do not count toward the fix rate or the number of findings. The removed findings also do not appear in Semgrep AppSec Platform."}),"\n",(0,s.jsx)(n.h3,{id:"triage-behavior-across-refs-and-branches",children:"Triage behavior across refs and branches"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When you triage a finding as ignored, reviewing, fixing, or reopened, Semgrep always triages across other branches and ",(0,s.jsx)(n.a,{href:"https://git-scm.com/book/en/v2/Git-Internals-Git-References",children:"Git references"})," (refs)."]}),"\n",(0,s.jsxs)(n.li,{children:["At scan time, there's automatic triaging that occurs in specific cases, and the behavior changes depending on the type of scan:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Full scans"}),": if the current branch includes a finding that was","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Previously introduced in another branch ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"and"})})]}),"\n",(0,s.jsx)(n.li,{children:"Triaged to a specific state\nThen the finding in the current branch is triaged to that same state."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Diff-aware scan"}),": findings introduced in a diff-aware scan are ",(0,s.jsx)(n.strong,{children:"not"})," automatically triaged at scan time, even if there are other instances of that finding on branches that have been triaged."]}),"\n"]}),"\n"]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);