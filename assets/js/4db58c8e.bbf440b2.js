"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[81182],{10064:(e,n,i)=>{i.d(n,{Ay:()=>o,RM:()=>a});var t=i(74848),s=i(28453);const a=[];function r(e){const n={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The following command runs an optimized set of rules for your project:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"semgrep --config p/default\n"})})]})}function o(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},19610:(e,n,i)=>{i.d(n,{Ay:()=>o,RM:()=>a});var t=i(74848),s=i(28453);const a=[];function r(e){const n={p:"p",...(0,s.R)(),...e.components};return(0,t.jsx)(n.p,{children:"This is a command injection prevention cheat sheet by Semgrep, Inc. It contains code patterns of potential ways to run an OS command in an application. Instead of scrutinizing code for exploitable vulnerabilities, the recommendations in this cheat sheet pave a safe road for developers that mitigate the possibility of command injection in your code. By following these recommendations, you can be reasonably sure your code is free of command injection."})}function o(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},21250:(e,n,i)=>{i.d(n,{A:()=>s});i(96540);var t=i(74848);function s(e){let{ruleId:n}=e;const i=new URL("https://semgrep.dev/r");return i.searchParams.set("q",n),(0,t.jsx)("a",{href:i,target:"_blank",children:n})}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(96540);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}},53810:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>m,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"cheat-sheets/java-command-injection","title":"Command injection prevention for Java","description":"Mitigate command injection in Java.","source":"@site/docs/cheat-sheets/java-command-injection.mdx","sourceDirName":"cheat-sheets","slug":"/cheat-sheets/java-command-injection","permalink":"/docs/cheat-sheets/java-command-injection","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main?base=kyle-semgrep:main/docs/cheat-sheets/java-command-injection.mdx","tags":[],"version":"current","lastUpdatedAt":1752253235000,"frontMatter":{"slug":"java-command-injection","description":"Mitigate command injection in Java."},"sidebar":"cheatsheetSidebar","previous":{"title":"Command injection prevention for Go","permalink":"/docs/cheat-sheets/go-command-injection"},"next":{"title":"Command injection prevention for JavaScript","permalink":"/docs/cheat-sheets/javascript-command-injection"}}');var s=i(74848),a=i(28453),r=i(21250),o=i(19610),c=i(10064);const l={slug:"java-command-injection",description:"Mitigate command injection in Java."},d="Command injection prevention for Java",m={},u=[...o.RM,{value:"Check your project using Semgrep",id:"check-your-project-using-semgrep",level:3},...c.RM,{value:"1. Running an OS command",id:"1-running-an-os-command",level:2},{value:"1.A. Running OS commands with Runtime.getRuntime().exec()",id:"1a-running-os-commands-with-runtimegetruntimeexec",level:3},{value:"References",id:"references",level:4},{value:"Mitigation",id:"mitigation",level:4},{value:"Semgrep rule",id:"semgrep-rule",level:4},{value:"1.B. Running OS processes with ProcessBuilder",id:"1b-running-os-processes-with-processbuilder",level:3},{value:"References",id:"references-1",level:4},{value:"Mitigation",id:"mitigation-1",level:4},{value:"Semgrep rule",id:"semgrep-rule-1",level:4}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"command-injection-prevention-for-java",children:"Command injection prevention for Java"})}),"\n",(0,s.jsx)(o.Ay,{}),"\n",(0,s.jsx)(n.h3,{id:"check-your-project-using-semgrep",children:"Check your project using Semgrep"}),"\n",(0,s.jsx)(c.Ay,{}),"\n",(0,s.jsx)(n.h2,{id:"1-running-an-os-command",children:"1. Running an OS command"}),"\n",(0,s.jsx)(n.h3,{id:"1a-running-os-commands-with-runtimegetruntimeexec",children:"1.A. Running OS commands with Runtime.getRuntime().exec()"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"exec"})," call executes the specified string command in a separate process. This is dangerous if a command string is controlled by user input and could result in command injection."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:' // exec example\nRuntime.getRuntime().exec("ls -la")\n\n// Vunerable\nString input = "&& cat /etc/passwd"; // value supplied by user input\nRuntime r = Runtime.getRuntime();\nr.exec("some_tool -t param1 param2 " + input);\n\n// Vunerable\nString input = "cat /etc/passwd"; // value supplied by user input\nRuntime.getRuntime().exec("bash", "-c", input);\n'})}),"\n",(0,s.jsx)(n.h4,{id:"references",children:"References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.a,{href:"https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#exec(java.lang.String)",children:[(0,s.jsx)(n.code,{children:"exec"})," documentation"]})}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"mitigation",children:"Mitigation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Always try to use internal Java API (if it exists) instead of running an OS command. In other words, use internal language features instead of invoking commands that can be exploited."}),"\n",(0,s.jsxs)(n.li,{children:["Do not include command arguments in a command string, use parameterization instead. For example:",(0,s.jsx)("br",{}),"\nUse:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Runtime.getRuntime().exec("/path/to/myCommand", "myArg1", inputValue)\n'})}),"\n","Instead of:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Runtime.getRuntime().exec("bash", "-c", "myCommand myArg1 " + inputValue)\n'})}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"If it is not possible, then strip the input of everything except alphanumeric characters provided for the command string and arguments."}),"\n",(0,s.jsxs)(n.li,{children:["Do ",(0,s.jsx)(n.strong,{children:"not"})," use direct user input, even if it is sanitized."]}),"\n",(0,s.jsx)(n.li,{children:"If it is not possible to avoid direct user input, do not allow running arbitrary commands. Use an allowlist for inputs."}),"\n",(0,s.jsxs)(n.li,{children:["Strip ",(0,s.jsx)(n.code,{children:"!@#$;&*~\"'{}][-+%^"})," characters from user input that is incorporated in the command string which is later executed."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"semgrep-rule",children:"Semgrep rule"}),"\n",(0,s.jsx)(r.A,{ruleId:"java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call"}),"\n",(0,s.jsx)(n.h3,{id:"1b-running-os-processes-with-processbuilder",children:"1.B. Running OS processes with ProcessBuilder"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ProcessBuilder"})," class is used to create operating system processes. If the command string is controlled by user input it can result in command injection.\nExample:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:' // ProcessBuilder example\nProcess builder = new ProcessBuilder("ls", "-la").start();\n\n// Vunerable\nString input = "cat /etc/passwd"; // value supplied by user input\nProcessBuilder builder = new ProcessBuilder();\nbuilder.command("bash", "-c", "some_tool -t param1 param2 " + input)\n\n// Vulnerable\nString input = "cat /etc/passwd"; // value supplied by user input\nProcessBuilder builder = new ProcessBuilder();\nbuilder.command(input);\n'})}),"\n",(0,s.jsx)(n.h4,{id:"references-1",children:"References"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.a,{href:"https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html",children:[(0,s.jsx)(n.code,{children:"ProcessBuilder"})," documentation"]})}),"\n",(0,s.jsx)(n.h4,{id:"mitigation-1",children:"Mitigation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Try to avoid non-literal values in the command string."}),"\n",(0,s.jsx)(n.li,{children:"If it is not possible to prevent non-literal values in the command string, then do not allow running arbitrary commands. Use an allowlist for inputs."}),"\n",(0,s.jsxs)(n.li,{children:["Do not include command arguments in a command string, use parameterization instead. For example:",(0,s.jsx)("br",{}),"\nUse:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'new ProcessBuilder("/path/to/myCommand", "myArg1", inputValue);\n'})}),"\n","Instead of:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'new ProcessBuilder("bash", "-c", "myCommand myArg1 " + inputValue);\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"semgrep-rule-1",children:"Semgrep rule"}),"\n",(0,s.jsx)(r.A,{ruleId:"java.lang.security.audit.command-injection-process-builder.command-injection-process-builder"})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);