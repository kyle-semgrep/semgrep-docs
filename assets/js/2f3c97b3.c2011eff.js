"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[90332],{10064:(e,n,s)=>{s.d(n,{Ay:()=>a,RM:()=>t});var i=s(74848),r=s(28453);const t=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The following command runs an optimized set of rules for your project:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"semgrep --config p/default\n"})})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},19610:(e,n,s)=>{s.d(n,{Ay:()=>a,RM:()=>t});var i=s(74848),r=s(28453);const t=[];function l(e){const n={p:"p",...(0,r.R)(),...e.components};return(0,i.jsx)(n.p,{children:"This is a command injection prevention cheat sheet by Semgrep, Inc. It contains code patterns of potential ways to run an OS command in an application. Instead of scrutinizing code for exploitable vulnerabilities, the recommendations in this cheat sheet pave a safe road for developers that mitigate the possibility of command injection in your code. By following these recommendations, you can be reasonably sure your code is free of command injection."})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},21250:(e,n,s)=>{s.d(n,{A:()=>r});s(96540);var i=s(74848);function r(e){let{ruleId:n}=e;const s=new URL("https://semgrep.dev/r");return s.searchParams.set("q",n),(0,i.jsx)("a",{href:s,target:"_blank",children:n})}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},99927:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"cheat-sheets/ruby-command-injection","title":"Command injection prevention for Ruby","description":"Command injection prevention cheat sheet for Ruby.","source":"@site/docs/cheat-sheets/ruby-command-injection.mdx","sourceDirName":"cheat-sheets","slug":"/cheat-sheets/ruby-command-injection","permalink":"/docs/cheat-sheets/ruby-command-injection","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main?base=kyle-semgrep:main/docs/cheat-sheets/ruby-command-injection.mdx","tags":[],"version":"current","lastUpdatedAt":1752253235000,"frontMatter":{"slug":"ruby-command-injection","description":"Command injection prevention cheat sheet for Ruby."},"sidebar":"cheatsheetSidebar","previous":{"title":"Command injection prevention for Python","permalink":"/docs/cheat-sheets/python-command-injection"},"next":{"title":"XSS","permalink":"/docs/category/xss"}}');var r=s(74848),t=s(28453),l=s(21250),a=s(19610),c=s(10064);const o={slug:"ruby-command-injection",description:"Command injection prevention cheat sheet for Ruby."},d="Command injection prevention for Ruby",u={},h=[...a.RM,{value:"Check your project using Semgrep",id:"check-your-project-using-semgrep",level:3},...c.RM,{value:"1. Running OS commands",id:"1-running-os-commands",level:2},{value:"1.A. Open3 module",id:"1a-open3-module",level:3},{value:"References",id:"references",level:4},{value:"Mitigation",id:"mitigation",level:4},{value:"Semgrep rule",id:"semgrep-rule",level:4},{value:"1.B. open() function",id:"1b-open-function",level:3},{value:"References",id:"references-1",level:4},{value:"Mitigation",id:"mitigation-1",level:4},{value:"Semgrep rule",id:"semgrep-rule-1",level:4},{value:"1.C. system() function",id:"1c-system-function",level:3},{value:"References",id:"references-2",level:4},{value:"Mitigation",id:"mitigation-2",level:4},{value:"Semgrep rule",id:"semgrep-rule-2",level:4},{value:"1.D. exec() function",id:"1d-exec-function",level:3},{value:"References",id:"references-3",level:4},{value:"Mitigation",id:"mitigation-3",level:4},{value:"Semgrep rule",id:"semgrep-rule-3",level:4},{value:"1.D. spawn() function",id:"1d-spawn-function",level:3},{value:"References",id:"references-4",level:4},{value:"Mitigation",id:"mitigation-4",level:4},{value:"Semgrep rule",id:"semgrep-rule-4",level:4},{value:"1.E. Backticks (``) or %x[command] methods",id:"1e-backticks--or-xcommand-methods",level:3},{value:"References",id:"references-5",level:4},{value:"Mitigation",id:"mitigation-5",level:4},{value:"Semgrep rule",id:"semgrep-rule-5",level:4},{value:"1.F. Process.spawn and Process.exec methods",id:"1f-processspawn-and-processexec-methods",level:3},{value:"References",id:"references-6",level:4},{value:"Mitigation",id:"mitigation-6",level:4},{value:"Semgrep rule",id:"semgrep-rule-6",level:4},{value:"1.F. PTY.spawn method",id:"1f-ptyspawn-method",level:3},{value:"References",id:"references-7",level:4},{value:"Mitigation",id:"mitigation-7",level:4},{value:"Semgrep rule",id:"semgrep-rule-7",level:4}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"command-injection-prevention-for-ruby",children:"Command injection prevention for Ruby"})}),"\n",(0,r.jsx)(a.Ay,{}),"\n",(0,r.jsx)(n.h3,{id:"check-your-project-using-semgrep",children:"Check your project using Semgrep"}),"\n",(0,r.jsx)(c.Ay,{}),"\n",(0,r.jsx)(n.h2,{id:"1-running-os-commands",children:"1. Running OS commands"}),"\n",(0,r.jsx)(n.h3,{id:"1a-open3-module",children:"1.A. Open3 module"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Open3"})," grants access to running processes when running another program. For more information, see ",(0,r.jsx)(n.a,{href:"https://docs.ruby-lang.org/en/2.0.0/Open3.html",children:"Ruby documentation"}),". Such methods as ",(0,r.jsx)(n.code,{children:"capture2"}),", ",(0,r.jsx)(n.code,{children:"capture2e"}),", ",(0,r.jsx)(n.code,{children:"capture3"}),", ",(0,r.jsx)(n.code,{children:"popen2"}),", ",(0,r.jsx)(n.code,{children:"popen2e"}),", ",(0,r.jsx)(n.code,{children:"popen3"}),", ",(0,r.jsx)(n.code,{children:"pipeline"}),", ",(0,r.jsx)(n.code,{children:"pipeline_r"}),", ",(0,r.jsx)(n.code,{children:"pipeline_rw"}),", ",(0,r.jsx)(n.code,{children:"pipeline_start"})," and ",(0,r.jsx)(n.code,{children:"pipeline_w"})," are intended for running commands provided as a string. Letting user supplied data in a command that is passed as an argument to one of these methods, can create an opportunity for a command injection vulnerability."]}),"\n",(0,r.jsx)(n.p,{children:"Examples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'require \'open3\'\n\n# safe\nOpen3.popen3("ls -la")\n\n# vulnerable\nuser_input = "  && cat /etc/passwd" # Value supplied by user\nOpen3.popen3("ls #{user_input}")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'require \'open3\'\n\n# safe\nfname = "/usr/share/man/man1/ls.1.gz"\nOpen3.pipeline(["zcat", fname], "nroff -man", "colcrt")\n\n# vulnerable\nuser_input = "  && cat /etc/passwd" # Value supplied by user\nOpen3.pipeline("zcat #{user_input}", "nroff -man", "colcrt")\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.ruby-lang.org/en/2.0.0/Open3.html",children:(0,r.jsx)(n.code,{children:"Open3"})})," documentation."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation",children:"Mitigation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Do not pass user input to ",(0,r.jsx)(n.code,{children:"Open3"})," methods."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Always try to use the internal Ruby API (if it exists) instead of running an OS command. Use internal language features instead of invoking commands that can be exploited."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Don't pass user-controlled input or use an allowlist for inputs."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Do not include command arguments in a command string, use parameterization instead. For example:",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.p,{children:"Instead of the following code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'Open3.pipeline(["bash", "-c", "myCommand myArg1 " + input_value])\n'})}),"\n",(0,r.jsx)(n.p,{children:"Use:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'Open3.pipeline(["/path/to/myCommand", "myArg1", input_value])\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Define a list of allowed arguments."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Avoid non-literal values for the command string. Strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.lang.security.dangerous-open3-pipeline.dangerous-open3-pipeline"}),"\n",(0,r.jsx)(n.h3,{id:"1b-open-function",children:"1.B. open() function"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"open(...)"})," function creates an input/output (I/O) object connected to a stream, file, or subprocess. If the first argument starts with a pipe character (",(0,r.jsx)(n.code,{children:"|"}),"), it creates a subprocess. An opportunity for a command injection vulnerability is created when the subprocess includes user input in a command argument to ",(0,r.jsx)(n.code,{children:"open()"})," function."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# safe\nopen("my_file.txt")\n\n# vulnerable\nuser_input = \u201c|cat /etc/passwd\u201d # Value supplied by user\nopen(user_input)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-1",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://apidock.com/ruby/Kernel/open",children:"open"})," documentation."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-1",children:"Mitigation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not provide raw user input to the ",(0,r.jsx)(n.code,{children:"open()"})," function."]}),"\n",(0,r.jsx)(n.li,{children:"Always try to use the internal Ruby API (if it exists) instead of running an OS command. Use internal language features instead of invoking commands that can be exploited."}),"\n",(0,r.jsx)(n.li,{children:"If the use of user input is unavoidable, create an allowlist for inputs, such as allowed command arguments."}),"\n",(0,r.jsx)(n.li,{children:"Strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-1",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.lang.security.dangerous-open.dangerous-open"}),"\n",(0,r.jsx)(n.h3,{id:"1c-system-function",children:"1.C. system() function"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"system()"})," function executes OS commands in a subshell. This might potentially lead to a command injection vulnerability when used with user input. A malicious actor can potentially run OS commands to exploit the system."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# safe\nsystem("ls -lah /tmp")\n\n# vulnerable\nuser_input = \' && cat /etc/passwd\' # Value supplied by user\nsystem("ls #{user_input}")\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-2",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://apidock.com/ruby/Kernel/system",children:[(0,r.jsx)(n.code,{children:"system()"})," documentation"]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-2",children:"Mitigation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not provide raw user input to the ",(0,r.jsx)(n.code,{children:"system()"})," function."]}),"\n",(0,r.jsx)(n.li,{children:"Always try to use the internal Ruby API (if it exists) instead of running an OS command. Use internal language features instead of invoking commands that can be exploited."}),"\n",(0,r.jsx)(n.li,{children:"If the use of user input is unavoidable, create an allowlist for inputs, such as allowed arguments."}),"\n",(0,r.jsx)(n.li,{children:"Strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-2",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.lang.security.dangerous-exec.dangerous-exec"}),"\n",(0,r.jsx)(n.h3,{id:"1d-exec-function",children:"1.D. exec() function"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"exec()"})," function executes OS commands. This might potentially lead to a command injection vulnerability when used with user input. A malicious actor can potentially run OS commands to exploit the system."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# safe\nexec("ls -lah /tmp")\n\n# vulnerable\nuser_input = \' && cat /etc/passwd\' # Value supplied by user\nexec("ls #{user_input}")\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-3",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://apidock.com/ruby/Kernel/exec",children:[(0,r.jsx)(n.code,{children:"exec()"})," documentation"]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-3",children:"Mitigation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not provide raw user input to the ",(0,r.jsx)(n.code,{children:"exec()"})," function."]}),"\n",(0,r.jsx)(n.li,{children:"Always try to use the internal Ruby API (if it exists) instead of running an OS command. Use internal language features instead of invoking commands that can be exploited."}),"\n",(0,r.jsx)(n.li,{children:"If the use of user input is unavoidable, create an allowlist for inputs, such as allowed arguments."}),"\n",(0,r.jsx)(n.li,{children:"Strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-3",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.lang.security.dangerous-exec.dangerous-exec"}),"\n",(0,r.jsx)(n.h3,{id:"1d-spawn-function",children:"1.D. spawn() function"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"spawn()"})," function executes OS commands. This might potentially lead to a command injection vulnerability when used with user input. A malicious actor can potentially run OS commands to exploit the system."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# safe\npid = spawn("ls -lah /tmp")\nProcess.wait pid\n\n# vulnerable\nuser_input = \' && cat /etc/passwd\' # Value supplied by user\npid = spawn("ls #{user_input}")\nProcess.wait pid\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-4",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://apidock.com/ruby/Kernel/spawn",children:[(0,r.jsx)(n.code,{children:"spawn()"})," documentation"]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-4",children:"Mitigation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not provide raw user input to the ",(0,r.jsx)(n.code,{children:"spawn()"})," function."]}),"\n",(0,r.jsx)(n.li,{children:"Always try to use the internal Ruby API (if it exists) instead of running an OS command. Use internal language features instead of invoking commands that can be exploited."}),"\n",(0,r.jsx)(n.li,{children:"If the use of user input is unavoidable, create an allowlist for inputs, such as allowed arguments."}),"\n",(0,r.jsx)(n.li,{children:"Strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-4",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.lang.security.dangerous-exec.dangerous-exec"}),"\n",(0,r.jsx)(n.h3,{id:"1e-backticks--or-xcommand-methods",children:"1.E. Backticks (``) or %x[command] methods"}),"\n",(0,r.jsxs)(n.p,{children:["Backticks ",(0,r.jsx)(n.code,{children:"``"})," or ",(0,r.jsx)(n.code,{children:"%x[command]"})," methods allow Ruby developers to execute system commands and return their outputs. Both methods accept string interpolation. As for other methods mentioned in this cheat sheet, when this method is used with user input, it can lead to a command injection vulnerability."]}),"\n",(0,r.jsxs)(n.p,{children:["Ruby interprets the text inside of backticks as an OS command. For example, ",(0,r.jsx)(n.code,{children:"`ls -l`"})," interpreted by Ruby prints the contents of current working directory. In addition, if the ",(0,r.jsx)(n.code,{children:"%x"})," is used with various delimiters, it is also interpreted as an OS command. The ",(0,r.jsx)(n.code,{children:"`ls -l`"})," in Ruby is equivivalent to the following:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"%x`ls -l`"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"%x;ls -l;"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"%x(ls -l)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'%x"ls -l"'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"%x{ls -l}"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"%x:ls -l:"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"%x'ls -l'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"%x[ls -l]"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# safe\n`ls -lah /tmp`\n\n%x[ ls -lah /tmp ]\n%x{ ls -lah /tmp }\n\n# vulnerable\nuser_input = ' && cat /etc/passwd' # Value supplied by user\n`ls #{user_input}`\n\n%x{ls #{user_input}}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-5",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Ruby ",(0,r.jsx)(n.a,{href:"https://ruby-doc.org/3.2.1/Kernel.html",children:"Kernel"})," documentation."]}),"\n",(0,r.jsxs)(n.li,{children:["Ruby ",(0,r.jsx)(n.a,{href:"https://ruby-doc.org/3.2.1/command_injection_rdoc.html",children:"command injection"})," documentation."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-5",children:"Mitigation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not provide raw user input to ",(0,r.jsx)(n.code,{children:"``"})," or ",(0,r.jsx)(n.code,{children:"%x"})," methods."]}),"\n",(0,r.jsx)(n.li,{children:"Always try to use the internal Ruby API (if it exists) instead of running an OS command. Use internal language features instead of invoking commands that can be exploited."}),"\n",(0,r.jsx)(n.li,{children:"If the use of user input is unavoidable, create an allowlist for inputs, such as allowed arguments."}),"\n",(0,r.jsx)(n.li,{children:"Strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-5",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.lang.security.dangerous-subshell.dangerous-subshell"}),"\n",(0,r.jsx)(n.h3,{id:"1f-processspawn-and-processexec-methods",children:"1.F. Process.spawn and Process.exec methods"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"spawn"})," and ",(0,r.jsx)(n.code,{children:"exec"})," methods execute a system command and return its output. Both methods accept string interpolation. Similarly to other methods mentioned in this cheat sheet, when either of these methods is used with user input, it can lead to command injection vulnerability."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://ruby-doc.org/3.2.1/Process.html",children:"https://ruby-doc.org/3.2.1/Process.html"})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# safe\nProcess.spawn("ls -alh")\nProcess.spawn("ls", "-alh")\nProcess.spawn(["ls", "-alh"])\n\n# vulnerable\nuser_input = \' && cat /etc/passwd\' # Value supplied by user\nProcess.spawn("ls #{user_input}")\n\n# safe\nProcess.exec("ls -alh")\nProcess.exec("ls", "-alh")\nProcess.exec(["ls", "-alh"])\n\n# vulnerable\nuser_input = \' && cat /etc/passwd\' # Value supplied by user\nProcess.exec("ls #{user_input}")\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-6",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://ruby-doc.org/3.2.1/Process.html",children:"Process"})," documentation."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-6",children:"Mitigation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not provide raw user input to ",(0,r.jsx)(n.code,{children:"Process.spawn"})," and ",(0,r.jsx)(n.code,{children:"Process.exec"})," methods."]}),"\n",(0,r.jsx)(n.li,{children:"Always try to use internal Ruby API (if it exists) instead of running an OS command. Use internal language features instead of invoking commands that can be exploited."}),"\n",(0,r.jsx)(n.li,{children:"If the use of user input is unavoidable, create an allowlist for inputs, such as allowed arguments."}),"\n",(0,r.jsx)(n.li,{children:"Strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-6",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.lang.security.dangerous-exec.dangerous-exec"}),"\n",(0,r.jsx)(n.h3,{id:"1f-ptyspawn-method",children:"1.F. PTY.spawn method"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"PTY.spawn"})," method executes OS commands in a new terminal. This might potentially lead to a command injection vulnerability when used with user input. A malicious actor can potentially run OS commands to exploit the system."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# safe\nstdout,stdin,pid = PTY.spawn("ls -lah")\n\n# vulnerable\nuser_input = \' && cat /etc/passwd\' # Value supplied by user\nstdout,stdin,pid = PTY.spawn("ls #{user_input}")\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-7",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://ruby-doc.org/3.2.1/exts/pty/PTY.html",children:"PTY"})," library documentation."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-7",children:"Mitigation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not provide raw user input to ",(0,r.jsx)(n.code,{children:"PTY.spawn"})," methods."]}),"\n",(0,r.jsx)(n.li,{children:"Always try to use the internal Ruby API (if it exists) instead of running an OS command. Use internal language features instead of invoking commands that can be exploited."}),"\n",(0,r.jsx)(n.li,{children:"If the use of user input is unavoidable, create an allowlist for inputs, such as allowed arguments."}),"\n",(0,r.jsx)(n.li,{children:"Strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-7",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.lang.security.dangerous-exec.dangerous-exec"})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);