"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[77182],{1467:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"contributing/updating-a-grammar","title":"How to upgrade the grammar for a language","description":"Like for adding a language, most of these instructions happen in","source":"@site/docs/contributing/updating-a-grammar.md","sourceDirName":"contributing","slug":"/contributing/updating-a-grammar","permalink":"/semgrep-docs/contributing/updating-a-grammar","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/contributing/updating-a-grammar.md","tags":[],"version":"current","lastUpdatedAt":1752262761000,"frontMatter":{"slug":"updating-a-grammar"},"sidebar":"aboutSidebar","previous":{"title":"Add support for a new language","permalink":"/semgrep-docs/contributing/adding-a-language"},"next":{"title":"Troubleshooting","permalink":"/semgrep-docs/contributing/troubleshooting"}}');var t=r(74848),i=r(28453);const o={slug:"updating-a-grammar"},a="How to upgrade the grammar for a language",d={},l=[{value:"Summary (ocaml-tree-sitter)",id:"summary-ocaml-tree-sitter",level:2},{value:"Components",id:"components",level:2},{value:"Before upgrading",id:"before-upgrading",level:2},{value:"Upgrade the tree-sitter-$PL submodule",id:"upgrade-the-tree-sitter-pl-submodule",level:2},{value:"Testing",id:"testing",level:2},{value:"Publishing",id:"publishing",level:2},{value:"Semgrep integration",id:"semgrep-integration",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"how-to-upgrade-the-grammar-for-a-language",children:"How to upgrade the grammar for a language"})}),"\n",(0,t.jsxs)(n.p,{children:["Like for adding a language, most of these instructions happen in\n",(0,t.jsx)(n.a,{href:"https://github.com/semgrep/ocaml-tree-sitter-semgrep",children:"ocaml-tree-sitter-semgrep"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's assume we are upgrading the grammar for the programming language ",(0,t.jsx)(n.code,{children:"$PL"}),".\n(Consider adding an environment variable to your shell to make copying some of the commands below easier)."]}),"\n",(0,t.jsx)(n.h2,{id:"summary-ocaml-tree-sitter",children:"Summary (ocaml-tree-sitter)"}),"\n",(0,t.jsx)(n.p,{children:"In ocaml-tree-sitter:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Update submodule ",(0,t.jsx)(n.code,{children:"tree-sitter-$PL"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["From ",(0,t.jsx)(n.code,{children:"lang/"}),", run ",(0,t.jsx)(n.code,{children:"./test-lang $PL"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["From ",(0,t.jsx)(n.code,{children:"lang/"}),", ask a Semgrep team developer to run ",(0,t.jsx)(n.code,{children:"./release $PL"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In semgrep:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["In the semgrep repo, update submodule ",(0,t.jsx)(n.code,{children:"semgrep-$PL"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"In the semgrep repo, update the OCaml code that maps the CST to the generic AST."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In the end, ",(0,t.jsx)(n.strong,{children:"make sure the generated code used by the main branch of\nsemgrep can be regenerated"})," from the main branch of ocaml-tree-sitter:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Merge your semgrep branch."}),"\n",(0,t.jsx)(n.li,{children:"Merge your ocaml-tree-sitter branch."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,t.jsx)(n.p,{children:"Here are the main components:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["the OCaml code generator\n",(0,t.jsx)(n.a,{href:"https://github.com/semgrep/ocaml-tree-sitter-semgrep",children:"ocaml-tree-sitter"}),":\ngenerates OCaml parsing code from tree-sitter grammars extended\nwith ",(0,t.jsx)(n.code,{children:"..."})," and such. Publishes code into the git repos of the\nform ",(0,t.jsx)(n.code,{children:"semgrep-$PL"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["the original tree-sitter grammar ",(0,t.jsx)(n.code,{children:"tree-sitter-$PL"})," e.g.,\n",(0,t.jsx)(n.a,{href:"https://github.com/tree-sitter/tree-sitter-ruby",children:"tree-sitter-ruby"}),":\nthe original tree-sitter grammar for the language.\nThis is the git submodule ",(0,t.jsx)(n.code,{children:"lang/semgrep-grammars/src/tree-sitter-$PL"}),"\nin ocaml-tree-sitter. It is installed at the project's root\nin ",(0,t.jsx)(n.code,{children:"node_modules"})," by invoking ",(0,t.jsx)(n.code,{children:"npm install"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["syntax extensions to support semgrep patterns, such as ellipses\n(",(0,t.jsx)(n.code,{children:"..."}),") and metavariables (",(0,t.jsx)(n.code,{children:"$FOO"}),").\nThis is ",(0,t.jsx)(n.code,{children:"lang/semgrep-grammars/src/semgrep-$PL"}),". It can be tested from\nthat folder with ",(0,t.jsx)(n.code,{children:"make && make test"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["an automatically-modified grammar for language ",(0,t.jsx)(n.code,{children:"$PL"})," in ",(0,t.jsx)(n.code,{children:"lang/$PL"}),".\nIt is modified so as to accommodate various requirements of the\nocaml-tree-sitter code generator. ",(0,t.jsx)(n.code,{children:"lang/$PL/src"})," and\n",(0,t.jsx)(n.code,{children:"lang/$PL/ocaml-src"})," contain the C/C++/OCaml code that will published\ninto ",(0,t.jsx)(n.code,{children:"semgrep-$PL"})," e.g.\n",(0,t.jsx)(n.a,{href:"https://github.com/semgrep/semgrep-ruby",children:"semgrep-ruby"}),"\nand used by semgrep."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/semgrep/semgrep-ruby",children:"semgrep-$PL"}),":\nprovides generated OCaml/C parsers as a dune project. Is a submodule\nof semgrep."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/semgrep/semgrep",children:"semgrep"}),": uses the parsers\nprovided by ",(0,t.jsx)(n.code,{children:"semgrep-$PL"}),", which produce a CST. The\nprogram's CST or pattern's CST is further transformed into an AST\nsuitable for pattern matching."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Make sure the above is clear in your mind before proceeding further.\nIf you have questions, the best way is reach out on the ",(0,t.jsx)(n.a,{href:"https://go.semgrep.dev/slack",children:"Semgrep\nCommunity Slack channel"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"before-upgrading",children:"Before upgrading"}),"\n",(0,t.jsxs)(n.p,{children:["Make sure the ",(0,t.jsx)(n.code,{children:"grammar.js"})," file or equivalent source files\ndefining the grammar are included in the ",(0,t.jsx)(n.code,{children:"fyi.list"})," file in\n",(0,t.jsx)(n.code,{children:"ocaml-tree-sitter/lang/$PL"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Why: It is important for tracking and ",(0,t.jsx)(n.em,{children:"understanding"})," the changes made at the\nsource."]}),"\n",(0,t.jsxs)(n.p,{children:["How: See ",(0,t.jsx)(n.a,{href:"/semgrep-docs/contributing/adding-a-language",children:"How to add support for a new language"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"upgrade-the-tree-sitter-pl-submodule",children:"Upgrade the tree-sitter-$PL submodule"}),"\n",(0,t.jsxs)(n.p,{children:["Say you want to upgrade (or downgrade) ",(0,t.jsx)(n.code,{children:"tree-sitter-$PL"})," from some old\ncommit to commit ",(0,t.jsx)(n.code,{children:"602f12b"}),". This uses the git submodule way, without\nanything weird. The commands might be something like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git submodule update --init --recursive --depth 1\ngit checkout -b upgrade-$PL\ncd lang/semgrep-grammars/src/tree-sitter-$PL\ngit fetch origin --unshallow\ngit checkout 602f12b\ncd ..\n"})}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsxs)(n.p,{children:["First, build and install ocaml-tree-sitter normally, based on the\ninstructions found in the ",(0,t.jsx)(n.a,{href:"https://github.com/semgrep/ocaml-tree-sitter-semgrep/blob/main/README.md",children:"main README"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"./configure\nmake setup\nmake\nmake install\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then, build support for your language in ",(0,t.jsx)(n.code,{children:"lang/"}),". The following\ncommands will build and test the language:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd lang\n  ./test-lang $PL\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["Check the generated code for the presence of ",(0,t.jsx)(n.code,{children:"Blank"})," nodes. Those\ncorrespond to ",(0,t.jsx)(n.a,{href:"https://github.com/tree-sitter/tree-sitter/issues/1151",children:"missing tokens"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"Check with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"grep Blank lang/$PL/ocaml-src/lib/CST.ml\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If anything comes up, you must modify the grammar so as to create\na named rule for the node of the ",(0,t.jsx)(n.code,{children:"Blank"})," kind. Eventually, the generated\n",(0,t.jsx)(n.code,{children:"CST.ml"})," should not have ",(0,t.jsx)(n.code,{children:"Blank"})," nodes anymore but a token type instead.\nWhere a ",(0,t.jsx)(n.code,{children:"Blank"})," node exists, we won't be able to get a token or its location\nat parsing time."]}),"\n",(0,t.jsxs)(n.p,{children:["If this works, we're all set. Commit the new commit for the\n",(0,t.jsx)(n.code,{children:"tree-sitter-$PL"})," submodule:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git status\ngit commit semgrep-languages/semgrep-$PL\ngit push origin upgrade-$PL\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then make a pull request to merge this into ocaml-tree-sitter's\nmain branch. It's ok to merge at this point, even if the generated code\nhasn't been exported (",(0,t.jsx)(n.strong,{children:"Publishing"})," section below) or if you haven't\ndone the necessary changes in semgrep (",(0,t.jsx)(n.strong,{children:"Semgrep integration"})," below)."]}),"\n",(0,t.jsxs)(n.p,{children:["We can now consider publishing the code to ",(0,t.jsx)(n.code,{children:"semgrep-$PL"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"publishing",children:"Publishing"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Please ",(0,t.jsx)(n.a,{href:"https://github.com/semgrep/ocaml-tree-sitter-semgrep/blob/main/doc/release.md",children:"ask someone at Semgrep, Inc. to run this step"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["From the ",(0,t.jsx)(n.code,{children:"lang"})," folder of ocaml-tree-sitter, we'll perform the\nrelease. This step redoes some of the work that was done earlier and\nchecks that everything is clean before committing and pushing the\nchanges to semgrep-$PL."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd lang\n  ./release --dry-run $PL  # dry-run release\n  ...                    # 'git status' will show changes for language $PL\n  ./release $PL  # commits and pushes to semgrep-$PL\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This step is safe. Semgrep at this point is unaffected by those\nchanges. There is now a new commit at\n",(0,t.jsx)(n.code,{children:"https://github.com/semgrep/semgrep-$PL"})," e.g.\n",(0,t.jsx)(n.a,{href:"https://github.com/semgrep/semgrep-javascript",children:"https://github.com/semgrep/semgrep-javascript"}),".\nThe ",(0,t.jsxs)(n.a,{href:"https://github.com/semgrep/semgrep-javascript/tree/main/fyi",children:[(0,t.jsx)(n.code,{children:"fyi/"})," folder"]}),"\ncontains original files from which the code was generated.\n",(0,t.jsx)(n.a,{href:"https://github.com/semgrep/semgrep-javascript/blob/main/fyi/versions",children:(0,t.jsx)(n.code,{children:"fyi/versions"})}),"\nshows the last change for each file, allowing you to check that you\ngot the correct version of ",(0,t.jsx)(n.code,{children:"grammar.js"})," or some other source file."]}),"\n",(0,t.jsx)(n.h2,{id:"semgrep-integration",children:"Semgrep integration"}),"\n",(0,t.jsxs)(n.p,{children:["From the semgrep repository, point the submodule for ",(0,t.jsx)(n.code,{children:"semgrep-$PL"}),' to the\nlatest commit from the "Publishing" step. Then rebuild semgrep-core,\nwhich will normally fail if the grammar changed. If the source\n',(0,t.jsx)(n.code,{children:"grammar.js"})," was included in the ",(0,t.jsx)(n.code,{children:"fyi"})," folder for ",(0,t.jsx)(n.code,{children:"semgrep-$PL"})," (as it\nshould), ",(0,t.jsx)(n.code,{children:"git diff HEAD^"})," should help figure out the changes since the\nlast version."]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"The main difficulty is to understand how the different git projects\ninteract and to not make mistakes when dealing with git submodules,\nwhich takes a bit of practice."}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/semgrep-docs/contributing/adding-a-language",children:"How to add support for a new language"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(96540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);