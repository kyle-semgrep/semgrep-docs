"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[89754],{10064:(e,n,s)=>{s.d(n,{Ay:()=>a,RM:()=>o});var r=s(74848),i=s(28453);const o=[];function t(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The following command runs an optimized set of rules for your project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"semgrep --config p/default\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},19610:(e,n,s)=>{s.d(n,{Ay:()=>a,RM:()=>o});var r=s(74848),i=s(28453);const o=[];function t(e){const n={p:"p",...(0,i.R)(),...e.components};return(0,r.jsx)(n.p,{children:"This is a command injection prevention cheat sheet by Semgrep, Inc. It contains code patterns of potential ways to run an OS command in an application. Instead of scrutinizing code for exploitable vulnerabilities, the recommendations in this cheat sheet pave a safe road for developers that mitigate the possibility of command injection in your code. By following these recommendations, you can be reasonably sure your code is free of command injection."})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},21250:(e,n,s)=>{s.d(n,{A:()=>i});s(96540);var r=s(74848);function i(e){let{ruleId:n}=e;const s=new URL("https://semgrep.dev/r");return s.searchParams.set("q",n),(0,r.jsx)("a",{href:s,target:"_blank",children:n})}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(96540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},73339:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>m,frontMatter:()=>c,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"cheat-sheets/python-command-injection","title":"Command injection prevention for Python","description":"Command injection prevention cheat sheet for Python.","source":"@site/docs/cheat-sheets/python-command-injection.mdx","sourceDirName":"cheat-sheets","slug":"/cheat-sheets/python-command-injection","permalink":"/semgrep-docs/cheat-sheets/python-command-injection","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main?base=kyle-semgrep:main/docs/cheat-sheets/python-command-injection.mdx","tags":[],"version":"current","lastUpdatedAt":1752254305000,"frontMatter":{"slug":"python-command-injection","description":"Command injection prevention cheat sheet for Python."},"sidebar":"cheatsheetSidebar","previous":{"title":"Command injection prevention for JavaScript","permalink":"/semgrep-docs/cheat-sheets/javascript-command-injection"},"next":{"title":"Command injection prevention for Ruby","permalink":"/semgrep-docs/cheat-sheets/ruby-command-injection"}}');var i=s(74848),o=s(28453),t=s(21250),a=s(19610),l=s(10064);const c={slug:"python-command-injection",description:"Command injection prevention cheat sheet for Python."},d="Command injection prevention for Python",u={},h=[...a.RM,{value:"Check your project using Semgrep",id:"check-your-project-using-semgrep",level:3},...l.RM,{value:"1. Running an OS command",id:"1-running-an-os-command",level:2},{value:"1.A. Using the subprocess module",id:"1a-using-the-subprocess-module",level:3},{value:"References",id:"references",level:4},{value:"Mitigation",id:"mitigation",level:4},{value:"Semgrep rule",id:"semgrep-rule",level:4},{value:"1.B. shell=True",id:"1b-shelltrue",level:3},{value:"References",id:"references-1",level:4},{value:"Mitigation",id:"mitigation-1",level:4},{value:"Semgrep rule",id:"semgrep-rule-1",level:4},{value:"1.C. Using os module to execute commands",id:"1c-using-os-module-to-execute-commands",level:3},{value:"References",id:"references-2",level:4},{value:"Mitigation",id:"mitigation-2",level:4},{value:"Semgrep rule",id:"semgrep-rule-2",level:4},{value:"1.D. Using os module to spawn a process",id:"1d-using-os-module-to-spawn-a-process",level:3},{value:"References",id:"references-3",level:4},{value:"Mitigation",id:"mitigation-3",level:4},{value:"Semgrep rule",id:"semgrep-rule-3",level:4},{value:"1.E. Replacing current process with exec",id:"1e-replacing-current-process-with-exec",level:3},{value:"References",id:"references-4",level:4},{value:"Mitigation",id:"mitigation-4",level:4},{value:"Semgrep rule",id:"semgrep-rule-4",level:4},{value:"1.F. Wildcard character in a system call that spawns a shell",id:"1f-wildcard-character-in-a-system-call-that-spawns-a-shell",level:3},{value:"References",id:"references-5",level:4},{value:"Mitigation",id:"mitigation-5",level:4},{value:"Semgrep rule",id:"semgrep-rule-5",level:4},{value:"1.G. Running shell commands asynchronously",id:"1g-running-shell-commands-asynchronously",level:3},{value:"References",id:"references-6",level:4},{value:"Mitigation",id:"mitigation-6",level:4},{value:"Semgrep rule",id:"semgrep-rule-6",level:4},{value:"1.H. Creating subprocesses asynchronously",id:"1h-creating-subprocesses-asynchronously",level:3},{value:"References",id:"references-7",level:4},{value:"Mitigation",id:"mitigation-7",level:4},{value:"Semgrep rule",id:"semgrep-rule-7",level:4}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"command-injection-prevention-for-python",children:"Command injection prevention for Python"})}),"\n",(0,i.jsx)(a.Ay,{}),"\n",(0,i.jsx)(n.h3,{id:"check-your-project-using-semgrep",children:"Check your project using Semgrep"}),"\n",(0,i.jsx)(l.Ay,{}),"\n",(0,i.jsx)(n.h2,{id:"1-running-an-os-command",children:"1. Running an OS command"}),"\n",(0,i.jsx)(n.h3,{id:"1a-using-the-subprocess-module",children:"1.A. Using the subprocess module"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"subprocess"})," module allows you to start new processes, connect to their input/output/error pipes, and obtain their return codes. Methods such as ",(0,i.jsx)(n.code,{children:"Popen"}),", ",(0,i.jsx)(n.code,{children:"run"}),", ",(0,i.jsx)(n.code,{children:"call"}),", ",(0,i.jsx)(n.code,{children:"check_call"}),", ",(0,i.jsx)(n.code,{children:"check_output"})," are intended for running commands provided as an argument. Allowing user input in a command that is passed as an argument to one of these methods can create an opportunity for a command injection vulnerability."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import subprocess\nimport sys\n\n# Vulnerable\nuser_input = "foo && cat /etc/passwd" # value supplied by user\nsubprocess.call("grep -R {} .".format(user_input), shell=True)\n\n# Vulnerable\nuser_input = "cat /etc/passwd" # value supplied by user\nsubprocess.run(["bash", "-c", user_input], shell=True)\n\n# Not vulnerable\nuser_input = "cat /etc/passwd" # value supplied by user\nsubprocess.Popen([\'ls\', \'-l\', user_input])\n\n# Not vulnerable\nsubprocess.check_output(\'ls -l dir/\')\n'})}),"\n",(0,i.jsx)(n.h4,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://docs.python.org/3/library/subprocess.html",children:[(0,i.jsx)(n.strong,{children:"subprocess"})," module documentation"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://docs.python.org/3/library/shlex.html#shlex.split",children:[(0,i.jsx)(n.strong,{children:"shlex.split"})," documentation"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://docs.python.org/3/library/shlex.html#shlex.quote",children:[(0,i.jsx)(n.strong,{children:"shlex.quote"})," documentation"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7698",children:"CVE-2020-7698: Gerapy Command Injection"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11981",children:"CVE-2020-11981: Apache Airflow Command Injection"})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"mitigation",children:"Mitigation"}),"\n",(0,i.jsxs)(n.p,{children:["Do not let a user input into ",(0,i.jsx)(n.code,{children:"subprocess"})," methods. Alternatively:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always try to use internal Python API (if it exists) instead of running an OS command. In other words, use internal language features instead of invoking commands that can be exploited."}),"\n",(0,i.jsx)(n.li,{children:"Don't pass user-controlled input."}),"\n",(0,i.jsx)(n.li,{children:"If it is not possible, use an array with a sequence of program arguments instead of a single string."}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"shlex.split"})," to correctly parse a command string into an array and ",(0,i.jsx)(n.code,{children:"shlex.quote"})," to correctly sanitize input as a command-line parameter."]}),"\n",(0,i.jsxs)(n.li,{children:["Do not include command arguments in a command string, use parameterization instead. For example:",(0,i.jsx)("br",{}),"\nUse:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'subprocess.run(["/path/to/myCommand", "myArg1", input_value])\n'})}),"\n","Instead of:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'subprocess.run(["bash", "-c", "myCommand myArg1 " + input_value])\n'})}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"If it is not possible, strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"semgrep-rule",children:"Semgrep rule"}),"\n",(0,i.jsx)(t.A,{ruleId:"python.lang.security.audit.dangerous-subprocess-use"}),"\n",(0,i.jsx)(n.h3,{id:"1b-shelltrue",children:"1.B. shell=True"}),"\n",(0,i.jsxs)(n.p,{children:["Functions from the ",(0,i.jsx)(n.code,{children:"subprocess"})," module have the ",(0,i.jsx)(n.code,{children:"shell"})," argument for specifying if the command should be executed through the shell.\nUsing ",(0,i.jsx)(n.code,{children:"shell=True"})," is dangerous because it propagates current shell settings and variables.\nThis means that variables, glob patterns, and other special shell features in the command string are processed before the command is run,\nmaking it much easier for a malicious actor to execute commands. The ",(0,i.jsx)(n.code,{children:"subprocess"})," module allows you to start new processes, connect to their input/output/error pipes, and obtain their return codes. Methods such as ",(0,i.jsx)(n.code,{children:"Popen"}),", ",(0,i.jsx)(n.code,{children:"run"}),", ",(0,i.jsx)(n.code,{children:"call"}),", ",(0,i.jsx)(n.code,{children:"check_call"}),", ",(0,i.jsx)(n.code,{children:"check_output"})," are intended for running commands provided as an argument ('args'). Allowing user input in a command that is passed as an argument to one of these methods can create an opportunity for a command injection vulnerability."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# prints home directory\nsubprocess.call('echo $HOME', shell=True)\n\n# throws an error\nsubprocess.call('echo $HOME', shell=False)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"references-1",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",children:["StackOverflow thread about ",(0,i.jsx)(n.strong,{children:"shell=True"})]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://docs.python.org/3/library/subprocess.html#frequently-used-arguments",children:["Explanation of ",(0,i.jsx)(n.strong,{children:"shell"})," argument from documentation"]})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"mitigation-1",children:"Mitigation"}),"\n",(0,i.jsxs)(n.p,{children:["Avoid using ",(0,i.jsx)(n.code,{children:"shell=True"}),". Alternatively, use ",(0,i.jsx)(n.code,{children:"shell=False"})," instead."]}),"\n",(0,i.jsx)(n.h4,{id:"semgrep-rule-1",children:"Semgrep rule"}),"\n",(0,i.jsx)(t.A,{ruleId:"python.lang.security.audit.subprocess-shell-true"}),"\n",(0,i.jsx)(n.h3,{id:"1c-using-os-module-to-execute-commands",children:"1.C. Using os module to execute commands"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"os"})," module provides a portable way of using operating system dependent functionality. Methods such as ",(0,i.jsx)(n.code,{children:"system"}),", ",(0,i.jsx)(n.code,{children:"popen"})," and deprecated ",(0,i.jsx)(n.code,{children:"popen2"}),", ",(0,i.jsx)(n.code,{children:"popen3"})," and ",(0,i.jsx)(n.code,{children:"popen4"})," are intended for running commands provided as a string. Letting user supplied data into a command that is passed as an argument to one of these methods can create an opportunity for a command injection vulnerability."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\n\n# Vulnerable\nuser_input = "foo && cat /etc/passwd" # value supplied by user\nos.system("grep -R {} .".format(user_input))\n\n# Vulnerable\nuser_input = "foo && cat /etc/passwd" # value supplied by user\nos.popen("ls -l " + user_input)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"references-2",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://docs.python.org/3/library/os.html",children:[(0,i.jsx)(n.strong,{children:"os"})," module documentation"]})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"mitigation-2",children:"Mitigation"}),"\n",(0,i.jsxs)(n.p,{children:["Do not let a user input into ",(0,i.jsx)(n.code,{children:"os"})," methods. Alternatively:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always try to use an internal Python API (if it exists) instead of running an OS command."}),"\n",(0,i.jsxs)(n.li,{children:["Consider using ",(0,i.jsx)(n.code,{children:"subprocess"})," functions with array of program arguments."]}),"\n",(0,i.jsx)(n.li,{children:"Don\u2019t pass user-controlled input."}),"\n",(0,i.jsx)(n.li,{children:"If it is not possible, then don\u2019t let running arbitrary commands. Use an allowlist for inputs."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"semgrep-rule-2",children:"Semgrep rule"}),"\n",(0,i.jsx)(t.A,{ruleId:"python.lang.security.audit.dangerous-system-call"}),"\n",(0,i.jsx)(n.h3,{id:"1d-using-os-module-to-spawn-a-process",children:"1.D. Using os module to spawn a process"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"os"})," module allows executing the program path in a new process. Variations of spawn method including ",(0,i.jsx)(n.code,{children:"spawnl"}),", ",(0,i.jsx)(n.code,{children:"spawnle"}),", ",(0,i.jsx)(n.code,{children:"spawnlp"}),", ",(0,i.jsx)(n.code,{children:"spawnlpe"}),", ",(0,i.jsx)(n.code,{children:"spawnv"}),", ",(0,i.jsx)(n.code,{children:"spawnve"}),", ",(0,i.jsx)(n.code,{children:"spawnvp"}),", ",(0,i.jsx)(n.code,{children:"spawnvpe"}),", ",(0,i.jsx)(n.code,{children:"posix_spawn"})," and ",(0,i.jsx)(n.code,{children:"posix_spawnp"})," are intended for spawning a process with a program passed as a string argument. Allowing spawning of arbitrary programs or running shell processes with arbitrary arguments may result in a command injection vulnerability."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\n\n# Vulnerable\nuser_input = "/foo/bar" # value supplied by user\nos.spawnlpe(os.P_WAIT, user_input, ["-a"], os.environ)\n\n# Vulnerable\nuser_input = "cat /etc/passwd" # value supplied by user\nos.spawnve(os.P_WAIT, "/bin/bash", ["-c", user_input], os.environ)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"references-3",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://docs.python.org/3/library/os.html",children:[(0,i.jsx)(n.strong,{children:"os"})," module documentation"]})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"mitigation-3",children:"Mitigation"}),"\n",(0,i.jsxs)(n.p,{children:["Do not let a user input into ",(0,i.jsx)(n.code,{children:"spawn"})," methods. Alternatively:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always try to use an internal Python API (if it exists) instead of running an OS command."}),"\n",(0,i.jsx)(n.li,{children:"Don\u2019t pass user-controlled input."}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"shlex.split"})," to correctly parse a command string into an array and ",(0,i.jsx)(n.code,{children:"shlex.quote"})," to correctly sanitize input as a command-line parameter."]}),"\n",(0,i.jsxs)(n.li,{children:["Do not include command arguments in a command string, use parameterization instead. For example:",(0,i.jsx)("br",{}),"\nUse:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'os.spawnve(os.P_WAIT, "/path/to/myCommand", ["myArg1", input_value], os.environ)\n'})}),"\n","Instead of:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'os.spawnve(os.P_WAIT, "/bin/bash", ["-c", "myCommand myArg1 " + input_value], os.environ)\n'})}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"If it\u2019s not possible to avoid, strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"semgrep-rule-3",children:"Semgrep rule"}),"\n",(0,i.jsx)(t.A,{ruleId:"python.lang.security.audit.dangerous-spawn-process.dangerous-spawn-process"}),"\n",(0,i.jsx)(n.h3,{id:"1e-replacing-current-process-with-exec",children:"1.E. Replacing current process with exec"}),"\n",(0,i.jsxs)(n.p,{children:["Execution methods of the ",(0,i.jsx)(n.code,{children:"os"})," module are intended to execute a new program, replacing the current process. The available methods are ",(0,i.jsx)(n.code,{children:"execl"}),", ",(0,i.jsx)(n.code,{children:"execle"}),", ",(0,i.jsx)(n.code,{children:"execlp"}),", ",(0,i.jsx)(n.code,{children:"execlpe"}),", ",(0,i.jsx)(n.code,{children:"execv"}),", ",(0,i.jsx)(n.code,{children:"execve"}),", ",(0,i.jsx)(n.code,{children:"execvp"}),", and ",(0,i.jsx)(n.code,{children:"execvpe"}),". Allowing running of arbitrary programs or running shell processes with arbitrary arguments may result in a command injection vulnerability."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\n\n# Vulnerable\nuser_input = "/evil/code" # value supplied by user\nos.execl(user_input, \'/foo/bar\', \'--do-smth\')\n\n# Vulnerable\nuser_input = "cat /etc/passwd" # value supplied by user\nos.execve("/bin/bash", ["/bin/bash", "-c", user_input], os.environ)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"references-4",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://docs.python.org/3/library/os.html",children:[(0,i.jsx)(n.strong,{children:"os"})," module documentation"]})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"mitigation-4",children:"Mitigation"}),"\n",(0,i.jsxs)(n.p,{children:["Do not let a user input into ",(0,i.jsx)(n.code,{children:"exec"})," methods. Alternatively:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always try to use internal an Python API (if it exists) instead of running an OS command."}),"\n",(0,i.jsx)(n.li,{children:"Don't pass user-controlled input."}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"shlex.split"})," to correctly parse a command string into an array and ",(0,i.jsx)(n.code,{children:"shlex.quote"})," to correctly sanitize input as a command-line parameter."]}),"\n",(0,i.jsxs)(n.li,{children:["Do not include command arguments in a command string, use parameterization instead. For example:",(0,i.jsx)("br",{}),"\nUse:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'os.execve("/path/to/myCommand", ["myCommand", "myArg1", input_value], os.environ)\n'})}),"\n","Instead of:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'os.execve("/bin/bash", ["/bin/bash", "-c", "myCommand myArg1 " + input_value], os.environ)\n'})}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"If it's not possible to avoid, strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"semgrep-rule-4",children:"Semgrep rule"}),"\n",(0,i.jsx)(t.A,{ruleId:"python.lang.security.audit.dangerous-spawn-process.dangerous-spawn-process"}),"\n",(0,i.jsx)(n.h3,{id:"1f-wildcard-character-in-a-system-call-that-spawns-a-shell",children:"1.F. Wildcard character in a system call that spawns a shell"}),"\n",(0,i.jsx)(n.p,{children:"Spawning a shell or executing a Unix shell command with a wildcard leads to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called."}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# directory example\n[root@user public]# ls -al\ntotal 20\ndrwxrwxr-x.  5 user   user   4096 Oct 28 17:04 .\ndrwx------. 22 user   user   4096 Oct 28 16:15 ..\ndrwxrwxr-x.  2 user   user   4096 Oct 28 17:04 DIR1\ndrwxrwxr-x.  2 user   user   4096 Oct 28 17:04 DIR2\ndrwxrwxr-x.  2 user   user   4096 Oct 28 17:04 DIR3\n-rw-rw-r--.  1 user   user      0 Oct 28 17:03 file1.txt\n-rw-rw-r--.  1 nobody nobody    0 Oct 28 16:38 -rf\n\n\n# running Python code like this will use `-rf` as an argument for rm and force delete all directories\nos.system("/bin/rm *")\n'})}),"\n",(0,i.jsx)(n.h4,{id:"references-5",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.exploit-db.com/exploits/33930",children:"Article about Unix wildcard poisoning tricks"})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"mitigation-5",children:"Mitigation"}),"\n",(0,i.jsx)(n.p,{children:"Avoid wildcards in Unix shell commands."}),"\n",(0,i.jsx)(n.h4,{id:"semgrep-rule-5",children:"Semgrep rule"}),"\n",(0,i.jsx)(t.A,{ruleId:"python.lang.security.audit.system-wildcard-detected"}),"\n",(0,i.jsx)(n.h3,{id:"1g-running-shell-commands-asynchronously",children:"1.G. Running shell commands asynchronously"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"asyncio.subprocess"})," is an async or await API to create and manage subprocesses. Such methods as ",(0,i.jsx)(n.code,{children:"create_subprocess_shell"})," and Event Loop's ",(0,i.jsx)(n.code,{children:"subprocess_shell"})," are intended for running shell commands provided as an argument 'cmd'. Allowing user input into a command that is passed as an argument to one of these methods can create an opportunity for a command injection vulnerability."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import asyncio\n\n# Vulnerable\nuser_input = "cat /etc/passwd" # value supplied by user\nloop = asyncio.new_event_loop()\n# This is similar to the standard library subprocess.Popen class called with shell=True\nloop.subprocess_shell(asyncio.SubprocessProtocol, user_input)\n\n# Vulnerable\nuser_input = "cat /etc/passwd" # value supplied by user\nasyncio.subprocess.create_subprocess_shell(user_input)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"references-6",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://docs.python.org/3/library/asyncio-subprocess.html",children:[(0,i.jsx)(n.strong,{children:"asyncio subprocess"})," documentation"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_shell",children:[(0,i.jsx)(n.strong,{children:"Event Loop subprocess_shell"})," documentation"]})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"mitigation-6",children:"Mitigation"}),"\n",(0,i.jsxs)(n.p,{children:["Do not let a user input into ",(0,i.jsx)(n.code,{children:"asyncio.subprocess"})," methods. Alternatively:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always try to use an internal Python API (if it exists) instead of running an OS command."}),"\n",(0,i.jsxs)(n.li,{children:["Consider using ",(0,i.jsx)(n.code,{children:"asyncio.subprocess"})," functions with array of program arguments (for example: ",(0,i.jsx)(n.code,{children:"create_subprocess_exec"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Don't pass user-controlled input."}),"\n",(0,i.jsx)(n.li,{children:"If it's not possible, then don't let running arbitrary commands. Use an allowlist for inputs."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"semgrep-rule-6",children:"Semgrep rule"}),"\n",(0,i.jsx)(t.A,{ruleId:"python.lang.security.audit.dangerous-asyncio-shell.dangerous-asyncio-shell"}),"\n",(0,i.jsx)(n.h3,{id:"1h-creating-subprocesses-asynchronously",children:"1.H. Creating subprocesses asynchronously"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"asyncio.subprocess"})," also allows asynchronous creation of subprocesses. Such methods as ",(0,i.jsx)(n.code,{children:"create_subprocess_exec"})," and Event Loop's ",(0,i.jsx)(n.code,{children:"subprocess_exec"})," are intended for creating a subprocess from one or more string arguments specified by args. Allowing user input into a command that is passed as an argument to one of these methods can create an opportunity for a command injection vulnerability."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import asyncio\n\n# Vulnerable\nuser_input = "/evil/exe" # value supplied by user\nloop = asyncio.new_event_loop()\nloop.subprocess_exec(asyncio.SubprocessProtocol, [user_input, "--parameter"])\n\n# Vulnerable\nuser_input = "cat /etc/passwd" # value supplied by user\nasyncio.subprocess.create_subprocess_exec("bash", ["bash", "-c", user_input])\n\n# Not vulnerable\nuser_input = "/evil/exe" # value supplied by user\nloop = asyncio.new_event_loop()\nloop.subprocess_exec(asyncio.SubprocessProtocol, [\'ls\', \'-l\', user_input])\n'})}),"\n",(0,i.jsx)(n.h4,{id:"references-7",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.python.org/3/library/asyncio-subprocess.html",children:"asyncio subprocess documentation"})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"mitigation-7",children:"Mitigation"}),"\n",(0,i.jsxs)(n.p,{children:["Do not let a user input into ",(0,i.jsx)(n.code,{children:"asyncio subprocess"})," methods. Alternatively:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always try to use an internal Python API (if it exists) instead of running an OS command."}),"\n",(0,i.jsx)(n.li,{children:"Don't pass user-controlled input."}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"shlex.split"})," to correctly parse a command string into an array and ",(0,i.jsx)(n.code,{children:"shlex.quote"})," to correctly sanitize input as a command-line parameter."]}),"\n",(0,i.jsxs)(n.li,{children:["Do not include command arguments in a command string, use parameterization instead. For example:",(0,i.jsx)("br",{}),"\nUse:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'asyncio.subprocess.create_subprocess_exec("/path/to/myCommand", ["myCommand", "myArg1", input_value])\n'})}),"\n","Instead of:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'asyncio.subprocess.create_subprocess_exec("bash", ["bash", "-c", "myCommand myArg1 " + input_value])\n'})}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"If it's not possible to avoid, strip everything except alphanumeric characters from an input provided for the command string and arguments."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"semgrep-rule-7",children:"Semgrep rule"}),"\n",(0,i.jsx)(t.A,{ruleId:"python.lang.security.audit.dangerous-asyncio-exec.dangerous-asyncio-exec"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.A,{ruleId:"python.lang.security.audit.dangerous-asyncio-create-exec.dangerous-asyncio-create-exec"})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);