"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[50718],{17718:e=>{e.exports=JSON.parse('{"permalink":"/semgrep-docs/release-notes/june-2021","source":"@site/release-notes/june-2021.md","title":"June 2021","description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","date":"2021-06-30T10:00:00.000Z","tags":[{"inline":true,"label":"Release notes","permalink":"/semgrep-docs/release-notes/tags/release-notes"}],"readingTime":4.215,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"June 2021","slug":"june-2021","append_help_link":true,"hide_title":true,"description":"Release notes include the changes, fixes, and additions in specific versions of Semgrep.","toc_max_heading_level":3,"tags":["Release notes"],"hide_table_of_contents":false,"date":"2021-06-30T10:00"},"unlisted":false,"prevItem":{"title":"July 2021","permalink":"/semgrep-docs/release-notes/july-2021"},"nextItem":{"title":"May 2021","permalink":"/semgrep-docs/release-notes/may-2021"}}')},28453:(e,s,i)=>{i.d(s,{R:()=>l,x:()=>a});var n=i(96540);const r={},t=n.createContext(r);function l(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(t.Provider,{value:s},e.children)}},83713:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>n,toc:()=>h});var n=i(17718),r=i(74848),t=i(28453);const l={title:"June 2021",slug:"june-2021",append_help_link:!0,hide_title:!0,description:"Release notes include the changes, fixes, and additions in specific versions of Semgrep.",toc_max_heading_level:3,tags:["Release notes"],hide_table_of_contents:!1,date:"2021-06-30T10:00"},a="June 2021",o={authorsImageUrls:[]},h=[{value:"Version 0.57.0",id:"version-0570",level:2},{value:"Additions",id:"additions",level:3},{value:"Fixes",id:"fixes",level:3},{value:"Changes",id:"changes",level:3},{value:"Version 0.56.0",id:"version-0560",level:2},{value:"Additions",id:"additions-1",level:3},{value:"Fixes",id:"fixes-1",level:3},{value:"Changes",id:"changes-1",level:3},{value:"Version 0.55.1",id:"version-0551",level:2},{value:"Additions",id:"additions-2",level:3},{value:"Fixes",id:"fixes-2",level:3},{value:"Changes",id:"changes-2",level:3},{value:"Version 0.54.0",id:"version-0540",level:2},{value:"Additions",id:"additions-3",level:3},{value:"Fixes",id:"fixes-3",level:3},{value:"Changes",id:"changes-3",level:3}];function d(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:"The following updates were made to Semgrep in June 2021."}),"\n",(0,r.jsx)(s.h2,{id:"version-0570",children:"Version 0.57.0"}),"\n",(0,r.jsx)(s.h3,{id:"additions",children:"Additions"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["New options: field in a YAML rule to enable/disable certain features (for example constant propagation) (For the list of available features you can enable/disable see ",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/blob/develop/interfaces/Rule_options.atd",children:"https://github.com/semgrep/semgrep/blob/develop/interfaces/Rule_options.atd"}),")."]}),"\n",(0,r.jsxs)(s.li,{children:["Capture groups in pattern-regex: in $1, $2, etc. (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3356",children:"#3356"}),")"]}),"\n",(0,r.jsx)(s.li,{children:"Support metavariables inside atoms (e.g., foo(:$ATOM))"}),"\n",(0,r.jsxs)(s.li,{children:["Support metavariables and ellipsis inside regexp literals (for example ",(0,r.jsx)(s.code,{children:"foo(/.../)"}),")"]}),"\n",(0,r.jsx)(s.li,{children:"Associative-commutative matching for bitwise OR, AND, and XOR operations"}),"\n",(0,r.jsx)(s.li,{children:"Add support for $...MVAR in generic patterns"}),"\n",(0,r.jsx)(s.li,{children:"Add support for $...MVAR in generic patterns"}),"\n",(0,r.jsx)(s.li,{children:"metavariable-pattern: Add support for nested Spacegrep/regex/Comby patterns"}),"\n",(0,r.jsxs)(s.li,{children:["C#: support ellipsis in method parameters (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3289",children:"#3289"}),")"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"fixes",children:"Fixes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["C#: parse __makeref, __reftype, __refvalue (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3364",children:"#3364"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Java: parsing of dots inside function annotations with brackets (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3389",children:"#3389"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Do not pretend that short-circuit Boolean AND and OR operators are commutative (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3399",children:"#3399"}),")"]}),"\n",(0,r.jsx)(s.li,{children:"metavariable-pattern: Fix crash when nesting a non-generic pattern within a generic rule"}),"\n",(0,r.jsx)(s.li,{children:"metavariable-pattern: Fix parse info when matching content of a metavariable under a different language"}),"\n",(0,r.jsxs)(s.li,{children:["generic mode on Markdown files with very long lines will now work (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/2987",children:"#2987"}),")"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"changes",children:"Changes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["generic mode: files that don't look like nicely-indented programs are no longer ignored, which may cause accidental slowdowns in setups where excessively large files are not excluded explicitly (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3418",children:"#3418"}),")"]}),"\n",(0,r.jsx)(s.li,{children:"metavariable-comparison: Fix crash when comparing integers and floats"}),"\n",(0,r.jsxs)(s.li,{children:["Do not filter findings with the same range but different metavariable bindings (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3310",children:"#3310"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Set parsing_state.have_timeout when a timeout occurs (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3438",children:"#3438"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Set a timeout of 10s per file (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3434",children:"#3434"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Improvements to contributing documentation (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3353",children:"#3353"}),")"]}),"\n",(0,r.jsx)(s.li,{children:"Memoize getting ranges to speed up rules with large ranges"}),"\n",(0,r.jsx)(s.li,{children:"When and-ed with other patterns, pattern: $X will not be evaluated on its own, but will look at the context and find $X within the metavariables bound, which should be significantly faster"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"version-0560",children:"Version 0.56.0"}),"\n",(0,r.jsx)(s.h3,{id:"additions-1",children:"Additions"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Associative-commutative matching for Boolean AND and OR operations (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3198",children:"#3198"}),")"]}),"\n",(0,r.jsx)(s.li,{children:'Support metavariables inside strings (e.g., foo("$VAR"))'}),"\n",(0,r.jsx)(s.li,{children:"Support metavariables inside atoms (e.g., foo(:$ATOM))"}),"\n",(0,r.jsx)(s.li,{children:"metavariable-pattern: allow matching the content of a metavariable under a different language"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"fixes-1",children:"Fixes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["C#: Parse attributes for local functions (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3348",children:"#3348"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Go: Recognize other common package naming conventions (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/2424",children:"#2424"}),")"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"changes-1",children:"Changes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Upgraded TypeScript parser (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3102",children:"#3102"}),")"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"version-0551",children:"Version 0.55.1"}),"\n",(0,r.jsx)(s.h3,{id:"additions-2",children:"Additions"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Added new metavariable-pattern operator (available only via --optimizations), thanks to Kai Zhong for the feature request (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3257",children:"#3257"}),")"]}),"\n",(0,r.jsx)(s.li,{children:"Add helpUri to SARIF output if rule source metadata is defined"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"fixes-2",children:"Fixes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["C#: Support unsafe block syntax (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3283",children:"#3283"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Generic mode: fixed wrong line numbers for multi-lines match (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3315",children:"#3315"}),")"]}),"\n",(0,r.jsx)(s.li,{children:"JavaScript: support partial field definitions pattern, like in JSON"}),"\n",(0,r.jsxs)(s.li,{children:["JSON: handle correctly metavariables as field (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3279",children:"#3279"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["PHP: Support ellipsis in include/require and echo (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3191",children:"#3191"}),",",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3245",children:"#3245"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["PHP: Prefer expression patterns over statement patterns (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3191",children:"#3191"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Python: support ellipsis in try-except (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3233",children:"#3233"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Scala: correctly parse symbol literals and interpolated strings containing double dollars (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3271",children:"#3271"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Taint mode: Allow statement-patterns when these are represented as statement-expressions in the Generic AST (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3191",children:"#3191"}),")"]}),"\n",(0,r.jsx)(s.li,{children:"Dataflow: Analyze foreach body even if we do not handle the pattern yet (#3155)"}),"\n",(0,r.jsxs)(s.li,{children:["Correctly handle ellipsis inside function types (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3119",children:"#3119"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Fall back to no optimizations when using unsupported features: pattern-where-python, taint rules, and --debugging-json (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3265",children:"#3265"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Handle regexp parse errors gracefully when using optimizations (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3266",children:"#3266"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Support equivalences when using optimizations (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/pull/3259",children:"#3259"}),")"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"changes-2",children:"Changes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Run rules in semgrep-core (rather than patterns) by default (these are the optimizations described above)"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"version-0540",children:"Version 0.54.0"}),"\n",(0,r.jsx)(s.p,{children:"This version includes release notes for Semgrep version 0.53.0 as well."}),"\n",(0,r.jsx)(s.h3,{id:"additions-3",children:"Additions"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Alpha support for Scala"}),"\n",(0,r.jsx)(s.li,{children:"Metrics collection of project_hash in cases where git is not available"}),"\n",(0,r.jsx)(s.li,{children:"Taint mode now also analyzes top-level statements"}),"\n",(0,r.jsx)(s.li,{children:"Per rule parse times and per rule-file parse and match times added to opt-in metrics"}),"\n",(0,r.jsxs)(s.li,{children:["$...MVAR can now match a list of statements (not just a list of arguments) (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3170",children:"#3170"}),")"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"fixes-3",children:"Fixes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"JavaScript parsing: Support decorators on properties"}),"\n",(0,r.jsx)(s.li,{children:"JavaScript parsing: Allow default export for any declaration"}),"\n",(0,r.jsx)(s.li,{children:"Metavariables in messages are filled in when using --optimizations all"}),"\n",(0,r.jsx)(s.li,{children:"Respect --timeout-threshold option in --optimizations all mode"}),"\n",(0,r.jsxs)(s.li,{children:["Python: class variables are matched in any order (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3212",children:"#3212"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Running with --strict will now return results if there are nosem mismatches. Semgrep will report a nonzero exit code if --strict is set and there are nosem mismatches (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3099",children:"#3099"}),")"]}),"\n",(0,r.jsx)(s.li,{children:"PHP: parsing correctly ... and metavariables in parameters"}),"\n",(0,r.jsx)(s.li,{children:"PHP: parsing correctly functions with a single statement in their body"}),"\n",(0,r.jsxs)(s.li,{children:["Evaluate interpolated strings during constant propagation (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3127",children:"#3127"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Semgrep will report an InvalidRuleSchemaError for dictionaries with duplicate key names (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3084",children:"#3084"}),")"]}),"\n",(0,r.jsx)(s.li,{children:"Basic type inference also for implicit variable declarations (Python, Ruby, PHP, and JavaScript)"}),"\n",(0,r.jsxs)(s.li,{children:["JavaScript/TypeScript: differentiating tagged template literals in the AST (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3187",children:"#3187"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Ruby: storing parenthesis in function calls in the AST (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3178",children:"#3178"}),")"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"changes-3",children:"Changes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Moved some debug logging to verbose logging"}),"\n",(0,r.jsxs)(s.li,{children:["$...ARGS can now match an empty list of arguments, just like ... (",(0,r.jsx)(s.a,{href:"https://github.com/semgrep/semgrep/issues/3177",children:"#3177"}),")"]}),"\n",(0,r.jsx)(s.li,{children:"JSON and SARIF outputs sort keys for predictable results"}),"\n"]})]})}function c(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);