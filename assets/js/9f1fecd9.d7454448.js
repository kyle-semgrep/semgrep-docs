"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[67258],{18162:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"contributing/adding-a-language","title":"Add support for a new language","description":"Add a new language to Semgrep.","source":"@site/docs/contributing/adding-a-language.md","sourceDirName":"contributing","slug":"/contributing/adding-a-language","permalink":"/semgrep-docs/contributing/adding-a-language","draft":false,"unlisted":false,"editUrl":"https://github.com/semgrep/semgrep-docs/edit/main/docs/contributing/adding-a-language.md","tags":[{"inline":true,"label":"Contributing to Semgrep","permalink":"/semgrep-docs/tags/contributing-to-semgrep"}],"version":"current","lastUpdatedAt":1747254722000,"frontMatter":{"slug":"adding-a-language","title":"Add support for a new language","hide_title":true,"description":"Add a new language to Semgrep.","tags":["Contributing to Semgrep"]},"sidebar":"aboutSidebar","previous":{"title":"semgrep contributing","permalink":"/semgrep-docs/contributing/semgrep-contributing"},"next":{"title":"How to upgrade the grammar for a language","permalink":"/semgrep-docs/contributing/updating-a-grammar"}}');var i=s(74848),t=s(28453),l=s(65028);const a={slug:"adding-a-language",title:"Add support for a new language",hide_title:!0,description:"Add a new language to Semgrep.",tags:["Contributing to Semgrep"]},o="How to add support for a new language",d={},c=[{value:"Placeholder values",id:"placeholder-values",level:2},{value:"<code>semgrep</code> repository overview",id:"semgrep-repository-overview",level:2},{value:"Set up <code>ocaml-tree-sitter-semgrep</code>",id:"set-up-ocaml-tree-sitter-semgrep",level:2},{value:"Expedited setup",id:"expedited-setup",level:3},{value:"Manual setup",id:"manual-setup",level:3},{value:"The <code>fyi.list</code> file",id:"the-fyilist-file",level:3},{value:"Extend the original grammar with semgrep syntax",id:"extend-the-original-grammar-with-semgrep-syntax",level:2},{value:"Parsing statistics",id:"parsing-statistics",level:2},{value:"Publish generated parsers",id:"publish-generated-parsers",level:2},{value:"Troubleshooting",id:"troubleshooting",level:3},{value:"Update the <code>semgrep</code> repository",id:"update-the-semgrep-repository",level:2},{value:"Legal concerns",id:"legal-concerns",level:2},{value:"See also",id:"see-also",level:2}];function h(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"how-to-add-support-for-a-new-language",children:"How to add support for a new language"})}),"\n","\n",(0,i.jsxs)(r.p,{children:["This document is about adding support for a new programming language in Semgrep using the ",(0,i.jsx)(r.a,{href:"https://tree-sitter.github.io/tree-sitter/",children:"tree-sitter"})," technology. Most languages in semgrep use ",(0,i.jsx)(r.code,{children:"tree-parser"})," though you may also need to update the ",(0,i.jsx)(r.code,{children:"menhir"})," parser."]}),"\n",(0,i.jsx)(r.p,{children:"Repositories involved directly:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"https://github.com/semgrep/semgrep",children:(0,i.jsx)("code",{children:(0,i.jsxs)("strong",{children:[(0,i.jsx)("i",{class:"fas fa-external-link fa-xs"})," semgrep"]})})}),": the semgrep command line program."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"https://github.com/semgrep/ocaml-tree-sitter-semgrep",children:(0,i.jsx)("code",{children:(0,i.jsxs)("strong",{children:[(0,i.jsx)("i",{class:"fas fa-external-link fa-xs"})," ocaml-tree-sitter-semgrep"]})})}),": language-specific setup, generates C/OCaml parsers for semgrep."]}),"\n",(0,i.jsxs)(r.li,{children:["A new repository ",(0,i.jsx)("code",{children:(0,i.jsxs)("strong",{children:["semgrep-",(0,i.jsx)(l.A,{children:"LANG"})]})})," for the language you're adding: this is a C or OCaml parser generated from ",(0,i.jsx)(r.code,{children:"ocaml-tree-sitter-semgrep"})," by a Semgrep administrator."]}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://github.com/semgrep/semgrep-interfaces/blob/main/generate.py",children:(0,i.jsx)("code",{children:(0,i.jsxs)("strong",{children:[(0,i.jsx)("i",{class:"fas fa-external-link fa-xs"})," semgrep-interfaces"]})})})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"placeholder-values",children:"Placeholder values"}),"\n",(0,i.jsxs)(r.p,{children:["This document uses the placeholder ",(0,i.jsx)(l.A,{children:"LANG"})," to indicate that you should substitute the name of your language as the value in the given context. For example, if your language is Ruby, and the document's instructions read:"]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:["Create a new file ",(0,i.jsxs)("code",{children:["TEST_LANG_",(0,i.jsx)(l.A,{children:"LANG"}),".txt"]})," where ",(0,i.jsx)(l.A,{children:"LANG"})," is in small caps."]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The name of your file should be ",(0,i.jsx)(r.code,{children:"TEST_LANG_ruby.txt"})]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:["Create a file ",(0,i.jsxs)("code",{children:["Pretty_print.",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.em,{children:"EXTENSION"})})]})," with the filename extension of your language:"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The name of your file should be ",(0,i.jsx)(r.code,{children:"Pretty_print.rb"}),"."]}),"\n",(0,i.jsxs)(r.h2,{id:"semgrep-repository-overview",children:[(0,i.jsx)(r.code,{children:"semgrep"})," repository overview"]}),"\n",(0,i.jsxs)(r.p,{children:["There are some GitHub repositories involved in porting a language.\nHere is the file hierarchy of the ",(0,i.jsxs)(r.a,{href:"https://github.com/semgrep/semgrep",children:[(0,i.jsx)(r.code,{children:"semgrep"}),"\nrepository"]}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"/languages\n\u251c\u2500\u2500 bash\n    ...\n\u251c\u2500\u2500 swift\n    \u251c\u2500\u2500 generic\n    \u2514\u2500\u2500 tree-sitter\n        \u2514\u2500\u2500 semgrep-swift # generated tree-sitter parsers\n"})}),"\n",(0,i.jsxs)(r.p,{children:["When you're done with the work in ",(0,i.jsx)(r.a,{href:"https://github.com/semgrep/ocaml-tree-sitter-semgrep",children:(0,i.jsx)(r.code,{children:"ocaml-tree-sitter-semgrep"})}),", you'll need a new repository ",(0,i.jsx)("strong",{children:(0,i.jsxs)("code",{children:["semgrep-",(0,i.jsx)(l.A,{children:"LANG"})]})})," to host the generated parser code."]}),"\n",(0,i.jsxs)(r.p,{children:["Ask someone from the Semgrep team to create one for you. For this, they should use the template\n",(0,i.jsx)(r.a,{href:"https://github.com/semgrep/semgrep-lang-template",children:(0,i.jsx)(r.code,{children:"semgrep-lang-template"})})," when creating the repository."]}),"\n",(0,i.jsxs)(r.p,{children:["The instructions for adding a language start in ",(0,i.jsx)(r.a,{href:"https://github.com/semgrep/ocaml-tree-sitter-semgrep",children:(0,i.jsx)(r.code,{children:"ocaml-tree-sitter-semgrep"})}),", as indicated below. Be careful that you are always in the correct repository!"]}),"\n",(0,i.jsxs)(r.h2,{id:"set-up-ocaml-tree-sitter-semgrep",children:["Set up ",(0,i.jsx)(r.code,{children:"ocaml-tree-sitter-semgrep"})]}),"\n",(0,i.jsxs)(r.p,{children:["As a model, you can use the existing setup for ",(0,i.jsx)(r.code,{children:"ruby"})," or ",(0,i.jsx)(r.code,{children:"javascript"}),". The most complicated setup is for ",(0,i.jsx)(r.code,{children:"typescript"})," and ",(0,i.jsx)(r.code,{children:"tsx"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"expedited-setup",children:"Expedited setup"}),"\n",(0,i.jsxs)(r.p,{children:["If you're lucky, the language you want to add can be added with the script ",(0,i.jsx)(r.code,{children:"add-simple-lang"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"cd lang\n./add-simple-lang --help\n"})}),"\n",(0,i.jsx)(r.p,{children:"Follow the instructions from --help."}),"\n",(0,i.jsxs)(r.p,{children:["This often works with languages that define a single dialect using a ",(0,i.jsx)(r.code,{children:"grammar.js"})," file at the root of the project. If this simplified approach fails, use the ",(0,i.jsx)(r.a,{href:"#manual-setup",children:"Manual setup"})," instructions below to understand what's going on or to set things up manually."]}),"\n",(0,i.jsx)(r.h3,{id:"manual-setup",children:"Manual setup"}),"\n",(0,i.jsxs)(r.p,{children:["From the ",(0,i.jsx)(r.code,{children:"ocaml-tree-sitter-semgrep"})," repository, do the following:"]}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Create a ",(0,i.jsxs)("code",{children:["lang/",(0,i.jsx)(l.A,{children:"LANG"})]})," folder."]}),"\n",(0,i.jsxs)(r.li,{children:["Make a ",(0,i.jsx)(r.code,{children:"test/ok"})," directory. Inside the directory, create a simple ",(0,i.jsx)(r.code,{children:"hello-world"})," program for the language you are porting. Name the program ",(0,i.jsxs)("code",{children:["hello-world.",(0,i.jsx)(l.A,{children:"EXTENSION"})]}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Now make a file called ",(0,i.jsx)(r.code,{children:"extensions.txt"})," and input all the language extensions (.rb, .kt, etc) for your language in the file."]}),"\n",(0,i.jsxs)(r.li,{children:["Create a file called ",(0,i.jsx)(r.code,{children:"fyi.list"})," with all the information files, such as\n",(0,i.jsxs)("code",{children:["semgrep-grammars/src/tree-sitter-",(0,i.jsx)(l.A,{children:"LANG"}),"/LICENSE"]}),",\n",(0,i.jsxs)("code",{children:["semgrep-grammars/src/tree-sitter-",(0,i.jsx)(l.A,{children:"LANG/grammar.js"})]}),",\n",(0,i.jsxs)("code",{children:["semgrep-grammars/src/semgrep-",(0,i.jsx)(l.A,{children:"LANG"}),"/grammar.js"]}),", etc.\nto bundle with the final OCaml/C project."]}),"\n",(0,i.jsxs)(r.li,{children:["Link the Makefile.common to a Makefile in the directory with:\n",(0,i.jsx)(r.code,{children:"ln -s ../Makefile.common Makefile"})]}),"\n",(0,i.jsxs)(r.li,{children:["Create a test corpus. You can do this by:","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Running ",(0,i.jsx)(r.code,{children:"most-starred-for-language"})," to gather projects\non which to run parsing stats. Run with the following command:\n",(0,i.jsxs)("code",{children:["./scripts/most-starred-for-language ",(0,i.jsx)(l.A,{children:"LANG"})," ",(0,i.jsx)(l.A,{children:"YOUR_USERNAME"})," ",(0,i.jsx)(l.A,{children:"API_KEY"})]})]}),"\n",(0,i.jsx)(r.li,{children:"Using github advanced search to find the most starred or most forked repositories."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["Copy the generated ",(0,i.jsx)(r.code,{children:"projects.txt"})," file into the ",(0,i.jsxs)("code",{children:["lang/",(0,i.jsx)(l.A,{children:"LANG"})]})," directory."]}),"\n",(0,i.jsx)(r.li,{children:"Add in extra projects and extra input sets as you see necessary."}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Here's the file hierarchy for Ruby:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-shell",children:"lang/ruby               # language name of the form [a-z][a-z0-9]*\n\u251c\u2500\u2500 extensions.txt      # standard name. Required for stats.\n\u251c\u2500\u2500 fyi.list            # list of informational files to copy. Recommended.\n\u251c\u2500\u2500 Makefile -> ../Makefile.common\n\u251c\u2500\u2500 projects.txt        # standard name. Required for stats.\n\u2514\u2500\u2500 test                # sample input files\n    \u251c\u2500\u2500 ok              # contains input files supported by the current grammar\n    \u2502   \u251c\u2500\u2500 comment.rb\n    \u2502   \u251c\u2500\u2500 ex1.rb\n    \u2502   \u251c\u2500\u2500 ex2.rb\n    \u2502   \u251c\u2500\u2500 hello.rb\n    \u2502   \u2514\u2500\u2500 poly.rb\n    \u2514\u2500\u2500 xfail            # contains input files that are expected to fail\n        \u2514\u2500\u2500 rating.rb\n"})}),"\n",(0,i.jsxs)(r.p,{children:["To test a language in ",(0,i.jsx)(r.code,{children:"ocaml-tree-sitter-semgrep"}),", you must build the\n",(0,i.jsx)(r.code,{children:"ocaml-tree-sitter-semgrep"})," OCaml code generator, run it to produce a parser,\nthen run some tests for the parser. Full instructions for this\nare given in ",(0,i.jsx)(r.a,{href:"/semgrep-docs/contributing/updating-a-grammar",children:"updating-a-grammar"}),' under\n"Testing". The short instructions are:']}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["For the first time, build everything with ",(0,i.jsx)(r.code,{children:"./scripts/rebuild-everything"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Subsequently, work from the ",(0,i.jsxs)("code",{children:["lang/",(0,i.jsx)(l.A,{children:"LANG"})]})," folder and run\n",(0,i.jsx)(r.code,{children:"make"})," and ",(0,i.jsx)(r.code,{children:"make test"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(r.h3,{id:"the-fyilist-file",children:["The ",(0,i.jsx)(r.code,{children:"fyi.list"})," file"]}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"fyi.list"})," file was created to specify informational files that\nshould accompany the generated files. These files are typically:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["the source grammar, most often a single ",(0,i.jsx)(r.code,{children:"grammar.js"})," file."]}),"\n",(0,i.jsxs)(r.li,{children:["the licensing conditions usually specified in a ",(0,i.jsx)(r.code,{children:"LICENSE"})," file."]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Example:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"# Comments are allowed on their own line.\n# Blank lines are ok.\n\n# Each path is relative to ocaml-tree-sitter-semgrep/lang\nsemgrep-grammars/src/tree-sitter-ruby/LICENSE\nsemgrep-grammars/src/tree-sitter-ruby/grammar.js\nsemgrep-grammars/src/semgrep-ruby/grammar.js\n"})}),"\n",(0,i.jsxs)(r.p,{children:["The files listed in ",(0,i.jsx)(r.code,{children:"fyi.list"})," end up in a ",(0,i.jsx)(r.code,{children:"fyi"})," folder in\ntree-sitter-lang. For example,\n",(0,i.jsxs)(r.a,{href:"https://github.com/semgrep/semgrep-ruby/tree/main",children:["see ",(0,i.jsx)(r.code,{children:"ruby/fyi"})]}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"extend-the-original-grammar-with-semgrep-syntax",children:"Extend the original grammar with semgrep syntax"}),"\n",(0,i.jsxs)(r.p,{children:["This is best done after everything else is set up. Some constructs\nsuch as semgrep metavariables (",(0,i.jsx)(r.code,{children:"$FOO"}),") may already be valid constructs\nin the language, in which case there's nothing to do. Some support for\nthe semgrep ellipsis ",(0,i.jsx)(r.code,{children:"..."})," usually needs to be added as well."]}),"\n",(0,i.jsxs)(r.p,{children:["You'll need to learn ",(0,i.jsx)(r.a,{href:"https://tree-sitter.github.io/tree-sitter/creating-parsers",children:"how to create tree-sitter\ngrammars"}),"."]}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Work from ",(0,i.jsxs)("code",{children:["semgrep-grammars/src/semgrep-",(0,i.jsx)(l.A,{children:"LANG"})]})," and use ",(0,i.jsx)(r.code,{children:"make"})," and\n",(0,i.jsx)(r.code,{children:"make test"})," to build and test."]}),"\n",(0,i.jsxs)(r.li,{children:["Add new test cases to ",(0,i.jsx)(r.code,{children:"test/corpus/semgrep.text"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Edit ",(0,i.jsx)(r.code,{children:"grammar.js"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Refer to the original grammar in\n",(0,i.jsxs)("code",{children:["semgrep-grammars/src/tree-sitter-",(0,i.jsx)(l.A,{children:"LANG"})]})," to determine which rules to\nextend."]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"For an example of how to extend a language, you can:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Look at what was done for the semgrep extensions of other languages\nin their respective ",(0,i.jsx)(r.code,{children:"semgrep-*"})," folders."]}),"\n",(0,i.jsxs)(r.li,{children:["Look at how ",(0,i.jsx)(r.code,{children:"tree-sitter-typescript"})," extends the JavaScript grammar.\nThis is the file ",(0,i.jsxs)(r.a,{href:"https://github.com/tree-sitter/tree-sitter-typescript/blob/master/common/define-grammar.js",children:[(0,i.jsx)(r.code,{children:"common/define-grammar.js"})," in the\ntree-sitter-typescript repository"]}),"."]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Avoiding parsing conflicts is the trickiest part. Asking for help is encouraged."}),"\n",(0,i.jsx)(r.p,{children:"\ud83d\udca1 A note on the JavaScript syntax that's heavily used to define and extend grammars:"}),"\n",(0,i.jsxs)(r.p,{children:["When possible, the development team prefers ",(0,i.jsx)(r.strong,{children:"shorthand"})," notation for anonymous functions made of a single expression:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"(x) => x\n"})}),"\n",(0,i.jsx)(r.p,{children:"which is the same as"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"(x) => { return x; }\n"})}),"\n",(0,i.jsx)(r.p,{children:"which is itself the same as"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"function(x) { return x; }\n"})}),"\n",(0,i.jsxs)(r.p,{children:["When extending any rule with an alternate choice such as ",(0,i.jsx)(r.code,{children:"$.ellipsis"}),",\nthe simpler way is this one:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"expression: ($, previous) => choice(previous, $.ellipsis),\n"})}),"\n",(0,i.jsxs)(r.p,{children:["However, if the ",(0,i.jsx)(r.code,{children:"previous"})," rule is known to be a ",(0,i.jsx)(r.code,{children:"choice()"}),", you can avoid\none level of nesting and append to the original list of choices, which\nis done as follows:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"expression: ($, previous) => choice(...previous.members, $.ellipsis),\n"})}),"\n",(0,i.jsx)(r.p,{children:"Whether to use one or the other is a matter of taste."}),"\n",(0,i.jsx)(r.p,{children:"Finally, on rare occasions where the rule body is more than a single expression, you'll have to use the curly brace or return syntax:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"expression: ($, previous) => {\n  if (semgrep_ext)\n    return choice(...previous.members, $.ellipsis);\n  else\n    return previous;\n},\n"})}),"\n",(0,i.jsx)(r.h2,{id:"parsing-statistics",children:"Parsing statistics"}),"\n",(0,i.jsxs)(r.p,{children:["From a language's folder such as ",(0,i.jsx)(r.code,{children:"lang/csharp"}),", two targets are\navailable to exercise the generated parser:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"make test"}),": runs on ",(0,i.jsx)(r.code,{children:"test/ok"})," and ",(0,i.jsx)(r.code,{children:"test/xfail"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"make stat"}),": downloads the code specified in ",(0,i.jsx)(r.code,{children:"projects.txt"})," and\nparses the files whose extension matches those in ",(0,i.jsx)(r.code,{children:"extensions.txt"}),",\nreporting parsing success in the form of a CSV file."]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["For gathering a good test corpus, you can use ",(0,i.jsx)(r.a,{href:"https://github.com/search/advanced",children:"GitHub\nSearch"})," or the script provided in\n",(0,i.jsx)(r.code,{children:"scripts/most-starred-for-language.py"}),'. For github searches, filter by\nprogramming language and use a constraint to select large projects,\nsuch as "> 100 forks". Collect the repository URLs and put them into\n',(0,i.jsx)(r.code,{children:"projects.txt"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"publish-generated-parsers",children:"Publish generated parsers"}),"\n",(0,i.jsx)(r.p,{children:"After you have pushed your ocaml-tree-sitter-semgrep changes to the main\nbranch, do the following:"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Check that the original ",(0,i.jsx)(r.code,{children:"grammar.js"}),", ",(0,i.jsx)(r.code,{children:"src/scanner.c"}),"/",(0,i.jsx)(r.code,{children:".cc"})," (if\napplicable) look clean and have minimal external dependencies."]}),"\n",(0,i.jsxs)(r.li,{children:["In ",(0,i.jsx)(r.code,{children:"ocaml-tree-sitter/lang/Makefile"}),", add language under\n'SUPPORTED_LANGUAGES' and 'STAT_LANGUAGES'."]}),"\n",(0,i.jsxs)(r.li,{children:["In ",(0,i.jsx)(r.code,{children:"ocaml-tree-sitter/lang"})," directory, run ",(0,i.jsxs)("code",{children:["./release ",(0,i.jsx)(l.A,{children:"LANG"})," --dry-run"]}),".\nIf this looks good, please ",(0,i.jsx)(r.a,{href:"https://github.com/semgrep/ocaml-tree-sitter-semgrep/blob/main/doc/release.md",children:"ask someone from the Semgrep team"})," to\npublish the code using ",(0,i.jsxs)("code",{children:["./release ",(0,i.jsx)(l.A,{children:"LANG"})]}),"."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(r.p,{children:"Various errors can occur along the way."}),"\n",(0,i.jsxs)(r.p,{children:["Compilation errors in C or C++ are usually due to a missing source\nfile ",(0,i.jsx)(r.code,{children:"scanner.c"})," or ",(0,i.jsx)(r.code,{children:"scanner.cc"}),", or a grammar with a name that\ndoesn't match the name inside the scanner file. JavaScript files may\nalso be missing, in particular in the case of grammars that extend\nexisting grammars such as C++ for C or TypeScript for\nJavaScript. Check for ",(0,i.jsx)(r.code,{children:"require()"})," calls in ",(0,i.jsx)(r.code,{children:"grammar.js"})," and learn how\nthis NodeJS primitive resolves paths."]}),"\n",(0,i.jsx)(r.p,{children:"There may also be errors when generating or compiling\nOCaml code. These are likely bugs in ocaml-tree-sitter-semgrep and they should\nbe reported or fixed right away."}),"\n",(0,i.jsx)(r.p,{children:"Here are some known types of parsing errors:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["A syntax error. The input program is in the wrong syntax or uses a\nrecent feature that's not supported yet: ",(0,i.jsx)(r.code,{children:"make test"})," or directly the\n",(0,i.jsxs)("code",{children:["parse_",(0,i.jsx)(l.A,{children:"LANG"})]})," program will show the tree produced by tree-sitter with\none or more ",(0,i.jsx)(r.code,{children:"ERROR"})," nodes."]}),"\n",(0,i.jsxs)(r.li,{children:['A "reparsing" error. It\'s an error generated after the first\nsuccessful parsing pass by the tree-sitter parser, during the\nreparsing pass by the OCaml code performed by the generated\n',(0,i.jsx)(r.code,{children:"Parse.ml"}),' file.  The error message should tell you something like\n"cannot interpret tree-sitter\'s output", with details on what code\nfailed to match what pattern. This is most likely a bug in\n',(0,i.jsx)(r.code,{children:"ocaml-tree-sitter-semgrep"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["A segmentation fault. This could be due to a bug in the\nOCaml/tree-sitter C bindings and should be fixed. A simple test case\nthat reproduces the problem would be nice.\nSee ",(0,i.jsx)(r.a,{href:"https://github.com/semgrep/ocaml-tree-sitter-semgrep/issues/65",children:"https://github.com/semgrep/ocaml-tree-sitter-semgrep/issues/65"})]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Parsing errors that are due to an incomplete or incorrect grammar should be recorded, and eventually reported or fixed in the upstream project."}),"\n",(0,i.jsxs)(r.p,{children:["We keep failing test cases in a ",(0,i.jsx)(r.code,{children:"fail/"})," folder, preferably in the form of the minimal program suitable for a bug report, with a comment describing what was expected and what's going on."]}),"\n",(0,i.jsxs)(r.h2,{id:"update-the-semgrep-repository",children:["Update the ",(0,i.jsx)(r.code,{children:"semgrep"})," repository"]}),"\n",(0,i.jsxs)(r.p,{children:["Now that you have added your new language ",(0,i.jsx)(l.A,{children:"LANG"})," to ",(0,i.jsx)(r.code,{children:"tree-sitter"}),", do the following:"]}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Update ",(0,i.jsx)(r.a,{href:"https://github.com/semgrep/semgrep-interfaces/blob/main/generate.py",children:(0,i.jsx)(r.code,{children:"generate.py"})})," in the ",(0,i.jsx)(r.code,{children:"semgrep-interfaces"})," repository with your new language."]}),"\n",(0,i.jsxs)(r.li,{children:["In the ",(0,i.jsx)(r.code,{children:"semgrep"})," repository, go to ",(0,i.jsx)(r.a,{href:"https://github.com/semgrep/semgrep/blob/develop/src/parsing/Check_pattern.ml",children:(0,i.jsx)(r.code,{children:"/src/parsing/Check_pattern.ml"})}),", and add ",(0,i.jsx)(l.A,{children:"LANG"})," to ",(0,i.jsx)(r.code,{children:"lang_has_no_dollar_ids"}),". If the grammar has no dollar identifiers, add ",(0,i.jsx)(l.A,{children:"LANG"})," above 'true'. Otherwise, add it above 'false'."]}),"\n",(0,i.jsxs)(r.li,{children:["In ",(0,i.jsx)(r.a,{href:"https://github.com/semgrep/semgrep/blob/develop/src/printing/Pretty_print_AST.ml",children:(0,i.jsx)(r.code,{children:"/src/printing/Pretty_print_AST.ml"})}),", add ",(0,i.jsx)(l.A,{children:"LANG"})," to the appropriate functions:","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"print_bool"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"if_stmt"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"while_stmt"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"do_while"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"for_stmt"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"def_stmt"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"return"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"break"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"continue"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"literal"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["In ",(0,i.jsx)(r.a,{href:"https://github.com/semgrep/semgrep/blob/develop/src/parsing/tests/Test_parsing.ml",children:(0,i.jsx)(r.code,{children:"/src/parsing/tests/Test_parsing.ml"})}),", add in ",(0,i.jsx)(l.A,{children:"LANG"})," to ",(0,i.jsx)(r.code,{children:"dump_tree_sitter_cst_lang"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Inspect the other languages in ",(0,i.jsx)(r.code,{children:"/languages"})," as a reference for what\ncode to add. Create a new folder for your language."]}),"\n",(0,i.jsxs)(r.li,{children:["Add the ",(0,i.jsxs)("code",{children:["semgrep-",(0,i.jsx)(l.A,{children:"LANG"})]})," repository as a submodule under\n",(0,i.jsxs)("code",{children:["/languages/",(0,i.jsx)(l.A,{children:"LANG"}),"/tree-sitter/"]})," (",(0,i.jsx)(r.code,{children:"git submodule add ..."}),")."]}),"\n",(0,i.jsxs)(r.li,{children:["Create a file\n",(0,i.jsxs)("code",{children:["/languages/",(0,i.jsx)(l.A,{children:"LANG"}),"/tree-sitter/Parse_",(0,i.jsx)(l.A,{children:"LANG"}),"_tree_sitter.ml"]}),"\nby copying the generated template ",(0,i.jsx)(r.code,{children:"Boilerplate.ml"})," that you'll find\nin the ",(0,i.jsxs)("code",{children:["semgrep-",(0,i.jsx)(l.A,{children:"LANG"})]})," submodule.\nAdd basic functionality to\ndefine the function ",(0,i.jsx)(r.code,{children:"parse"})," and import the module\n",(0,i.jsx)(r.code,{children:"Parse_tree_sitter_helpers"}),".\nLook at other languages to get a better idea of how to\ndefine the parse file function. This file should contain something\nsimilar to:","\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"module H = Parse_tree_sitter_helpers\n\nlet parse file =\n H.wrap_parser\n     (fun () ->\n         Parallel.backtrace_when_exn := false\n         Parallel.invoke Tree_sitter_X.Parse.file file ()\n     )\n"})}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["Create the missing ",(0,i.jsx)(r.code,{children:"dune"})," files wherever you have OCaml source\nfiles (",(0,i.jsx)(r.code,{children:".ml"}),", ",(0,i.jsx)(r.code,{children:".mli"}),") by imitating what was done for other\nlanguages."]}),"\n",(0,i.jsxs)(r.li,{children:["Write a basic test case for your language in\n",(0,i.jsxs)("code",{children:["tests/",(0,i.jsx)(l.A,{children:"LANG"}),"/hello-world.",(0,i.jsx)(l.A,{children:"EXT"})]}),". This\ncan just be a hello-world function."]}),"\n",(0,i.jsxs)(r.li,{children:["Try to build the project using the usual commands\n(",(0,i.jsx)(r.code,{children:"make"})," or ",(0,i.jsx)(r.code,{children:"make dev"}),")."]}),"\n",(0,i.jsxs)(r.li,{children:["Test that the command\n",(0,i.jsxs)("code",{children:["semgrep-core/bin/semgrep-core -dump_tree_sitter_cst test/",(0,i.jsx)(l.A,{children:"LANG"}),"/hello-world"]}),"\nprints out a CST for your language."]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["At this point, you're ready to start writing the translator from\nthe CST produced by the tree-sitter parser for ",(0,i.jsx)(l.A,{children:"LANG"}),"\ninto the generic AST used by Semgrep, accommodating all the languages\nin a single AST type. It's recommended but not required to first\ntranslate the CST into a language-specific AST before translating it\ninto the generic AST in a second step."]}),"\n",(0,i.jsx)(r.h2,{id:"legal-concerns",children:"Legal concerns"}),"\n",(0,i.jsx)(r.p,{children:"Be thankful for the authors of the original code, keep clearly visible\nlicense notices, and make it easy to get back to the original projects:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Make sure to preserve the ",(0,i.jsx)(r.code,{children:"LICENSE"})," files. This should be listed in\nthe ",(0,i.jsx)(r.code,{children:"fyi.list"})," file."]}),"\n",(0,i.jsxs)(r.li,{children:["For sample input in ",(0,i.jsx)(r.code,{children:"test/"}),', consider Public Domain ("The\nUnlicense") files or write your own, for simplicity.\n',(0,i.jsx)(r.a,{href:"https://github.com/search/advanced",children:"GitHub Search"}),"\nallows you to filter projects by license and by programming language."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{href:"/semgrep-docs/contributing/updating-a-grammar",children:"How to upgrade the grammar for a language"})})]})}function g(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>l,x:()=>a});var n=s(96540);const i={},t=n.createContext(i);function l(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(t.Provider,{value:r},e.children)}},65028:(e,r,s)=>{s.d(r,{A:()=>i});s(96540);var n=s(74848);function i(e){let{children:r}=e;return(0,n.jsx)("span",{style:{color:"#E3116C",fontStyle:"italic",fontWeight:"bold"},children:r})}}}]);