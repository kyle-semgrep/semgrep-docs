"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[12351],{10064:(e,n,i)=>{i.d(n,{Ay:()=>l,RM:()=>r});var s=i(74848),t=i(28453);const r=[];function a(e){const n={code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The following command runs an optimized set of rules for your project:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"semgrep --config p/default\n"})})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},21250:(e,n,i)=>{i.d(n,{A:()=>t});i(96540);var s=i(74848);function t(e){let{ruleId:n}=e;const i=new URL("https://semgrep.dev/r");return i.searchParams.set("q",n),(0,s.jsx)("a",{href:i,target:"_blank",children:n})}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},30355:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>g,frontMatter:()=>d,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"cheat-sheets/flask-xss","title":"XSS prevention for Flask","description":"Flask XSS prevention cheat sheet.","source":"@site/docs/cheat-sheets/flask-xss.mdx","sourceDirName":"cheat-sheets","slug":"/cheat-sheets/flask-xss","permalink":"/semgrep-docs/cheat-sheets/flask-xss","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/cheat-sheets/flask-xss.mdx","tags":[],"version":"current","lastUpdatedAt":1753214405000,"frontMatter":{"slug":"flask-xss","description":"Flask XSS prevention cheat sheet."},"sidebar":"cheatsheetSidebar","previous":{"title":"XSS prevention for ExpressJS","permalink":"/semgrep-docs/cheat-sheets/express-xss"},"next":{"title":"XSS prevention for Go net/http","permalink":"/semgrep-docs/cheat-sheets/go-xss"}}');var t=i(74848),r=i(28453),a=i(21250),l=i(88483),c=i(10064);const d={slug:"flask-xss",description:"Flask XSS prevention cheat sheet."},o="XSS prevention for Flask",h={},p=[...l.RM,{value:"Mitigation summary",id:"mitigation-summary",level:2},{value:"Check your project using Semgrep",id:"check-your-project-using-semgrep",level:3},...c.RM,{value:"1. Server code: Unescaped variable enters template engine in Python code",id:"1-server-code-unescaped-variable-enters-template-engine-in-python-code",level:2},{value:"1.A. <strong>render_template_string()</strong> with string formatting",id:"1a-render_template_string-with-string-formatting",level:3},{value:"References",id:"references",level:4},{value:"Mitigation",id:"mitigation",level:4},{value:"Semgrep rule",id:"semgrep-rule",level:4},{value:"1.B. <strong>render_template()</strong> with unescaped file extension",id:"1b-render_template-with-unescaped-file-extension",level:3},{value:"References",id:"references-1",level:4},{value:"Mitigation",id:"mitigation-1",level:4},{value:"Semgrep rule",id:"semgrep-rule-1",level:4},{value:"1.C. Explicitly unescaping variables using <strong>Markup()</strong>",id:"1c-explicitly-unescaping-variables-using-markup",level:3},{value:"References",id:"references-2",level:4},{value:"Mitigation",id:"mitigation-2",level:4},{value:"Semgrep rule",id:"semgrep-rule-2",level:4},{value:"2. Server code: Bypassing the template engine&quot;",id:"2-server-code-bypassing-the-template-engine",level:2},{value:"2.A. Returning directly from a route",id:"2a-returning-directly-from-a-route",level:3},{value:"References",id:"references-3",level:4},{value:"Mitigation",id:"mitigation-3",level:4},{value:"Semgrep rule",id:"semgrep-rule-3",level:4},{value:"2.B. Using a Jinja2 environment directly",id:"2b-using-a-jinja2-environment-directly",level:3},{value:"References",id:"references-4",level:4},{value:"Mitigation",id:"mitigation-4",level:4},{value:"Semgrep rule",id:"semgrep-rule-4",level:4},{value:"3. Templates: Variable explicitly unescaped",id:"3-templates-variable-explicitly-unescaped",level:2},{value:"3.A. Usage of the <strong>| safe</strong> filter",id:"3a-usage-of-the--safe-filter",level:3},{value:"References",id:"references-5",level:4},{value:"Mitigation",id:"mitigation-5",level:4},{value:"Semgrep rule",id:"semgrep-rule-5",level:4},{value:"3.B. Disabling autoescaping with <strong>{% autoescape false %}</strong>",id:"3b-disabling-autoescaping-with--autoescape-false-",level:3},{value:"References",id:"references-6",level:4},{value:"Mitigation",id:"mitigation-6",level:4},{value:"Semgrep rule",id:"semgrep-rule-6",level:4},{value:"4. Templates: Variable in dangerous location",id:"4-templates-variable-in-dangerous-location",level:2},{value:"4.A. Unquoted variable in HTML attribute",id:"4a-unquoted-variable-in-html-attribute",level:3},{value:"References",id:"references-7",level:4},{value:"Mitigation",id:"mitigation-7",level:4},{value:"Semgrep rule",id:"semgrep-rule-7",level:4},{value:"4.B. Variable in <strong>href</strong> attribute",id:"4b-variable-in-href-attribute",level:3},{value:"References",id:"references-8",level:4},{value:"Mitigation",id:"mitigation-8",level:4},{value:"Semgrep rule",id:"semgrep-rule-8",level:4},{value:"4.C Variable in <strong>&lt;script&gt;</strong> block&quot;",id:"4c-variable-in-script-block",level:3},{value:"References",id:"references-9",level:4},{value:"Mitigation",id:"mitigation-9",level:4}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"xss-prevention-for-flask",children:"XSS prevention for Flask"})}),"\n",(0,t.jsx)(l.Ay,{}),"\n",(0,t.jsx)(n.h2,{id:"mitigation-summary",children:"Mitigation summary"}),"\n",(0,t.jsxs)(n.p,{children:["In general, you should use ",(0,t.jsx)(n.code,{children:"render_template()"})," when showing data to users. If you need HTML escaping, use ",(0,t.jsx)(n.code,{children:"Markup()"})," and review\neach individual usage carefully. Once reviewed, mark the line with ",(0,t.jsx)(n.code,{children:"# nosem"}),". Beware of putting data in dangerous locations in\ntemplates. And as always, run a security checker continuously on your code."]}),"\n",(0,t.jsxs)(n.p,{children:["Semgrep ruleset for this cheatsheet: ",(0,t.jsx)(n.a,{href:"https://semgrep.dev/p/minusworld.flask-xss",children:"https://semgrep.dev/p/minusworld.flask-xss"})]}),"\n",(0,t.jsx)(n.h3,{id:"check-your-project-using-semgrep",children:"Check your project using Semgrep"}),"\n",(0,t.jsx)(c.Ay,{}),"\n",(0,t.jsx)(n.h2,{id:"1-server-code-unescaped-variable-enters-template-engine-in-python-code",children:"1. Server code: Unescaped variable enters template engine in Python code"}),"\n",(0,t.jsxs)(n.h3,{id:"1a-render_template_string-with-string-formatting",children:["1.A. ",(0,t.jsx)(n.strong,{children:"render_template_string()"})," with string formatting"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"render_template_string()"})," renders a Jinja2 template directly from a string. If the template is modified in any way, such as with string formatting, it creates a potential server-side template injection. Using ",(0,t.jsx)(n.code,{children:"render_template()"})," is strictly safer because it does not create an opportunity to modify the template."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'render_template_string("<div>%s</div>" % request.args.get("name"))\n'})}),"\n",(0,t.jsx)(n.h4,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://blog.nvisium.com/p263",children:"Exploring SSTI in Flask/Jinja2"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti",children:"Flask & Jinja2 SSTI Cheatsheet"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"mitigation",children:"Mitigation"}),"\n",(0,t.jsxs)(n.p,{children:["Ban ",(0,t.jsx)(n.code,{children:"render_template_string()"}),". Alternatively, use ",(0,t.jsx)(n.code,{children:"render_template()"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"semgrep-rule",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.flask.security.audit.render-template-string.render-template-string"}),"\n",(0,t.jsxs)(n.h3,{id:"1b-render_template-with-unescaped-file-extension",children:["1.B. ",(0,t.jsx)(n.strong,{children:"render_template()"})," with unescaped file extension"]}),"\n",(0,t.jsxs)(n.p,{children:["Flask only escapes templates with ",(0,t.jsx)(n.code,{children:".html"}),", ",(0,t.jsx)(n.code,{children:".htm"}),", ",(0,t.jsx)(n.code,{children:".xml"}),", or ",(0,t.jsx)(n.code,{children:".xhtml"})," extensions.\nThis is not always obvious and could create cross-site scripting vulnerabilities."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'render_template("unsafe.jinja2")\n'})}),"\n",(0,t.jsx)(n.h4,{id:"references-1",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup",children:"Flask documentation - Escaping behavior"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://bento.dev/checks/flask/unescaped-file-extension/",children:"Bento check - Unescaped Template Extension"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://semgrep.dev/blog/2020/bento-check-unescaped-template-extensions-in-flask/",children:"Unescaped template extensions in Flask"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"mitigation-1",children:"Mitigation"}),"\n",(0,t.jsxs)(n.p,{children:["Ban unescaped extensions. Alternatively, only use ",(0,t.jsx)(n.code,{children:".html"})," extensions for templates. If no escaping is needed, review each case and exempt with ",(0,t.jsx)(n.code,{children:"# nosem"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"semgrep-rule-1",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.flask.security.unescaped-template-extension.unescaped-template-extension"}),"\n",(0,t.jsxs)(n.h3,{id:"1c-explicitly-unescaping-variables-using-markup",children:["1.C. Explicitly unescaping variables using ",(0,t.jsx)(n.strong,{children:"Markup()"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Markup()"})," disables HTML escaping for the returned content. This permits raw HTML to be rendered in a template, which could create a XSS vulnerability."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"flask.Markup(html_content)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"references-2",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping",children:"Flask autoescaping documentation"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"mitigation-2",children:"Mitigation"}),"\n",(0,t.jsxs)(n.p,{children:["Ban ",(0,t.jsx)(n.code,{children:"Markup()"}),". Alternatively, if needed, review each usage and exempt with ",(0,t.jsx)(n.code,{children:"# nosem"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"semgrep-rule-2",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"2-server-code-bypassing-the-template-engine",children:'2. Server code: Bypassing the template engine"'}),"\n",(0,t.jsx)(n.h3,{id:"2a-returning-directly-from-a-route",children:"2.A. Returning directly from a route"}),"\n",(0,t.jsxs)(n.p,{children:["Returning values directly from a route bypasses the template rendering engine, therefore bypassing any escaping. Use functionality provided by Flask to return content from routes, such as ",(0,t.jsx)(n.code,{children:"render_template()"})," or ",(0,t.jsx)(n.code,{children:"jsonify()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@app.route("/index/<msg>")\ndef index(msg):\n  return "Hello! " + msg\n'})}),"\n",(0,t.jsx)(n.h4,{id:"references-3",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://lgtm.com/rules/1506064236628/",children:"Reflected server-side cross-site scripting"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"mitigation-3",children:"Mitigation"}),"\n",(0,t.jsxs)(n.p,{children:["Ban returning values directly from routes. Alternatively, use ",(0,t.jsx)(n.code,{children:"render_template()"})," or ",(0,t.jsx)(n.code,{children:"jsonify()"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"semgrep-rule-3",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string"}),"\n",(0,t.jsx)(n.h3,{id:"2b-using-a-jinja2-environment-directly",children:"2.B. Using a Jinja2 environment directly"}),"\n",(0,t.jsxs)(n.p,{children:["Flask already comes with a Jinja2 environment ready for use which can be invoked via the ",(0,t.jsx)(n.code,{children:"render_template()"})," function. Using Jinja2 directly may bypass the escaping protections that are enabled in Flask by default."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"with open('template', 'r') as fin:\n  jinja2.Template(fin.read()).render()\n"})}),"\n",(0,t.jsx)(n.h4,{id:"references-4",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html",children:"Bandit Check - Jinja2 Autoescape False"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"mitigation-4",children:"Mitigation"}),"\n",(0,t.jsxs)(n.p,{children:["Ban using Jinja2 directly. Alternatively, use ",(0,t.jsx)(n.code,{children:"render_template()"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"semgrep-rule-4",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"3-templates-variable-explicitly-unescaped",children:"3. Templates: Variable explicitly unescaped"}),"\n",(0,t.jsxs)(n.h3,{id:"3a-usage-of-the--safe-filter",children:["3.A. Usage of the ",(0,t.jsx)(n.strong,{children:"| safe"})," filter"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"| safe"})," filter disables HTML escaping for the provided content. This permits raw HTML to be rendered in a template, which could create a XSS vulnerability."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"{{ name | safe }}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"references-5",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping",children:"Flask autoescaping documentation"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"mitigation-5",children:"Mitigation"}),"\n",(0,t.jsxs)(n.p,{children:["Ban ",(0,t.jsx)(n.code,{children:"| safe"}),". Alternatively, use ",(0,t.jsx)(n.code,{children:"Markup()"})," in Python code if necessary."]}),"\n",(0,t.jsx)(n.h4,{id:"semgrep-rule-5",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe"}),"\n",(0,t.jsxs)(n.h3,{id:"3b-disabling-autoescaping-with--autoescape-false-",children:["3.B. Disabling autoescaping with ",(0,t.jsx)(n.strong,{children:"{% autoescape false %}"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"{$ autoescape false %}"})," block disables autoescaping for whole portions of the template. Disabling autoescaping allows HTML characters to be rendered directly onto the page which could create XSS vulnerabilities."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"{% autoescape false %}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"references-6",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping",children:"Flask autoescaping documentation"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"mitigation-6",children:"Mitigation"}),"\n",(0,t.jsxs)(n.p,{children:["Ban ",(0,t.jsx)(n.code,{children:"{$ autoescape false %}"}),". Alternatively, use ",(0,t.jsx)(n.code,{children:"Markup()"})," in Python code if necessary."]}),"\n",(0,t.jsx)(n.h4,{id:"semgrep-rule-6",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"4-templates-variable-in-dangerous-location",children:"4. Templates: Variable in dangerous location"}),"\n",(0,t.jsx)(n.h3,{id:"4a-unquoted-variable-in-html-attribute",children:"4.A. Unquoted variable in HTML attribute"}),"\n",(0,t.jsxs)(n.p,{children:["Unquoted template variables rendered into HTML attributes is a potential XSS vector because an attacker could inject JavaScript handlers which do not require HTML characters. An example handler might look like: ",(0,t.jsx)(n.code,{children:"onmouseover=alert(1)"}),". HTML escaping will not mitigate this. The variable must be quoted to avoid this."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"<div class={{ classes }}></div>\n"})}),"\n",(0,t.jsx)(n.h4,{id:"references-7",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",children:"Flask cross-site scripting considerations"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"mitigation-7",children:"Mitigation"}),"\n",(0,t.jsx)(n.p,{children:"Flag unquoted HTML attributes with Jinja expressions. Alternatively, always use quotes around HTML attributes."}),"\n",(0,t.jsx)(n.h4,{id:"semgrep-rule-7",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.flask.security.xss.audit.template-unquoted-attribute-var.template-unquoted-attribute-var"}),"\n",(0,t.jsxs)(n.h3,{id:"4b-variable-in-href-attribute",children:["4.B. Variable in ",(0,t.jsx)(n.strong,{children:"href"})," attribute"]}),"\n",(0,t.jsxs)(n.p,{children:["Template variables in a ",(0,t.jsx)(n.code,{children:"href"})," value could still accept the ",(0,t.jsx)(n.code,{children:"javascript:"})," URI. This could be a XSS vulnerability. HTML escaping will not prevent this. Use ",(0,t.jsx)(n.code,{children:"url_for"})," to generate links."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'<a href="{{ link }}"></a>\n'})}),"\n",(0,t.jsx)(n.h4,{id:"references-8",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",children:"Flask cross-site scripting considerations"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"mitigation-8",children:"Mitigation"}),"\n",(0,t.jsxs)(n.p,{children:["Flag template variables in ",(0,t.jsx)(n.code,{children:"href"})," attributes. Alternatively, use ",(0,t.jsx)(n.code,{children:"url_for"})," to generate links."]}),"\n",(0,t.jsx)(n.h4,{id:"semgrep-rule-8",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.flask.security.xss.audit.template-href-var.template-href-var"}),"\n",(0,t.jsxs)(n.h3,{id:"4c-variable-in-script-block",children:["4.C Variable in ",(0,t.jsx)(n.strong,{children:"<script>"}),' block"']}),"\n",(0,t.jsx)(n.p,{children:"Template variables placed directly into JavaScript or similar are now directly in a code execution context. Normal HTML escaping will not prevent the possibility of code injection because code can be written without HTML characters. This creates the potential for XSS vulnerabilities, or worse."}),"\n",(0,t.jsx)(n.h4,{id:"references-9",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",children:"Template engines: Why default encoders are not enough"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.a,{href:"https://flask.palletsprojects.com/en/1.1.x/templating/#standard-filters",children:[(0,t.jsx)(n.code,{children:"tojson"})," documentation"]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.a,{href:"https://stackoverflow.com/a/44840756",children:["How to use ",(0,t.jsx)(n.code,{children:"tojson"})," in a data attribute"]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/",children:"Safely including data for JavaScript in a Django template"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"<script>var name = {{ name }};<\/script>\n"})}),"\n",(0,t.jsx)(n.h4,{id:"mitigation-9",children:"Mitigation"}),"\n",(0,t.jsxs)(n.p,{children:["Ban template variables in ",(0,t.jsx)(n.code,{children:"<script>"})," blocks. Alternatively, use the ",(0,t.jsx)(n.code,{children:"tojson"})," filter inside a data attribute and ",(0,t.jsx)(n.code,{children:"JSON.parse()"})," in JavaScript."]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},88483:(e,n,i)=>{i.d(n,{Ay:()=>l,RM:()=>r});var s=i(74848),t=i(28453);const r=[];function a(e){const n={p:"p",...(0,t.R)(),...e.components};return(0,s.jsx)(n.p,{children:"This is a cross-site scripting (XSS) prevention cheat sheet by Semgrep, Inc. It contains code patterns of potential XSS in an application. Instead of scrutinizing code for exploitable vulnerabilities, the recommendations in this cheat sheet pave a safe road for developers that mitigate the possibility of XSS in your code. By following these recommendations, you can be reasonably sure your code is free of XSS."})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);