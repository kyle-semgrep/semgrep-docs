"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[43521],{10064:(e,n,i)=>{i.d(n,{Ay:()=>a,RM:()=>t});var s=i(74848),r=i(28453);const t=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The following command runs an optimized set of rules for your project:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"semgrep --config p/default\n"})})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},10864:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>g,frontMatter:()=>d,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"cheat-sheets/rails-xss","title":"XSS prevention for Ruby on Rails","description":"XSS prevention cheat sheet for Ruby on Rails.","source":"@site/docs/cheat-sheets/rails-xss.mdx","sourceDirName":"cheat-sheets","slug":"/cheat-sheets/rails-xss","permalink":"/semgrep-docs/cheat-sheets/rails-xss","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/cheat-sheets/rails-xss.mdx","tags":[],"version":"current","lastUpdatedAt":1753220396000,"frontMatter":{"slug":"rails-xss","description":"XSS prevention cheat sheet for Ruby on Rails."},"sidebar":"cheatsheetSidebar","previous":{"title":"XSS prevention for Java + JSP","permalink":"/semgrep-docs/cheat-sheets/java-jsp-xss"},"next":{"title":"XXE","permalink":"/semgrep-docs/category/xxe"}}');var r=i(74848),t=i(28453),l=i(21250),a=i(88483),c=i(10064);const d={slug:"rails-xss",description:"XSS prevention cheat sheet for Ruby on Rails."},o="XSS prevention for Ruby on Rails",h={},u=[...a.RM,{value:"Mitigation summary",id:"mitigation-summary",level:2},{value:"Check your project using Semgrep",id:"check-your-project-using-semgrep",level:3},...c.RM,{value:"1. Unescaped variable enters template engine in Ruby code",id:"1-unescaped-variable-enters-template-engine-in-ruby-code",level:2},{value:"1.A. Using <strong>html_safe()</strong>",id:"1a-using-html_safe",level:3},{value:"References",id:"references",level:4},{value:"Mitigation",id:"mitigation",level:4},{value:"Semgrep rule",id:"semgrep-rule",level:4},{value:"1.B. Using <strong>content_tag()</strong>",id:"1b-using-content_tag",level:3},{value:"References",id:"references-1",level:4},{value:"Mitigation",id:"mitigation-1",level:4},{value:"Semgrep rule",id:"semgrep-rule-1",level:4},{value:"1.C. Using <strong>raw()</strong>",id:"1c-using-raw",level:3},{value:"References",id:"references-2",level:4},{value:"Mitigation",id:"mitigation-2",level:4},{value:"Semgrep rule",id:"semgrep-rule-2",level:4},{value:"1.D. Disabling of <strong>ActiveSupport#escape_html_entities_in_json</strong>",id:"1d-disabling-of-activesupportescape_html_entities_in_json",level:3},{value:"References",id:"references-3",level:4},{value:"Mitigation",id:"mitigation-3",level:4},{value:"Semgrep rule",id:"semgrep-rule-3",level:4},{value:"2. Bypassing the template engine",id:"2-bypassing-the-template-engine",level:2},{value:"2.A. Manually creating an ERB template",id:"2a-manually-creating-an-erb-template",level:3},{value:"References",id:"references-4",level:4},{value:"Mitigation",id:"mitigation-4",level:4},{value:"Semgrep rule",id:"semgrep-rule-4",level:4},{value:"2.B. Rendering an inline template with <strong>render inline</strong>",id:"2b-rendering-an-inline-template-with-render-inline",level:3},{value:"References",id:"references-5",level:4},{value:"Mitigation",id:"mitigation-5",level:4},{value:"Semgrep rule",id:"semgrep-rule-5",level:4},{value:"2.C. Using <strong>render text:</strong>",id:"2c-using-render-text",level:3},{value:"References",id:"references-6",level:4},{value:"Mitigation",id:"mitigation-6",level:4},{value:"Semgrep rule",id:"semgrep-rule-6",level:4},{value:"3. Templates: Variable explicitly unescaped",id:"3-templates-variable-explicitly-unescaped",level:2},{value:"3.A. Using <strong>html_safe()</strong>",id:"3a-using-html_safe",level:3},{value:"References",id:"references-7",level:4},{value:"Mitigation",id:"mitigation-7",level:4},{value:"Semgrep rule",id:"semgrep-rule-7",level:4},{value:"3.B Using <strong>content_tag()</strong>",id:"3b-using-content_tag",level:3},{value:"References",id:"references-8",level:4},{value:"Mitigation",id:"mitigation-8",level:4},{value:"Semgrep rule",id:"semgrep-rule-8",level:4},{value:"3.C. Using <strong>raw()</strong>",id:"3c-using-raw",level:3},{value:"References",id:"references-9",level:4},{value:"Mitigation",id:"mitigation-9",level:4},{value:"Semgrep rule",id:"semgrep-rule-9",level:4},{value:"3.D. Using <strong>&lt;%== ... %&gt;</strong>, which is an alias for <strong>html_safe()</strong>",id:"3d-using----which-is-an-alias-for-html_safe",level:3},{value:"References",id:"references-10",level:4},{value:"Mitigation",id:"mitigation-10",level:4},{value:"Semgrep rule",id:"semgrep-rule-10",level:4},{value:"4. Templates: Variable in dangerous location",id:"4-templates-variable-in-dangerous-location",level:2},{value:"4.A Unquoted variable in HTML attribute",id:"4a-unquoted-variable-in-html-attribute",level:3},{value:"References:",id:"references-11",level:4},{value:"Mitigation",id:"mitigation-11",level:4},{value:"Semgrep rule",id:"semgrep-rule-11",level:4},{value:"4.B. Variable in <strong>href</strong> attribute",id:"4b-variable-in-href-attribute",level:3},{value:"References",id:"references-12",level:4},{value:"Mitigation",id:"mitigation-12",level:4},{value:"Semgrep rule",id:"semgrep-rule-12",level:4},{value:"4.C. Using <strong>link_to</strong> with unrestricted URL scheme",id:"4c-using-link_to-with-unrestricted-url-scheme",level:3},{value:"References",id:"references-13",level:4},{value:"Mitigation",id:"mitigation-13",level:4},{value:"Semgrep rule",id:"semgrep-rule-13",level:4},{value:"4.D. Variable in <strong>&lt;script&gt;</strong> block",id:"4d-variable-in-script-block",level:3},{value:"References",id:"references-14",level:4},{value:"Mitigation",id:"mitigation-14",level:4},{value:"Semgrep rule",id:"semgrep-rule-14",level:4}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"xss-prevention-for-ruby-on-rails",children:"XSS prevention for Ruby on Rails"})}),"\n",(0,r.jsx)(a.Ay,{}),"\n",(0,r.jsx)(n.h2,{id:"mitigation-summary",children:"Mitigation summary"}),"\n",(0,r.jsxs)(n.p,{children:["In general, always let Rails render ERB template files rather than constructing them in code. If HTML escaping is needed, use ",(0,r.jsx)(n.code,{children:"html_safe()"})," in Ruby code and review each individual usage carefully. Once reviewed, mark the line with ",(0,r.jsx)(n.code,{children:"# nosem"}),". Beware of putting data in dangerous locations in templates. And as always, run a security checker continuously on your code."]}),"\n",(0,r.jsx)(n.h3,{id:"check-your-project-using-semgrep",children:"Check your project using Semgrep"}),"\n",(0,r.jsx)(c.Ay,{}),"\n",(0,r.jsx)(n.h2,{id:"1-unescaped-variable-enters-template-engine-in-ruby-code",children:"1. Unescaped variable enters template engine in Ruby code"}),"\n",(0,r.jsxs)(n.h3,{id:"1a-using-html_safe",children:["1.A. Using ",(0,r.jsx)(n.strong,{children:"html_safe()"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"html_safe()"}),' marks the supplied string as "safe for HTML rendering." This bypasses HTML escaping and potentially creates XSS vulnerabilities.']}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'html = "<div>#{name}</div>".html_safe\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross_site_scripting/index.markdown",children:"Brakeman scanner - Cross-site scripting"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/",children:"Preventing XSS in Ruby on Rails"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Ban ",(0,r.jsx)(n.code,{children:"html_safe()"}),". Alternatively, If needed, review each usage and exempt with ",(0,r.jsx)(n.code,{children:"# nosem"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe"}),"\n",(0,r.jsxs)(n.h3,{id:"1b-using-content_tag",children:["1.B. Using ",(0,r.jsx)(n.strong,{children:"content_tag()"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"content_tag()"}),'\'s escaping behavior has changed between Rails 2 and 3. In Rails 2, no supplied content is escaped. In Rails 2 and 3, attribute names are not escaped. Further, the returned value is marked as "safe," the same as if ',(0,r.jsx)(n.code,{children:"html_safe()"})," had been used. This confusing behavior makes it difficult to use ",(0,r.jsx)(n.code,{children:"content_tag()"})," properly; improper use can create XSS vulnerabilities in your application."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'content_tag :p, "Hello, #{name}"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-1",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://brakemanscanner.org/docs/warning_types/content_tag/",children:"Brakeman scanner - Content tag"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-1",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Ban ",(0,r.jsx)(n.code,{children:"content_tag()"}),". Alternatively, If necessary, prefer ",(0,r.jsx)(n.code,{children:"html_safe()"})," due to its straightforward behavior."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-1",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag"}),"\n",(0,r.jsxs)(n.h3,{id:"1c-using-raw",children:["1.C. Using ",(0,r.jsx)(n.strong,{children:"raw()"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"raw()"})," disables HTML escaping for the returned content. This permits raw HTML to be rendered in a template, which could create a XSS vulnerability."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"raw @user.name\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-2",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw",children:[(0,r.jsx)(n.code,{children:"raw()"})," documentation"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/",children:"Preventing XSS in Ruby on Rails"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-2",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Ban ",(0,r.jsx)(n.code,{children:"raw()"}),". Alternatively, Prefer ",(0,r.jsx)(n.code,{children:"html_safe()"})," if necessary."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-2",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.avoid-raw.avoid-raw"}),"\n",(0,r.jsxs)(n.h3,{id:"1d-disabling-of-activesupportescape_html_entities_in_json",children:["1.D. Disabling of ",(0,r.jsx)(n.strong,{children:"ActiveSupport#escape_html_entities_in_json"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ActiveSupport#escape_html_entities_in_json"})," is a setting which determines whether ",(0,r.jsx)(n.code,{children:"Hash#to_json()"})," will escape HTML characters. Disabling this could create XSS vulnerabilities."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"config.active_support.escape_html_entities_in_json = false\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-3",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://rubydoc.info/docs/rails/ActiveSupport/JSON/Encoding.escape_html_entities_in_json=",children:[(0,r.jsx)(n.code,{children:"escape_html_entities_in_json"})," documentation"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://brakemanscanner.org/docs/warning_types/cross_site_scripting_to_json/",children:"Brakeman scanner - Cross-site scripting (JSON)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://stackoverflow.com/a/43877771",children:"How to disable HTML escaping for JSON, but keep enabled for views?"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-3",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Ban disabling of ",(0,r.jsx)(n.code,{children:"ActiveSupport#escape_html_entities_in_json"}),". Alternatively, If HTML is needed in JSON, use ",(0,r.jsx)(n.code,{children:"JSON.generate()"})," and review each usage carefully. Exempt each case with ",(0,r.jsx)(n.code,{children:"# nosem"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-3",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.lang.security.json-entity-escape.json-entity-escape"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-bypassing-the-template-engine",children:"2. Bypassing the template engine"}),"\n",(0,r.jsx)(n.h3,{id:"2a-manually-creating-an-erb-template",children:"2.A. Manually creating an ERB template"}),"\n",(0,r.jsx)(n.p,{children:"Manually creating an ERB template could create a server-side template injection (SSTI) vulnerability if it is created with user input. (This could also result in XSS.) Due to the severity of this type of vulnerability, it is better to use a template file instead of creating templates in code."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'ERB.new("<div>#{@user.name}</div>").result\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-4",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown",children:"Brakeman scanner - Template injection"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.trustedsec.com/blog/rubyerb-template-injection/",children:"Ruby ERB template injection"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-4",children:"Mitigation"}),"\n",(0,r.jsx)(n.p,{children:"Ban template creation in code. Alternatively, Use ERB template files."}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-4",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.manual-template-creation.manual-template-creation"}),"\n",(0,r.jsxs)(n.h3,{id:"2b-rendering-an-inline-template-with-render-inline",children:["2.B. Rendering an inline template with ",(0,r.jsx)(n.strong,{children:"render inline"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"render inline:"})," is the same as creating a template manually and is therefore susceptible to the same vulnerabilities as manually creating an ERB template. This can result in a SSTI or XSS vulnerability."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'render inline: "<div>#{@user.name}</div>"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-5",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/brunofacca/zen-rails-security-checklist#output-escaping--sanitization",children:"Zen Rails Security Checklist"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss",children:"Inline renders - even worse than XSS!"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-5",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Ban ",(0,r.jsx)(n.code,{children:"render inline:"}),". Alternatively, Use ERB template files."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-5",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.avoid-render-inline.avoid-render-inline"}),"\n",(0,r.jsxs)(n.h3,{id:"2c-using-render-text",children:["2.C. Using ",(0,r.jsx)(n.strong,{children:"render text:"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"render text:"})," unintuitively sets the Content-Type to text/html. This means anything rendered through ",(0,r.jsx)(n.code,{children:"render text:"})," will be interpreted as HTML. Templates rendered in this manner could create a XSS vulnerability."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'render text: "<div>#{@user.name}</div>"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-6",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss",children:"Inline renders - even worse than XSS!"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-6",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Ban ",(0,r.jsx)(n.code,{children:"render text:"}),". Alternatively, Use ERB template files."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-6",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.avoid-render-text.avoid-render-text"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-templates-variable-explicitly-unescaped",children:"3. Templates: Variable explicitly unescaped"}),"\n",(0,r.jsxs)(n.h3,{id:"3a-using-html_safe",children:["3.A. Using ",(0,r.jsx)(n.strong,{children:"html_safe()"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"html_safe()"}),' marks the supplied string as "safe for HTML rendering." This bypasses HTML escaping and potentially creates XSS vulnerabilities.']}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"<%= name.html_safe %>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-7",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross_site_scripting/index.markdown",children:"Brakeman scanner - Cross-site scripting"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/",children:"Preventing XSS in Ruby on Rails"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-7",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Ban ",(0,r.jsx)(n.code,{children:"html_safe()"}),". Alternatively, Prefer using ",(0,r.jsx)(n.code,{children:"html_safe()"})," in Ruby code instead of templates."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-7",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.templates.avoid-html-safe.avoid-html-safe"}),"\n",(0,r.jsxs)(n.h3,{id:"3b-using-content_tag",children:["3.B Using ",(0,r.jsx)(n.strong,{children:"content_tag()"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"content_tag()"}),'\'s escaping behavior has changed between Rails 2 and 3. In Rails 2, no supplied content is escaped. In Rails 2 and 3, attribute names are not escaped. Further, the returned value is marked as "safe," the same as if ',(0,r.jsx)(n.code,{children:"html_safe()"})," had been used. This confusing behavior makes it difficult to use ",(0,r.jsx)(n.code,{children:"content_tag()"})," properly; improper use can create XSS vulnerabilities in your application."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'<%= content_tag :p, "Hello, #{name}" %>\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-8",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://brakemanscanner.org/docs/warning_types/content_tag/",children:"Brakeman scanner - Content tag"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-8",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Ban ",(0,r.jsx)(n.code,{children:"content_tag()"}),". Alternatively, If necessary, prefer ",(0,r.jsx)(n.code,{children:"html_safe()"})," in Ruby code due to its straightforward behavior."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-8",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.templates.avoid-content-tag.avoid-content-tag"}),"\n",(0,r.jsxs)(n.h3,{id:"3c-using-raw",children:["3.C. Using ",(0,r.jsx)(n.strong,{children:"raw()"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"raw()"})," disables HTML escaping for the returned content. This permits raw HTML to be rendered in a template, which could create a XSS vulnerability."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"<%= raw @user.name =>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-9",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw",children:[(0,r.jsx)(n.code,{children:"raw()"})," documentation"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/",children:"Preventing XSS in Ruby on Rails"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-9",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Ban ",(0,r.jsx)(n.code,{children:"raw()"}),". Alternatively, Prefer ",(0,r.jsx)(n.code,{children:"html_safe()"})," in Ruby code if necessary."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-9",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.templates.avoid-raw.avoid-raw"}),"\n",(0,r.jsxs)(n.h3,{id:"3d-using----which-is-an-alias-for-html_safe",children:["3.D. Using ",(0,r.jsx)(n.strong,{children:"<%== ... %>"}),", which is an alias for ",(0,r.jsx)(n.strong,{children:"html_safe()"})]}),"\n",(0,r.jsxs)(n.p,{children:["The double-equals ",(0,r.jsx)(n.code,{children:"=="})," is an ERB alias for ",(0,r.jsx)(n.code,{children:"html_safe()"}),'. This will mark the contents as "safe for rendering" and may introduce an XSS vulnerability.']}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"<%== @user.name %>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-10",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027",children:["Alias for ",(0,r.jsx)(n.code,{children:"html_safe()"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===",children:"Raw vs. html_safe"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-10",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Ban ",(0,r.jsx)(n.code,{children:"<%== ... %>"}),", which is an alias for ",(0,r.jsx)(n.code,{children:"html_safe()"}),". Alternatively, Prefer ",(0,r.jsx)(n.code,{children:"html_safe()"})," in Ruby code if necessary."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-10",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.templates.alias-for-html-safe.alias-for-html-safe"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-templates-variable-in-dangerous-location",children:"4. Templates: Variable in dangerous location"}),"\n",(0,r.jsx)(n.h3,{id:"4a-unquoted-variable-in-html-attribute",children:"4.A Unquoted variable in HTML attribute"}),"\n",(0,r.jsxs)(n.p,{children:["Unquoted template variables rendered into HTML attributes is a potential XSS vector because an attacker could inject JavaScript handlers which do not require HTML characters. An example handler might look like: ",(0,r.jsx)(n.code,{children:"onmouseover=alert(1)"}),". HTML escaping will not mitigate this. The variable must be quoted to avoid this."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"<div class=<%= classes %></div>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-11",children:"References:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",children:"Flask cross-site scripting considerations - unquoted variable in HTML attribute"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-11",children:"Mitigation"}),"\n",(0,r.jsx)(n.p,{children:"Flag unquoted HTML attributes ERB expressions. Alternatively, Always use quotes around HTML attributes."}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-11",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.templates.unquoted-attribute.unquoted-attribute"}),"\n",(0,r.jsxs)(n.h3,{id:"4b-variable-in-href-attribute",children:["4.B. Variable in ",(0,r.jsx)(n.strong,{children:"href"})," attribute"]}),"\n",(0,r.jsxs)(n.p,{children:["Template variables in a ",(0,r.jsx)(n.code,{children:"href"})," value could still accept the ",(0,r.jsx)(n.code,{children:"javascript:"})," URI. This could be a XSS vulnerability. HTML escaping will not prevent this. Use ",(0,r.jsx)(n.code,{children:"link_to"})," beginning with a literal forward slash to generate links."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'<a href="<%= link %>"></a>\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-12",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",children:["Flask cross-site scripting considerations - variable in ",(0,r.jsx)(n.code,{children:"href"})]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-12",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Flag template variables in ",(0,r.jsx)(n.code,{children:"href"})," attributes. Alternatively, Use ",(0,r.jsx)(n.code,{children:"url_for"})," to generate links."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-12",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.templates.var-in-href.var-in-href"}),"\n",(0,r.jsxs)(n.h3,{id:"4c-using-link_to-with-unrestricted-url-scheme",children:["4.C. Using ",(0,r.jsx)(n.strong,{children:"link_to"})," with unrestricted URL scheme"]}),"\n",(0,r.jsxs)(n.p,{children:["Detected a template variable used in 'link_to'. This will generate dynamic data in the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: ",(0,r.jsx)(n.code,{children:'<%= link_to "Here", "/"+@link %>'}),". You may also consider setting the Content Security Policy (CSP) header."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'<%= link_to "Here", @link %>\n'})}),"\n",(0,r.jsx)(n.h4,{id:"references-13",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#cross-site-scripting-xss",children:"OWASP Cheatsheet - Ruby on Rails XSS"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/link_to_href/index.markdown",children:"Brakeman scanner - link_to"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-13",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Flag ",(0,r.jsx)(n.code,{children:"link_to"})," in templates. Alternatively, If you must use this, add a literal forward-slash at the beginning to create a relative url."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-13",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.templates.dangerous-link-to.dangerous-link-to"}),"\n",(0,r.jsxs)(n.h3,{id:"4d-variable-in-script-block",children:["4.D. Variable in ",(0,r.jsx)(n.strong,{children:"<script>"})," block"]}),"\n",(0,r.jsx)(n.p,{children:"Template variables placed directly into JavaScript or similar are now directly in a code execution context. Normal HTML escaping will not prevent the possibility of code injection because code can be written without HTML characters. This creates the potential for XSS vulnerabilities, or worse."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"<script>var name = <%= name %>;<\/script>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"references-14",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",children:"Template engines: Why default encoders are not enough"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://blog.ircmaxell.com/2018/06/protecting-rails-xss.html",children:"Protecting against XSS in Rails - JavaScript contexts"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"https://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript",children:[(0,r.jsx)(n.code,{children:"escape_javascript"})," documentation"]})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"mitigation-14",children:"Mitigation"}),"\n",(0,r.jsxs)(n.p,{children:["Ban template variables in ",(0,r.jsx)(n.code,{children:"&lt;script&gt;"})," blocks. Alternatively, If necessary, use the ",(0,r.jsx)(n.code,{children:"escape_javascript"})," function or its alias, ",(0,r.jsx)(n.code,{children:"j"}),". Review each usage carefully and exempt with ",(0,r.jsx)(n.code,{children:"# nosem"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"semgrep-rule-14",children:"Semgrep rule"}),"\n",(0,r.jsx)(l.A,{ruleId:"ruby.rails.security.audit.xss.templates.var-in-script-tag.var-in-script-tag"})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},21250:(e,n,i)=>{i.d(n,{A:()=>r});i(96540);var s=i(74848);function r(e){let{ruleId:n}=e;const i=new URL("https://semgrep.dev/r");return i.searchParams.set("q",n),(0,s.jsx)("a",{href:i,target:"_blank",children:n})}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},88483:(e,n,i)=>{i.d(n,{Ay:()=>a,RM:()=>t});var s=i(74848),r=i(28453);const t=[];function l(e){const n={p:"p",...(0,r.R)(),...e.components};return(0,s.jsx)(n.p,{children:"This is a cross-site scripting (XSS) prevention cheat sheet by Semgrep, Inc. It contains code patterns of potential XSS in an application. Instead of scrutinizing code for exploitable vulnerabilities, the recommendations in this cheat sheet pave a safe road for developers that mitigate the possibility of XSS in your code. By following these recommendations, you can be reasonably sure your code is free of XSS."})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);