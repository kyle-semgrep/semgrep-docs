"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[91379],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var i=s(96540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},97383:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"kb/semgrep-ci/ci-vs-cli","title":"Semgrep in CI vs CLI: align your SAST scan results and understand differences","description":"How to align your scan results between CI and CLI and understand differences in behavior.","source":"@site/docs/kb/semgrep-ci/ci-vs-cli.md","sourceDirName":"kb/semgrep-ci","slug":"/kb/semgrep-ci/ci-vs-cli","permalink":"/semgrep-docs/kb/semgrep-ci/ci-vs-cli","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/docs/kb/semgrep-ci/ci-vs-cli.md","tags":[{"inline":true,"label":"Semgrep in CI","permalink":"/semgrep-docs/tags/semgrep-in-ci"},{"inline":true,"label":"Semgrep CLI","permalink":"/semgrep-docs/tags/semgrep-cli"}],"version":"current","lastUpdatedAt":1752259747000,"frontMatter":{"description":"How to align your scan results between CI and CLI and understand differences in behavior.","tags":["Semgrep in CI","Semgrep CLI"]},"sidebar":"kbSidebar","previous":{"title":"Set up Jenkins pipeline projects for Bitbucket repositories","permalink":"/semgrep-docs/kb/semgrep-ci/bitbuket-jenkins-pipeline-projects"},"next":{"title":"Collecting Semgrep GitHub Actions logs from GitHub","permalink":"/semgrep-docs/kb/semgrep-ci/collect-gha-logs"}}');var r=s(74848),a=s(28453);const o={description:"How to align your scan results between CI and CLI and understand differences in behavior.",tags:["Semgrep in CI","Semgrep CLI"]},t="Semgrep in CI vs CLI: align your SAST scan results and understand differences",c={},l=[{value:"Installation methods and versioning",id:"installation-methods-and-versioning",level:2},{value:"Branches and diff-aware scans",id:"branches-and-diff-aware-scans",level:2},{value:"Rule configuration",id:"rule-configuration",level:2},{value:"Pro analysis",id:"pro-analysis",level:2},{value:"Blocking findings and errors",id:"blocking-findings-and-errors",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"semgrep-in-ci-vs-cli-align-your-sast-scan-results-and-understand-differences",children:"Semgrep in CI vs CLI: align your SAST scan results and understand differences"})}),"\n",(0,r.jsx)(n.p,{children:"When configuring Semgrep, it can be helpful to run it both using the command-line interface (CLI) and in continuous integration (CI) to review findings behavior."}),"\n",(0,r.jsx)(n.p,{children:"However, the two methods of running Semgrep have somewhat different behavior by default, so the findings may not be directly comparable. If you're seeing different findings with a CLI scan as compared to a scan in CI, here are some possible reasons."}),"\n",(0,r.jsx)(n.h2,{id:"installation-methods-and-versioning",children:"Installation methods and versioning"}),"\n",(0,r.jsxs)(n.p,{children:["When comparing Semgrep scans in CI and CLI, ensure that you are running the same version of Semgrep on the CLI as in CI, and that it is ",(0,r.jsx)(n.a,{href:"/getting-started/cli",children:"installed"})," in the same way as it is in CI."]}),"\n",(0,r.jsx)(n.p,{children:"If you use Semgrep's Docker image in CI and are running the CLI scan locally, the best options are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use the Docker container locally."}),"\n",(0,r.jsxs)(n.li,{children:["Install Semgrep using ",(0,r.jsx)(n.code,{children:"brew"})," (Mac only)."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"branches-and-diff-aware-scans",children:"Branches and diff-aware scans"}),"\n",(0,r.jsx)(n.p,{children:"When comparing findings, ensure that the scans were run on the same code. To compare results for an entire repository, the best option is to scan the latest commit to the default branch."}),"\n",(0,r.jsxs)(n.p,{children:["When running Semgrep in CI, if the triggering event is a pull request or merge request, the recommended configuration runs a ",(0,r.jsx)(n.a,{href:"/deployment/customize-ci-jobs#set-up-diff-aware-scans",children:"diff-aware scan"}),", so only findings identified in the changed code are reported. Therefore, not all findings are reported in these scans."]}),"\n",(0,r.jsx)(n.h2,{id:"rule-configuration",children:"Rule configuration"}),"\n",(0,r.jsxs)(n.p,{children:["If you use Semgrep with Semgrep AppSec Platform, ",(0,r.jsx)(n.code,{children:"semgrep ci"})," with no additional arguments executes a scan using your organization's ",(0,r.jsx)(n.a,{href:"/docs/semgrep-code/policies",children:"policies"})," configuration. Findings are determined by the rules present in different policies. If you have any organization-specific rules in your policies, those are included as well."]}),"\n",(0,r.jsxs)(n.p,{children:["Findings on rules in the Blocking policy cause the scan to finish with exit code 1. See also ",(0,r.jsx)(n.a,{href:"#blocking-findings-and-errors",children:"Blocking findings and errors"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["On the other hand, ",(0,r.jsx)(n.code,{children:"semgrep --config auto"})," executes a scan using relevant rules from the ",(0,r.jsx)(n.a,{href:"https://semgrep.dev/explore",children:"Semgrep Registry"}),", without using a particular configuration. It does not include organization-specific rules from Semgrep AppSec Platform."]}),"\n",(0,r.jsxs)(n.p,{children:["To address this difference, run ",(0,r.jsx)(n.code,{children:"semgrep scan"}),' with specific rules or rulesets that closely match your policies. For example, if your policies include only the "default" ruleset in the Monitor column, running:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'semgrep --config "p/default"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["would give similar results to ",(0,r.jsx)(n.code,{children:"semgrep ci"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"pro-analysis",children:"Pro analysis"}),"\n",(0,r.jsxs)(n.p,{children:["When using ",(0,r.jsx)(n.code,{children:"semgrep ci"})," with Semgrep AppSec Platform, you can configure whether the scan uses cross-file analysis in ",(0,r.jsx)(n.a,{href:"https://semgrep.dev/orgs/-/settings/general/code",children:"Settings"}),". If you enable cross-file analysis, Semgrep performs cross-file and cross-function analysis for ",(0,r.jsx)(n.a,{href:"/supported-languages#language-maturity-summary",children:"supported languages"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If cross-file analysis is not enabled in Semgrep AppSec Platform, ",(0,r.jsx)(n.a,{href:"/docs/semgrep-code/pro-rules",children:"Pro rules"})," are used, but they are run using cross-function analysis within single files."]}),"\n",(0,r.jsxs)(n.p,{children:["To perform a CLI scan using cross-file analysis, ensure you've run ",(0,r.jsx)(n.code,{children:"semgrep install-semgrep-pro"})," to ",(0,r.jsx)(n.a,{href:"/semgrep-code/semgrep-pro-engine-intro/#run-cross-file-analysis-in-the-cli",children:"install the additional semgrep binary"}),", and include ",(0,r.jsx)(n.code,{children:"--pro"})," in your command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"semgrep --config auto --pro\n"})}),"\n",(0,r.jsx)(n.p,{children:"To disable cross-file analysis in CI while still using Pro Engine, use:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"semgrep ci --pro-intrafile\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you want to fully revert to OSS-only analysis, disabling Pro Engine entirely, use:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"semgrep ci --oss-only\n"})}),"\n",(0,r.jsx)(n.h2,{id:"blocking-findings-and-errors",children:"Blocking findings and errors"}),"\n",(0,r.jsxs)(n.p,{children:["If you use Semgrep in CI without Semgrep AppSec Platform, ",(0,r.jsx)(n.code,{children:"semgrep ci"})," finishes with exit code 1 if there are any findings, since there is no way to distinguish blocking from non-blocking findings. Review ",(0,r.jsx)(n.a,{href:"/docs/semgrep-ci/configuring-blocking-and-errors-in-ci",children:"Configuring blocking findings and errors in continuous integration (CI)"})," to change this behavior."]}),"\n",(0,r.jsxs)(n.p,{children:["The CLI command ",(0,r.jsx)(n.code,{children:"semgrep scan"})," finishes with exit code 0 by default as long as the scan is able to complete, even if there are findings. To finish with exit code 1 on any findings, use the ",(0,r.jsx)(n.code,{children:"--error"})," flag."]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);