"use strict";(self.webpackChunkmegadocs=self.webpackChunkmegadocs||[]).push([[40741],{10064:(e,s,n)=>{n.d(s,{Ay:()=>l,RM:()=>r});var i=n(74848),t=n(28453);const r=[];function a(e){const s={code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"The following command runs an optimized set of rules for your project:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"semgrep --config p/default\n"})})]})}function l(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},21250:(e,s,n)=>{n.d(s,{A:()=>t});n(96540);var i=n(74848);function t(e){let{ruleId:s}=e;const n=new URL("https://semgrep.dev/r");return n.searchParams.set("q",s),(0,i.jsx)("a",{href:n,target:"_blank",children:s})}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var i=n(96540);const t={},r=i.createContext(t);function a(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:s},e.children)}},70644:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>h,contentTitle:()=>d,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"cheat-sheets/django-xss","title":"XSS prevention for Django","description":"Django XSS mitigation cheat sheet.","source":"@site/docs/cheat-sheets/django-xss.mdx","sourceDirName":"cheat-sheets","slug":"/cheat-sheets/django-xss","permalink":"/docs/cheat-sheets/django-xss","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle-semgrep/semgrep-docs/edit/main/docs/cheat-sheets/django-xss.mdx","tags":[],"version":"current","lastUpdatedAt":1752252315000,"frontMatter":{"slug":"django-xss","description":"Django XSS mitigation cheat sheet."},"sidebar":"cheatsheetSidebar","previous":{"title":"XSS","permalink":"/docs/category/xss"},"next":{"title":"XSS prevention for ExpressJS","permalink":"/docs/cheat-sheets/express-xss"}}');var t=n(74848),r=n(28453),a=n(21250),l=n(88483),c=n(10064);const o={slug:"django-xss",description:"Django XSS mitigation cheat sheet."},d="XSS prevention for Django",h={},p=[...l.RM,{value:"Mitigation summary",id:"mitigation-summary",level:2},{value:"Check your project using Semgrep",id:"check-your-project-using-semgrep",level:3},...c.RM,{value:"1. Server code: Marking &quot;safe&quot; content, which does not escape HTML",id:"1-server-code-marking-safe-content-which-does-not-escape-html",level:2},{value:"1.A. Using <strong>mark_safe()</strong>",id:"1a-using-mark_safe",level:3},{value:"References:",id:"references",level:4},{value:"Mitigation",id:"mitigation",level:4},{value:"Semgrep rule",id:"semgrep-rule",level:4},{value:"1.B. Using the <strong>SafeString</strong> class directly",id:"1b-using-the-safestring-class-directly",level:3},{value:"References:",id:"references-1",level:4},{value:"Mitigation",id:"mitigation-1",level:4},{value:"1.C. Registering a custom filter with <strong>is_safe=True</strong>",id:"1c-registering-a-custom-filter-with-is_safetrue",level:3},{value:"References:",id:"references-2",level:4},{value:"Mitigation",id:"mitigation-2",level:4},{value:"Semgrep rule",id:"semgrep-rule-1",level:4},{value:"1.D. Use of the <strong><strong>html</strong></strong> magic method in a class",id:"1d-use-of-the-html-magic-method-in-a-class",level:3},{value:"References:",id:"references-3",level:4},{value:"Mitigation",id:"mitigation-3",level:4},{value:"Semgrep rule",id:"semgrep-rule-2",level:4},{value:"1.E. Using <strong>html_safe()</strong>",id:"1e-using-html_safe",level:3},{value:"References:",id:"references-4",level:4},{value:"Mitigation:",id:"mitigation-4",level:4},{value:"Semgrep rule",id:"semgrep-rule-3",level:4},{value:"2. Server code: Bypassing the template engine",id:"2-server-code-bypassing-the-template-engine",level:2},{value:"2.A. Directly writing a response using <strong>HttpResponse</strong> or similar classes",id:"2a-directly-writing-a-response-using-httpresponse-or-similar-classes",level:3},{value:"References:",id:"references-5",level:4},{value:"Mitigation:",id:"mitigation-5",level:4},{value:"Semgrep rule",id:"semgrep-rule-4",level:4},{value:"2.B. Globally disabling autoescape",id:"2b-globally-disabling-autoescape",level:3},{value:"References:",id:"references-6",level:4},{value:"Mitigation:",id:"mitigation-6",level:4},{value:"Semgrep rule",id:"semgrep-rule-5",level:4},{value:"2.C. Setting <strong>autoescape=False</strong> in a template context",id:"2c-setting-autoescapefalse-in-a-template-context",level:3},{value:"References:",id:"references-7",level:4},{value:"Mitigation:",id:"mitigation-7",level:4},{value:"3. Templates: unescaped variables",id:"3-templates-unescaped-variables",level:2},{value:"3.A. Use of the <strong>| safe</strong> filter",id:"3a-use-of-the--safe-filter",level:3},{value:"References:",id:"references-8",level:4},{value:"Mitigation:",id:"mitigation-8",level:4},{value:"Semgrep rule",id:"semgrep-rule-6",level:4},{value:"3.B. Use of the <strong>| safeseq</strong> filter",id:"3b-use-of-the--safeseq-filter",level:3},{value:"References:",id:"references-9",level:4},{value:"Mitigation:",id:"mitigation-9",level:4},{value:"Semgrep rule",id:"semgrep-rule-7",level:4},{value:"3.C. The <strong>{% autoescape off %}</strong> block",id:"3c-the--autoescape-off--block",level:3},{value:"References:",id:"references-10",level:4},{value:"Mitigation:",id:"mitigation-10",level:4},{value:"Semgrep rule",id:"semgrep-rule-8",level:4},{value:"4. Templates: Variable in dangerous location&quot;",id:"4-templates-variable-in-dangerous-location",level:2},{value:"4.A. Unquoted variable in HTML attribute",id:"4a-unquoted-variable-in-html-attribute",level:3},{value:"References:",id:"references-11",level:4},{value:"Mitigation:",id:"mitigation-11",level:4},{value:"Semgrep rule",id:"semgrep-rule-9",level:4},{value:"4.B. Variable in <strong>href</strong> attribute",id:"4b-variable-in-href-attribute",level:3},{value:"References:",id:"references-12",level:4},{value:"Mitigation:",id:"mitigation-12",level:4},{value:"Semgrep rule",id:"semgrep-rule-10",level:4},{value:"4.C. Variable in <strong>&lt;script&gt;</strong> block",id:"4c-variable-in-script-block",level:3},{value:"References:",id:"references-13",level:4},{value:"Mitigation:",id:"mitigation-13",level:4}];function u(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"xss-prevention-for-django",children:"XSS prevention for Django"})}),"\n",(0,t.jsx)(l.Ay,{}),"\n",(0,t.jsx)(s.h2,{id:"mitigation-summary",children:"Mitigation summary"}),"\n",(0,t.jsxs)(s.p,{children:["In general, always use the template engine provided by Django using ",(0,t.jsx)(s.code,{children:"render()"}),". If you need HTML escaping, use ",(0,t.jsx)(s.code,{children:"mark_safe()"})," combined with ",(0,t.jsx)(s.code,{children:"format_html() "}),"and review each individual usage carefully. Once reviewed, mark with ",(0,t.jsx)(s.code,{children:"# nosem"}),". Beware of putting data in dangerous locations in templates. And as always, run a security checker continuously on your code."]}),"\n",(0,t.jsxs)(s.p,{children:["Semgrep ruleset for this cheatsheet: ",(0,t.jsx)(s.a,{href:"https://semgrep.dev/p/minusworld.django-xss",children:"https://semgrep.dev/p/minusworld.django-xss"})]}),"\n",(0,t.jsx)(s.h3,{id:"check-your-project-using-semgrep",children:"Check your project using Semgrep"}),"\n",(0,t.jsx)(c.Ay,{}),"\n",(0,t.jsx)(s.h2,{id:"1-server-code-marking-safe-content-which-does-not-escape-html",children:'1. Server code: Marking "safe" content, which does not escape HTML'}),"\n",(0,t.jsxs)(s.h3,{id:"1a-using-mark_safe",children:["1.A. Using ",(0,t.jsx)(s.strong,{children:"mark_safe()"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"mark_safe()"}),' marks the returned content as "safe to render." This instructs the template engine to bypass HTML escaping, creating the possibility of a XSS vulnerability.']}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"mark_safe(html_content)\n"})}),"\n",(0,t.jsx)(s.h4,{id:"references",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.1/ref/utils/#django.utils.safestring.mark_safe",children:[(0,t.jsx)(s.code,{children:"mark_safe()"})," documentation"]})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html",children:["Bandit Check B703 - Django ",(0,t.jsx)(s.code,{children:"mark_safe()"})]})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html",children:[(0,t.jsx)(s.code,{children:"format_html()"})," documentation"]})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation",children:"Mitigation"}),"\n",(0,t.jsxs)(s.p,{children:["Ban ",(0,t.jsx)(s.code,{children:"mark_safe()"}),". Alternatively, if needed, use in combination with ",(0,t.jsx)(s.code,{children:"format_html()"})," and review each usage carefully. Create an exemption with ",(0,t.jsx)(s.code,{children:"# nosem"}),"."]}),"\n",(0,t.jsx)(s.h4,{id:"semgrep-rule",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.django.security.audit.avoid-mark-safe.avoid-mark-safe"}),"\n",(0,t.jsxs)(s.h3,{id:"1b-using-the-safestring-class-directly",children:["1.B. Using the ",(0,t.jsx)(s.strong,{children:"SafeString"})," class directly"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"SafeString"})," class is how Django determines which variables should be escaped and which should not. Elements passed to ",(0,t.jsx)(s.code,{children:"mark_safe()"})," are returned as a ",(0,t.jsx)(s.code,{children:"SafeString"}),". Invoking ",(0,t.jsx)(s.code,{children:"SafeString"})," directly will bypass HTML escaping which could create a XSS vulnerabliity."]}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"SafeString(f\"<div>{request.POST.get('name')}</div>\")\n"})}),"\n",(0,t.jsx)(s.h4,{id:"references-1",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping",children:"Filters and auto-escaping in Django"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.1/ref/utils/#django.utils.safestring.SafeString",children:[(0,t.jsx)(s.code,{children:"SafeString"})," documentation"]})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-1",children:"Mitigation"}),"\n",(0,t.jsxs)(s.p,{children:["Ban ",(0,t.jsx)(s.code,{children:"SafeString()"}),". Alternatively, prefer ",(0,t.jsx)(s.code,{children:"mark_safe()"})," if necessary."]}),"\n",(0,t.jsxs)(s.h3,{id:"1c-registering-a-custom-filter-with-is_safetrue",children:["1.C. Registering a custom filter with ",(0,t.jsx)(s.strong,{children:"is_safe=True"})]}),"\n",(0,t.jsxs)(s.p,{children:["Registering a filter with ",(0,t.jsx)(s.code,{children:"is_safe=True"}),' indicates to Django that the filter absolutely does not introduce any unsafe HTML characters. The value returned from the filter will be marked as "safe" when the input is also marked "safe". Generally, this is acceptable, but if you cannot be certain the filter is safe, it may introduce a XSS vulnerability.']}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"@register.filter(is_safe=True)\ndef myfilter(value):\n  return value\n"})}),"\n",(0,t.jsx)(s.h4,{id:"references-2",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping",children:"Custom filters and auto-escaping"})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-2",children:"Mitigation"}),"\n",(0,t.jsxs)(s.p,{children:["Do not mark filters with ",(0,t.jsx)(s.code,{children:"is_safe=True"}),". Alternatively, prefer ",(0,t.jsx)(s.code,{children:"mark_safe()"})," if necessary."]}),"\n",(0,t.jsx)(s.h4,{id:"semgrep-rule-1",children:"Semgrep rule"}),"\n",(0,t.jsx)(s.p,{children:"python.django.security.audit.xss.filter-with-is-safe"}),"\n",(0,t.jsxs)(s.h3,{id:"1d-use-of-the-html-magic-method-in-a-class",children:["1.D. Use of the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.strong,{children:"html"})})," magic method in a class"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"__html__"})," magic method is used by the Django template engine to determine whether the object should be escaped. If available, the value returned by the method will not be escaped and could introduce a XSS vulnerability."]}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class RawHtml(str):\n  def __html__(self):\n  return str(self)\n"})}),"\n",(0,t.jsx)(s.h4,{id:"references-3",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.conditional_escape",children:[(0,t.jsx)(s.code,{children:"conditional_escape()"})," documentation"]})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#conditional_escape",children:[(0,t.jsx)(s.code,{children:"conditional_escape()"})," source code"]})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-3",children:"Mitigation"}),"\n",(0,t.jsxs)(s.p,{children:["Ban ",(0,t.jsx)(s.code,{children:"__html__"})," in classes. Alternatively, prefer ",(0,t.jsx)(s.code,{children:"mark_safe()"})," if necessary."]}),"\n",(0,t.jsx)(s.h4,{id:"semgrep-rule-2",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.django.security.audit.xss.html-magic-method.html-magic-method"}),"\n",(0,t.jsxs)(s.h3,{id:"1e-using-html_safe",children:["1.E. Using ",(0,t.jsx)(s.strong,{children:"html_safe()"})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"html_safe()"})," decorator adds the ",(0,t.jsx)(s.code,{children:"__html__"})," magic method to the supplied class. The added ",(0,t.jsx)(s.code,{children:"__html__"})," magic method returns the exact string representation of the class (for example ",(0,t.jsx)(s.code,{children:"str(self)"}),"). Because objects with the ",(0,t.jsx)(s.code,{children:"__html__"})," method are not escaped, this could create a XSS vulnerability."]}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"@html_safe\nclass RawHtml(str):\n  pass\n"})}),"\n",(0,t.jsx)(s.h4,{id:"references-4",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.html_safe",children:[(0,t.jsx)(s.code,{children:"html_safe()"})," documentation"]})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-4",children:"Mitigation:"}),"\n",(0,t.jsxs)(s.p,{children:["Ban ",(0,t.jsx)(s.code,{children:"html_safe()"}),". Alternatively, prefer ",(0,t.jsx)(s.code,{children:"mark_safe()"})," if necessary."]}),"\n",(0,t.jsx)(s.h4,{id:"semgrep-rule-3",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.django.security.audit.xss.html-safe.html-safe"}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"2-server-code-bypassing-the-template-engine",children:"2. Server code: Bypassing the template engine"}),"\n",(0,t.jsxs)(s.h3,{id:"2a-directly-writing-a-response-using-httpresponse-or-similar-classes",children:["2.A. Directly writing a response using ",(0,t.jsx)(s.strong,{children:"HttpResponse"})," or similar classes"]}),"\n",(0,t.jsxs)(s.p,{children:["Writing results directly to ",(0,t.jsx)(s.code,{children:"HttpResponse"})," or similar classes bypasses the Django template engine. This also bypasses the HTML escaping built into the template engine and creates the possibility of a XSS vulnerability. Use ",(0,t.jsx)(s.code,{children:"render()"})," with a template instead."]}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'return HttpResponse("Hello, " + name)\n'})}),"\n",(0,t.jsx)(s.h4,{id:"references-5",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss",children:"Django Book - Security: XSS"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://semgrep.dev/blog/2020/be-careful-what-you-request-for-django-method/",children:["Example of XSS via ",(0,t.jsx)(s.code,{children:"HttpResponseBadRequest"})]})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://docs.djangoproject.com/en/3.1/ref/request-response/#httpresponse-subclasses",children:"HttpResponse subclasses"})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-5",children:"Mitigation:"}),"\n",(0,t.jsxs)(s.p,{children:["Ban ",(0,t.jsx)(s.code,{children:"HttpResponse"})," and similar classes. Alternatively, use ",(0,t.jsx)(s.code,{children:"render()"}),"."]}),"\n",(0,t.jsx)(s.h4,{id:"semgrep-rule-4",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.django.security.audit.xss.direct-use-of-httpresponse"}),"\n",(0,t.jsx)(s.h3,{id:"2b-globally-disabling-autoescape",children:"2.B. Globally disabling autoescape"}),"\n",(0,t.jsx)(s.p,{children:"Autoescaping can be globally disabled in Django settings. This should never be done if you are rendering HTML; now, every response returned to the user will need to be audited to ensure it is free of XSS vulnerabilities."}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"TEMPLATES = [\n  {\n    ...,\n    'OPTIONS': {'autoescape': False}\n  }\n]\n"})}),"\n",(0,t.jsx)(s.h4,{id:"references-6",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates",children:"Django template settings documentation"})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-6",children:"Mitigation:"}),"\n",(0,t.jsxs)(s.p,{children:["Ban globally dissabling autoescape. Alternatively, do not globally disable escaping. If HTML escaping is necessary, use ",(0,t.jsx)(s.code,{children:"mark_safe()"}),"."]}),"\n",(0,t.jsx)(s.h4,{id:"semgrep-rule-5",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.django.security.audit.xss.global-autoescape-off.global-autoescape-off"}),"\n",(0,t.jsxs)(s.h3,{id:"2c-setting-autoescapefalse-in-a-template-context",children:["2.C. Setting ",(0,t.jsx)(s.strong,{children:"autoescape=False"})," in a template context"]}),"\n",(0,t.jsxs)(s.p,{children:["Setting ",(0,t.jsx)(s.code,{children:"autoescape=False"})," in a template context will disable HTML escaping for that template. Any data rendered in that template could be a XSS vulnerability."]}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'response = render(request, "index.html", {"autoescape": False})\n'})}),"\n",(0,t.jsx)(s.h4,{id:"references-7",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://github.com/django/django/blob/54ea290e5bbd19d87bd8dba807738eeeaf01a362/django/template/context.py#L135",children:"Context source code"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.1/ref/templates/api/#django.template.Template.render",children:[(0,t.jsx)(s.code,{children:"Template.render()"})," documentation"]})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.loader.render_to_string",children:[(0,t.jsx)(s.code,{children:"render_to_string()"})," documentation"]})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#django.shortcuts.render",children:[(0,t.jsx)(s.code,{children:"render()"})," documentation"]})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-7",children:"Mitigation:"}),"\n",(0,t.jsxs)(s.p,{children:['description: "Ban ',(0,t.jsx)(s.code,{children:"autoescape=False"}),' in template contexts"\nalternative: "Use ',(0,t.jsx)(s.code,{children:"mark_safe()"}),' if necessary"\nrule: "python.django.security.audit.xss.context-autoescape-off.context-autoescape-off"']}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"3-templates-unescaped-variables",children:"3. Templates: unescaped variables"}),"\n",(0,t.jsxs)(s.h3,{id:"3a-use-of-the--safe-filter",children:["3.A. Use of the ",(0,t.jsx)(s.strong,{children:"| safe"})," filter"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"| safe"}),' filter marks the content as "safe for rendering." This has the same effect as ',(0,t.jsx)(s.code,{children:"mark_safe()"})," in Python code. This will permit direct rendering of HTML and create a possible XSS vulnerability."]}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-django",children:"{{ name | safe }}\n"})}),"\n",(0,t.jsx)(s.h4,{id:"references-8",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safe",children:[(0,t.jsx)(s.code,{children:"| safe"})," filter documentation"]})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-8",children:"Mitigation:"}),"\n",(0,t.jsxs)(s.p,{children:["Ban ",(0,t.jsx)(s.code,{children:"| safe"}),". Alternatively, use ",(0,t.jsx)(s.code,{children:"mark_safe()"})," in Python if necessary."]}),"\n",(0,t.jsx)(s.h4,{id:"semgrep-rule-6",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe"}),"\n",(0,t.jsxs)(s.h3,{id:"3b-use-of-the--safeseq-filter",children:["3.B. Use of the ",(0,t.jsx)(s.strong,{children:"| safeseq"})," filter"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"| safeseq"}),' filter marks the content as "safe for rendering." This has the same effect as ',(0,t.jsx)(s.code,{children:"mark_safe()"})," in Python code. This will permit direct rendering of HTML and create a possible XSS vulnerability."]}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-django",children:'{{ names | safeseq | join:", " }}\n'})}),"\n",(0,t.jsx)(s.h4,{id:"references-9",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safeseq",children:[(0,t.jsx)(s.code,{children:"| safeseq"})," documentation"]})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-9",children:"Mitigation:"}),"\n",(0,t.jsxs)(s.p,{children:['"Ban ',(0,t.jsx)(s.code,{children:"| safeseq"}),". Alternatively, use ",(0,t.jsx)(s.code,{children:"mark_safe()"})," in Python if necessary."]}),"\n",(0,t.jsx)(s.h4,{id:"semgrep-rule-7",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq"}),"\n",(0,t.jsxs)(s.h3,{id:"3c-the--autoescape-off--block",children:["3.C. The ",(0,t.jsx)(s.strong,{children:"{% autoescape off %}"})," block"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"{$ autoescape off %}"})," block disables autoescaping for whole portions of the template. Disabling autoescaping allows HTML characters to be rendered directly onto the page which could create XSS vulnerabilities."]}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-django",children:"{% autoescape off %}\n"})}),"\n",(0,t.jsx)(s.h4,{id:"references-10",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#autoescape",children:[(0,t.jsx)(s.code,{children:"autoescape"})," block documentation"]})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-10",children:"Mitigation:"}),"\n",(0,t.jsxs)(s.p,{children:["Ban ",(0,t.jsx)(s.code,{children:"{% autoescape off %}"}),". Alternatively, use ",(0,t.jsx)(s.code,{children:"mark_safe()"})," in Python if necessary."]}),"\n",(0,t.jsx)(s.h4,{id:"semgrep-rule-8",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.django.security.audit.xss.template-autoescape-off.template-autoescape-off"}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"4-templates-variable-in-dangerous-location",children:'4. Templates: Variable in dangerous location"'}),"\n",(0,t.jsx)(s.h3,{id:"4a-unquoted-variable-in-html-attribute",children:"4.A. Unquoted variable in HTML attribute"}),"\n",(0,t.jsxs)(s.p,{children:["Unquoted template variables rendered into HTML attributes is a potential XSS vector because an attacker could inject JavaScript handlers which do not require HTML characters. An example handler might look like: ",(0,t.jsx)(s.code,{children:"onmouseover=alert(1)"}),". HTML escaping will not mitigate this. The variable must be quoted to avoid this."]}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-django",children:'<div class="{{ classes }}"></div>\n'})}),"\n",(0,t.jsx)(s.h4,{id:"references-11",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",children:"Flask cross-site scripting considerations"})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-11",children:"Mitigation:"}),"\n",(0,t.jsx)(s.p,{children:"Flag unquoted HTML attributes with Jinja expressions. Alternatively, always use quotes around HTML attributes."}),"\n",(0,t.jsx)(s.h4,{id:"semgrep-rule-9",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.flask.security.xss.audit.template-unquoted-attribute-var.template-unquoted-attribute-var"}),"\n",(0,t.jsxs)(s.h3,{id:"4b-variable-in-href-attribute",children:["4.B. Variable in ",(0,t.jsx)(s.strong,{children:"href"})," attribute"]}),"\n",(0,t.jsxs)(s.p,{children:["Template variables in a ",(0,t.jsx)(s.code,{children:"href"})," value could still accept the ",(0,t.jsx)(s.code,{children:"javascript:"})," URI. This could be a XSS vulnerability. HTML escaping will not prevent this. Use ",(0,t.jsx)(s.code,{children:"url_for"})," to generate links."]}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-django",children:'<a href="{{ link }}"></a>\n'})}),"\n",(0,t.jsx)(s.h4,{id:"references-12",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss",children:"Flask cross-site scripting considerations"})}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-12",children:"Mitigation:"}),"\n",(0,t.jsxs)(s.p,{children:["Flag template variables in ",(0,t.jsx)(s.code,{children:"href"})," attributes. Alternatively, use ",(0,t.jsx)(s.code,{children:"url_for"})," to generate links."]}),"\n",(0,t.jsx)(s.h4,{id:"semgrep-rule-10",children:"Semgrep rule"}),"\n",(0,t.jsx)(a.A,{ruleId:"python.django.security.audit.xss.template-href-var.template-href-var"}),"\n",(0,t.jsxs)(s.h3,{id:"4c-variable-in-script-block",children:["4.C. Variable in ",(0,t.jsx)(s.strong,{children:"<script>"})," block"]}),"\n",(0,t.jsx)(s.p,{children:"Template variables placed directly into JavaScript or similar are now directly in a code execution context. Normal HTML escaping will not prevent the possibility of code injection because code can be written without HTML characters. This creates the potential for XSS vulnerabilities, or worse."}),"\n",(0,t.jsx)(s.h4,{id:"references-13",children:"References:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",children:"Template engines: Why default encoders are not enough"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/",children:"Safely including data for JavaScript in a Django template"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.a,{href:"https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#json-script",children:[(0,t.jsx)(s.code,{children:"json_script"})," documentation"]})}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Example:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-django",children:"<script>var name = {{ name }};<\/script>\n"})}),"\n",(0,t.jsx)(s.h4,{id:"mitigation-13",children:"Mitigation:"}),"\n",(0,t.jsxs)(s.p,{children:["Ban template variables in ",(0,t.jsx)(s.code,{children:"<script>"})," blocks. Alternatively, use the ",(0,t.jsx)(s.code,{children:"json_script"})," template tag and read the data in JavaScript using the element ID."]})]})}function g(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},88483:(e,s,n)=>{n.d(s,{Ay:()=>l,RM:()=>r});var i=n(74848),t=n(28453);const r=[];function a(e){const s={p:"p",...(0,t.R)(),...e.components};return(0,i.jsx)(s.p,{children:"This is a cross-site scripting (XSS) prevention cheat sheet by Semgrep, Inc. It contains code patterns of potential XSS in an application. Instead of scrutinizing code for exploitable vulnerabilities, the recommendations in this cheat sheet pave a safe road for developers that mitigate the possibility of XSS in your code. By following these recommendations, you can be reasonably sure your code is free of XSS."})}function l(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);